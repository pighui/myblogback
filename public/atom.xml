<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎浏览本博客</title>
  
  <subtitle>书生的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xuhuiblog.cn/"/>
  <updated>2019-05-10T14:04:40.000Z</updated>
  <id>https://www.xuhuiblog.cn/</id>
  
  <author>
    <name>一介书生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人脸自动补全</title>
    <link href="https://www.xuhuiblog.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%BA%E8%84%B8%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <id>https://www.xuhuiblog.cn/机器学习/人脸自动补全/</id>
    <published>2019-05-10T13:31:00.000Z</published>
    <updated>2019-05-10T14:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>导包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><p>加载数据</p><ul><li>sklearn.datasets.fetch_olivetti_faces()  获得（意大利电信）公司的面部数据<ul><li>data样本数据  (400, 4096)</li><li>target 目标数据 (400,)  共40人，每人10张图片</li><li>images 图片数据 (400, 64, 64)</li></ul></li></ul><p>​    注：第一次使用时会自动从网络下载到本地，4M左右大小，  网址：<a href="https://ndownloader.figshare.com/files/5976027" target="_blank" rel="noopener">https://ndownloader.figshare.com/files/5976027</a> ，默认下载到用户的{home}路径下的scikit_learn_data目录中。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faces = fetch_olivetti_faces()  <span class="comment"># 第一次从网上下载，以后从本地下载</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(faces.data[<span class="number">0</span>].reshape(<span class="number">64</span>, <span class="number">64</span>),cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(-0.5, 63.5, 63.5, -0.5)</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/人脸自动补全/output_6_1.png" alt="png"></p><p>拆分数据</p><ul><li>拆分每个人前8张照片的上半边脸和下半边脸 为训练数据</li><li>拆分每个人后2张照片的上半边脸和下半边脸 为 预测 数据</li><li>i 人的索引（0-39）， j（0-9）每人的照片数 , 如第1人的第7张照片, index为 7<ul><li>index = 10*i + j </li></ul></li><li>脸的照片是4096,即为(64, 64)<ul><li>上半边脸  up_face = face[:2048]</li><li>下半边脸  bottom_face = face[2048:]</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">trainX, trainy, testX, testy = [],[],[],[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>): <span class="comment">#人数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># 每人十张照片</span></span><br><span class="line">        <span class="comment"># 确定某一人在样本数据中的索引位置</span></span><br><span class="line">        index = i*<span class="number">10</span> + j</span><br><span class="line">        face = faces.data[index]  <span class="comment"># 获取某一人员的面部数据</span></span><br><span class="line">        up_face = face[:<span class="number">2048</span>]  <span class="comment"># 上半部分脸</span></span><br><span class="line">        down_face = face[<span class="number">2048</span>:]  <span class="comment"># 下半部分脸</span></span><br><span class="line">        <span class="comment"># 前八张作为训练数据集</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="number">8</span>:</span><br><span class="line">            trainX.append(up_face)</span><br><span class="line">            trainy.append(down_face)</span><br><span class="line">        <span class="comment"># 后两张做测试数据</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            testX.append(up_face)</span><br><span class="line">            testy.append(down_face)</span><br><span class="line"><span class="comment"># 将列表转换成数组</span></span><br><span class="line">trainX, trainy, testX, testy = (np.array(trainX),</span><br><span class="line">                               np.array(trainy),</span><br><span class="line">                               np.array(testX),</span><br><span class="line">                               np.array(testy))</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainX.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(320, 2048)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testX.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(80, 2048)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(trainX[<span class="number">0</span>].reshape(<span class="number">32</span>,<span class="number">64</span>), cmap=<span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.imshow(trainy[<span class="number">0</span>].reshape(<span class="number">32</span>,<span class="number">64</span>), cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f99afbf1b70&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/人脸自动补全/output_11_1.png" alt="png"></p><p>Knn Vs 线性 回归模型 训练与预测</p><ul><li>从训练时间上看，knn最快，岭回归其次，最慢的就是Lasso</li><li>从预测时间上看，岭回归和Lasso差不多，最慢的就是knn</li><li>准确率最高的是knn  缩减系数Lasso要高于岭回归<ul><li>r2_score()查看评分</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># knn近邻算法</span></span><br><span class="line">knn = KNeighborsRegressor(n_neighbors=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 线性回归</span></span><br><span class="line">linear = LinearRegression()</span><br><span class="line"><span class="comment"># 岭回归</span></span><br><span class="line">ridge = Ridge(alpha=<span class="number">0.7</span>)</span><br><span class="line"><span class="comment"># 劳斯回归</span></span><br><span class="line">lasso = Lasso(alpha=<span class="number">0.0005</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"四种模型训练时间对比："</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [knn, linear, ridge, lasso]:</span><br><span class="line">    name = model.__class__.__name__</span><br><span class="line">    print(<span class="string">"%s 模型训练时间"</span> % name)</span><br><span class="line">    %time model.fit(trainX, trainy)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">四种模型训练时间对比：</span><br><span class="line">KNeighborsRegressor 模型训练时间</span><br><span class="line">CPU times: user 19.1 ms, sys: 4.22 ms, total: 23.3 ms</span><br><span class="line">Wall time: 22.3 ms</span><br><span class="line">LinearRegression 模型训练时间</span><br><span class="line">CPU times: user 1.77 s, sys: 116 ms, total: 1.89 s</span><br><span class="line">Wall time: 473 ms</span><br><span class="line">Ridge 模型训练时间</span><br><span class="line">CPU times: user 145 ms, sys: 16.4 ms, total: 161 ms</span><br><span class="line">Wall time: 40.6 ms</span><br><span class="line">Lasso 模型训练时间</span><br><span class="line">CPU times: user 2min 19s, sys: 4.43 s, total: 2min 23s</span><br><span class="line">Wall time: 1min 11s</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y_dict = &#123;&#125;</span><br><span class="line">print(<span class="string">"四种模型预测时间对比："</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [knn, linear, ridge, lasso]:</span><br><span class="line">    name = model.__class__.__name__</span><br><span class="line">    print(<span class="string">"%s 模型预测时间"</span> % name)</span><br><span class="line">    %time y_ = model.predict(testX)</span><br><span class="line">    y_dict[name] = y_  <span class="comment"># 手机预测结果</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">四种模型预测时间对比：</span><br><span class="line">KNeighborsRegressor 模型预测时间</span><br><span class="line">CPU times: user 96.5 ms, sys: 0 ns, total: 96.5 ms</span><br><span class="line">Wall time: 95.7 ms</span><br><span class="line">LinearRegression 模型预测时间</span><br><span class="line">CPU times: user 16.9 ms, sys: 19 µs, total: 16.9 ms</span><br><span class="line">Wall time: 4.2 ms</span><br><span class="line">Ridge 模型预测时间</span><br><span class="line">CPU times: user 16.1 ms, sys: 3 µs, total: 16.1 ms</span><br><span class="line">Wall time: 3.89 ms</span><br><span class="line">Lasso 模型预测时间</span><br><span class="line">CPU times: user 16.1 ms, sys: 0 ns, total: 16.1 ms</span><br><span class="line">Wall time: 3.89 ms</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"四种模型得分对比："</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [knn, linear, ridge, lasso]:</span><br><span class="line">    name = model.__class__.__name__</span><br><span class="line">    y_ = y_dict[name]</span><br><span class="line">    print(<span class="string">"%s 模型得分：%.4f"</span> % (name,r2_score(testy,y_)))</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四种模型得分对比：</span><br><span class="line">KNeighborsRegressor 模型得分：0.5391</span><br><span class="line">LinearRegression 模型得分：0.2070</span><br><span class="line">Ridge 模型得分：0.4668</span><br><span class="line">Lasso 模型得分：0.5428</span><br></pre></td></tr></table></figure></div><p>以图形的方式来查看各种模型的效果</p><ul><li>随机抽出5张人脸（从测试数据里抽取），绘制5列<ul><li>np.random.permutation(indices)  随机排列</li></ul></li><li>第一列为真实人脸数据， 后四列为预测人脸数据<ul><li>真实的人脸 真实的上半边+真实的下半边</li><li>预测的人脸 真实的上半边+预测的下半边</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indices = np.arange(testX.shape[<span class="number">0</span>])  <span class="comment"># 获取预测数据的索引列表</span></span><br><span class="line">indices = np.random.permutation(indices)</span><br><span class="line">indices</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([61, 50, 70, 42, 20, 56, 13, 63, 25, 23, 26, 29, 27, 49, 51, 67, 59,</span><br><span class="line">       54, 62, 66, 65, 72, 39, 21, 53, 71, 58, 18, 43, 36,  3, 75, 44, 15,</span><br><span class="line">       68, 76, 32, 30, 60, 33,  7, 10, 52,  4,  8,  1, 73, 38, 46, 77, 34,</span><br><span class="line">       14, 17, 79, 69, 31, 45,  9,  2, 24, 16, 40, 64, 74, 28,  5, 22, 78,</span><br><span class="line">       48, 11, 35,  6, 47, 19, 12, 57,  0, 55, 41, 37])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">40</span>,<span class="number">40</span>))</span><br><span class="line">pos = <span class="number">1</span> <span class="comment"># 子画布的序号</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> indices[:<span class="number">5</span>]:  <span class="comment"># 随机抽取前五人的预测数据</span></span><br><span class="line">    <span class="comment"># 画出真实的面部</span></span><br><span class="line">    ax1 = plt.subplot(<span class="number">5</span>,<span class="number">5</span>,pos)</span><br><span class="line">    ax1.set_title(<span class="string">'True face'</span>, fontsize=<span class="number">50</span>)</span><br><span class="line">    up = testX[index]</span><br><span class="line">    down = testy[index]</span><br><span class="line">    face = np.concatenate((up,down))  <span class="comment"># 将上下两部分脸放在一起</span></span><br><span class="line">    plt.imshow(face.reshape(<span class="number">64</span>,<span class="number">64</span>), cmap=<span class="string">'gray'</span>)</span><br><span class="line">    pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> model_name <span class="keyword">in</span> y_dict:</span><br><span class="line">        pre_down_face = y_dict[model_name]</span><br><span class="line">        pre_face = np.concatenate((up,pre_down_face[index]))</span><br><span class="line">        ax2 = plt.subplot(<span class="number">5</span>,<span class="number">5</span>,pos)</span><br><span class="line">        ax2.set_title(model_name,fontsize=<span class="number">50</span>)</span><br><span class="line">        plt.imshow(pre_face.reshape(<span class="number">64</span>,<span class="number">64</span>),cmap=<span class="string">'gray'</span>)</span><br><span class="line">        pos+=<span class="number">1</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/人脸自动补全/output_21_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导包&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Logistics回归和数字识别</title>
    <link href="https://www.xuhuiblog.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Logistics%E5%9B%9E%E5%BD%92%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://www.xuhuiblog.cn/机器学习/Logistics回归和数字识别/</id>
    <published>2019-05-10T04:27:45.000Z</published>
    <updated>2019-05-17T13:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h1><h2 id="【关键词】Logistics函数，最大似然估计，梯度下降法"><a href="#【关键词】Logistics函数，最大似然估计，梯度下降法" class="headerlink" title="【关键词】Logistics函数，最大似然估计，梯度下降法"></a>【关键词】Logistics函数，最大似然估计，梯度下降法</h2><a id="more"></a><h2 id="1、Logistics回归的原理"><a href="#1、Logistics回归的原理" class="headerlink" title="1、Logistics回归的原理"></a>1、Logistics回归的原理</h2><p>利用Logistics回归进行分类的主要思想是：根据现有数据对分类边界线建立回归公式，以此进行分类。这里的“回归” 一词源于最佳拟合，表示要找到最佳拟合参数集。</p><p>训练分类器时的做法就是寻找最佳拟合参数，使用的是最优化算法。接下来介绍这个二值型输出分类器的数学原理</p><p>Logistic Regression和Linear Regression的原理是相似的，可以简单的描述为这样的过程：</p><p>（1）找一个合适的预测函数，一般表示为h函数，该函数就是我们需要找的分类函数，它用来预测输入数据的判断结果。这个过程是非常关键的，需要对数据有一定的了解或分析，知道或者猜测预测函数的“大概”形式，比如是线性函数还是非线性函数。</p><p>（2）构造一个Cost函数（损失函数），该函数表示预测的输出（h）与训练数据类别（y）之间的偏差，可以是二者之间的差（h-y）或者是其他的形式。综合考虑所有训练数据的“损失”，将Cost求和或者求平均，记为J(θ)函数，表示所有训练数据预测值与实际类别的偏差。</p><p>（3）显然，J(θ)函数的值越小表示预测函数越准确（即h函数越准确），所以这一步需要做的是找到J(θ)函数的最小值。找函数的最小值有不同的方法，Logistic Regression实现时有梯度下降法（Gradient Descent）。</p><h3 id="1-构造预测函数"><a href="#1-构造预测函数" class="headerlink" title="1)  构造预测函数"></a>1)  构造预测函数</h3><p>Logistic Regression虽然名字里带“回归”，但是它实际上是一种分类方法，用于两分类问题（即输出只有两种）。首先需要先找到一个预测函数（h），显然，该函数的输出必须是两类值（分别代表两个类别），所以利用了<em>Logistic函数（或称为Sigmoid函数）</em>，函数形式为：</p><p><img src="/机器学习/Logistics回归和数字识别/images/1.PNG" alt="1.PNG"></p><p>该函数形状为：</p><p><img src="/机器学习/Logistics回归和数字识别/images/2.PNG" alt="2.PNG"></p><p>预测函数可以写为：</p><p><img src="/机器学习/Logistics回归和数字识别/images/3.jpg" alt="3.jpg"></p><h3 id="2）构造损失函数"><a href="#2）构造损失函数" class="headerlink" title="2）构造损失函数"></a>2）构造损失函数</h3><p>Cost函数和J(θ)函数是基于<em>最大似然估计</em>推导得到的。</p><p>每个样本属于其真实标记的概率，即似然函数，可以写成：</p><p><img src="/机器学习/Logistics回归和数字识别/images/4.jpg" alt="4.jpg"></p><p>所有样本都属于其真实标记的概率为</p><p><img src="/机器学习/Logistics回归和数字识别/images/5.jpg" alt="5.jpg"></p><p>对数似然函数为</p><p><img src="/机器学习/Logistics回归和数字识别/images/6.jpg" alt="6.jpg"></p><p>最大似然估计就是要求得使l(θ)取最大值时的θ，其实这里可以使用梯度上升法求解，求得的θ就是要求的最佳参数</p><h3 id="3-梯度下降法求J-θ-的最小值"><a href="#3-梯度下降法求J-θ-的最小值" class="headerlink" title="3) 梯度下降法求J(θ)的最小值"></a>3) 梯度下降法求J(θ)的最小值</h3><p>求J(θ)的最小值可以使用<em>梯度下降法</em>，根据梯度下降法可得θ的更新过程:</p><p><img src="/机器学习/Logistics回归和数字识别/images/7.jpg" alt="7.jpg"></p><p>式中为α学习步长，下面来求偏导：</p><p><img src="/机器学习/Logistics回归和数字识别/images/8.jpg" alt="8.jpg"></p><p>上式求解过程中用到如下的公式：</p><p><img src="/机器学习/Logistics回归和数字识别/images/9.jpg" alt="9.jpg"></p><p>因此，θ的更新过程可以写成:</p><p><img src="/机器学习/Logistics回归和数字识别/images/10.jpg" alt="10.jpg"></p><p>因为式中α本来为一常量，所以1/m一般将省略，所以最终的θ更新过程为：</p><p><img src="/机器学习/Logistics回归和数字识别/images/11.jpg" alt="11.jpg"></p><h2 id="2、实战"><a href="#2、实战" class="headerlink" title="2、实战"></a>2、实战</h2><p><code>sklearn.linear_model.LogisticRegression(penalty=&#39;l2&#39;, dual=False, tol=0.0001, C=1.0, fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None, solver=&#39;liblinear&#39;, max_iter=100, multi_class=&#39;ovr&#39;, verbose=0, warm_start=False, n_jobs=1)</code></p><p>solver参数的选择：</p><ul><li>“liblinear”：小数量级的数据集</li><li>“lbfgs” or “newton-cg”：大数量级的数据集以及多分类问题</li><li>“sag”：极大的数据集</li></ul><h3 id="逻辑斯提-Logistic-总结"><a href="#逻辑斯提-Logistic-总结" class="headerlink" title="逻辑斯提 Logistic 总结"></a>逻辑斯提 Logistic 总结</h3><ul><li>是一个线性回归模型，处理二分类问题</li><li>概率论</li><li>对分类边界建立回归公式</li><li>不能处理回归问题</li></ul><h3 id="1-手写数字数据集的分类"><a href="#1-手写数字数据集的分类" class="headerlink" title="1) 手写数字数据集的分类"></a>1) 手写数字数据集的分类</h3><p>使用KNN与Logistic回归两种方法</p><ul><li>数据 load_digits() 函数</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digits = load_digits()</span><br></pre></td></tr></table></figure></div><p>切分训练与预测数据： train_test_split()</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="keyword">as</span> split</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainX,testX,trainy,testy = split(digits.data, digits.target)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainX.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1347, 64)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display(trainy[<span class="number">15</span>])</span><br><span class="line">plt.imshow(trainX[<span class="number">15</span>].reshape(<span class="number">8</span>, <span class="number">8</span>), cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f9161730978&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/Logistics回归和数字识别/output_24_2.png" alt="png"></p><p>创建模型，训练和预测</p><ul><li>LogisticRegression(C=0.1)<ul><li>C惩罚系数 允许误差的阈值</li><li>C越大，允许的误差越大</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logistic = LogisticRegression(C=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logistic.fit(trainX, trainy).score(testX, testy)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.9733333333333334</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_ = logistic.predict(testX)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testX.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(450, 64)</span><br></pre></td></tr></table></figure></div><p>展示结果:前100个样本数据</p><ul><li>plt.imshow(arr, cmap=’gray’)</li><li>axes.axis(‘off’)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">30</span>, <span class="number">40</span>))</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">100</span>):  <span class="comment"># 前100预测的图片</span></span><br><span class="line">    ax = plt.subplot(<span class="number">10</span>, <span class="number">10</span>, index+<span class="number">1</span>)</span><br><span class="line">    ax.axis(<span class="string">'off'</span>)</span><br><span class="line">    ax.set_title(<span class="string">'True:%s\nPredict:%s'</span> %(testy[index], y_[index]),</span><br><span class="line">                fontsize=<span class="number">30</span>)</span><br><span class="line">    plt.imshow(testX[index].reshape(<span class="number">8</span>, <span class="number">8</span>), cmap=<span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/Logistics回归和数字识别/output_32_0.png" alt="png"></p><h3 id="2-使用make-blobs产生数据集进行分类"><a href="#2-使用make-blobs产生数据集进行分类" class="headerlink" title="2) 使用make_blobs产生数据集进行分类"></a>2) 使用make_blobs产生数据集进行分类</h3><p>导包使用datasets.make_blobs创建一系列点</p><ul><li>n_samples=100 样本点数</li><li>n_features=2  样本特征</li><li>centers=[[1,4],[3,2],[5,6]]  三个中心数据</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br></pre></td></tr></table></figure></div><p>设置三个中心点，随机创建100个点</p><ul><li>samples,target = make_blobs(n_samples, n_features,centers)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples, target = make_blobs(<span class="number">100</span>, <span class="number">2</span>, [[<span class="number">1</span>,<span class="number">5</span>], [<span class="number">4</span>,<span class="number">2</span>], [<span class="number">5</span>,<span class="number">6</span>]])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 2)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series(target).unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([1, 2, 0])</span><br></pre></td></tr></table></figure></div><p>创建机器学习模型，训练数据</p><ul><li>knn分类 训练</li><li>logistic训练</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">knn_c = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">logistic = LogisticRegression(C=<span class="number">0.1</span>,</span><br><span class="line">                              solver=<span class="string">'liblinear'</span>, multi_class=<span class="string">'ovr'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [knn_c, logistic]:</span><br><span class="line">    model.fit(samples, target)</span><br></pre></td></tr></table></figure></div><p>显示两个特征的散点图</p><ul><li>plt.scatter(train[:,0],train[:,1],c=target)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(samples[:, <span class="number">0</span>], samples[:, <span class="number">1</span>], c= target)</span><br><span class="line">plt.show</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;function matplotlib.pyplot.show(*args, **kw)&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/Logistics回归和数字识别/output_44_1.png" alt="png"></p><p>提取坐标点，对坐标点进行处理</p><ul><li>获取边界<ul><li>f1_min, f1_max = train[:,0].min()-0.5, train[:,1].max()+0.5</li><li>f2_min, f2_max = train[:,1].min()-0.5, train[:,1].max()+0.5</li></ul></li><li>等差数列<ul><li>f1 = np.linspace(f1_min, f1_max,200)</li><li>f2 = np.linspace(f2_min, f2_max, 200)</li></ul></li><li>f1和f2交叉、合并成X_test测试数据<ul><li>f1_m,f2_m = np.meshgrid(f1, f2)</li><li>X_test = np.c_[f1_m.ravel(),f2_m.ravel()]</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f1 = np.linspace(samples[:, <span class="number">0</span>].min()<span class="number">-0.5</span>,</span><br><span class="line">                samples[:, <span class="number">0</span>].max()+<span class="number">0.5</span>, num=<span class="number">200</span>)</span><br><span class="line">f2 = np.linspace(samples[:, <span class="number">1</span>].min()<span class="number">-0.5</span>,</span><br><span class="line">                samples[:, <span class="number">1</span>].max()+<span class="number">0.5</span>, num=<span class="number">200</span>)</span><br><span class="line">f1, f2 = np.meshgrid(f1, f2) <span class="comment"># 将f1，f2转成200*200的二维数组</span></span><br><span class="line">testX = np.c_[f1.ravel(), f2.ravel()] <span class="comment"># 转成2列40000行的预测数据</span></span><br></pre></td></tr></table></figure></div><p>预测坐标点数据, 同时查看执行的时间 %time指令</p><ul><li>knn分类 预测</li><li>logistic 预测</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%time y_knn = knn_c.predict(testX)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPU times: user 231 ms, sys: 24.4 ms, total: 255 ms</span><br><span class="line">Wall time: 65 ms</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%time y_logistic = logistic.predict(testX)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPU times: user 7.69 ms, sys: 0 ns, total: 7.69 ms</span><br><span class="line">Wall time: 2.14 ms</span><br></pre></td></tr></table></figure></div><p>绘制图形</p><ul><li>matplotlib.colors.ListedColormap</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmaps = ListedColormap([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>])</span><br></pre></td></tr></table></figure></div><p>画出两种模型的真实数据与预测数据的散点图</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(<span class="number">121</span>)</span><br><span class="line"><span class="comment"># y_knn 模型预测的数据，满屏的点</span></span><br><span class="line">plt.scatter(testX[:, <span class="number">0</span>], testX[:, <span class="number">1</span>], c=y_knn, cmap=cmaps)</span><br><span class="line">plt.scatter(samples[:, <span class="number">0</span>], samples[:, <span class="number">1</span>], c=target)</span><br><span class="line">ax1.set_title(<span class="string">'KNN分类与预测'</span>, fontproperties=<span class="string">'SimHei'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(<span class="number">122</span>)</span><br><span class="line"><span class="comment"># y_logistic 模型预测的数据，满屏的点</span></span><br><span class="line">plt.scatter(testX[:, <span class="number">0</span>], testX[:, <span class="number">1</span>], c=y_logistic, cmap=cmaps)</span><br><span class="line">plt.scatter(samples[:, <span class="number">0</span>], samples[:, <span class="number">1</span>], c=target)</span><br><span class="line">ax2.set_title(<span class="string">'Logistic预测数据'</span>, fontproperties=<span class="string">'SimHei'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/Logistics回归和数字识别/output_54_0.png" alt="png"></p><h2 id="3、预测年收入是否大于50K美元"><a href="#3、预测年收入是否大于50K美元" class="headerlink" title="3、预测年收入是否大于50K美元"></a>3、预测年收入是否大于50K美元</h2><p>读取adults.txt文件，并使用逻辑斯底回归算法训练模型，根据种族race、职业occupation、工作时长hours_per_week来预测一个人的收入</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adults = pd.read_csv(<span class="string">'data/adults.txt'</span>)</span><br><span class="line">adults.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>age</th><br>      <th>workclass</th><br>      <th>final_weight</th><br>      <th>education</th><br>      <th>education_num</th><br>      <th>marital_status</th><br>      <th>occupation</th><br>      <th>relationship</th><br>      <th>race</th><br>      <th>sex</th><br>      <th>capital_gain</th><br>      <th>capital_loss</th><br>      <th>hours_per_week</th><br>      <th>native_country</th><br>      <th>salary</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>39</td><br>      <td>State-gov</td><br>      <td>77516</td><br>      <td>Bachelors</td><br>      <td>13</td><br>      <td>Never-married</td><br>      <td>Adm-clerical</td><br>      <td>Not-in-family</td><br>      <td>White</td><br>      <td>Male</td><br>      <td>2174</td><br>      <td>0</td><br>      <td>40</td><br>      <td>United-States</td><br>      <td>&lt;=50K</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>50</td><br>      <td>Self-emp-not-inc</td><br>      <td>83311</td><br>      <td>Bachelors</td><br>      <td>13</td><br>      <td>Married-civ-spouse</td><br>      <td>Exec-managerial</td><br>      <td>Husband</td><br>      <td>White</td><br>      <td>Male</td><br>      <td>0</td><br>      <td>0</td><br>      <td>13</td><br>      <td>United-States</td><br>      <td>&lt;=50K</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>38</td><br>      <td>Private</td><br>      <td>215646</td><br>      <td>HS-grad</td><br>      <td>9</td><br>      <td>Divorced</td><br>      <td>Handlers-cleaners</td><br>      <td>Not-in-family</td><br>      <td>White</td><br>      <td>Male</td><br>      <td>0</td><br>      <td>0</td><br>      <td>40</td><br>      <td>United-States</td><br>      <td>&lt;=50K</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>53</td><br>      <td>Private</td><br>      <td>234721</td><br>      <td>11th</td><br>      <td>7</td><br>      <td>Married-civ-spouse</td><br>      <td>Handlers-cleaners</td><br>      <td>Husband</td><br>      <td>Black</td><br>      <td>Male</td><br>      <td>0</td><br>      <td>0</td><br>      <td>40</td><br>      <td>United-States</td><br>      <td>&lt;=50K</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>28</td><br>      <td>Private</td><br>      <td>338409</td><br>      <td>Bachelors</td><br>      <td>13</td><br>      <td>Married-civ-spouse</td><br>      <td>Prof-specialty</td><br>      <td>Wife</td><br>      <td>Black</td><br>      <td>Female</td><br>      <td>0</td><br>      <td>0</td><br>      <td>40</td><br>      <td>Cuba</td><br>      <td>&lt;=50K</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 种族 ，职业， 工作时间做训练数据，薪资为目标数据</span></span><br><span class="line">samples = adults[[<span class="string">'race'</span>, <span class="string">'occupation'</span>, <span class="string">'hours_per_week'</span>]]</span><br><span class="line">target = adults[<span class="string">'salary'</span>].values</span><br></pre></td></tr></table></figure></div><p>找出需要进行数值化处理的列， 并进行数值化处理</p><p>df.columns[df.dtypes == object]</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples.dtypes == object  <span class="comment"># 查看是object类型的列，需进行数值化处理</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">race               True</span><br><span class="line">occupation         True</span><br><span class="line">hours_per_week    False</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples.columns[samples.dtypes == object]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Index([&apos;race&apos;, &apos;occupation&apos;], dtype=&apos;object&apos;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items = samples[<span class="string">'race'</span>].unique() <span class="comment"># 根据类型是object的列，查出他的分类</span></span><br><span class="line">items</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;White&apos;, &apos;Black&apos;, &apos;Asian-Pac-Islander&apos;, &apos;Amer-Indian-Eskimo&apos;,</span><br><span class="line">       &apos;Other&apos;], dtype=object)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argwhere(items==<span class="string">'White'</span>)[<span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 查看行数据中某一值在items中的位置</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于函数的封装</span></span><br><span class="line"><span class="comment"># 对数据中的所有object列的值进行数值化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_numeric</span><span class="params">(df, inplace=False)</span>:</span></span><br><span class="line">    df2 = df <span class="keyword">if</span> inplace <span class="keyword">else</span> df.copy()</span><br><span class="line">    cols = df2.columns[df2.dtypes==object]</span><br><span class="line">    <span class="keyword">for</span> col_name <span class="keyword">in</span> cols:</span><br><span class="line">        <span class="comment"># 获取col_name列所有item名称</span></span><br><span class="line">        items = df2[col_name].unique()</span><br><span class="line">        df2[col_name] = df[col_name].map(<span class="keyword">lambda</span> item: np.argwhere(items==item)[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inplace:</span><br><span class="line">        <span class="keyword">return</span> df2</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原来的数据</span></span><br><span class="line">samples.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>race</th><br>      <th>occupation</th><br>      <th>hours_per_week</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>White</td><br>      <td>Adm-clerical</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>White</td><br>      <td>Exec-managerial</td><br>      <td>13</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>White</td><br>      <td>Handlers-cleaners</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>Black</td><br>      <td>Handlers-cleaners</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>Black</td><br>      <td>Prof-specialty</td><br>      <td>40</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自定义函数数值化之后的数据</span></span><br><span class="line">df2 = to_numeric(samples)</span><br><span class="line">df2.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>race</th><br>      <th>occupation</th><br>      <th>hours_per_week</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>0</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>0</td><br>      <td>1</td><br>      <td>13</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>0</td><br>      <td>2</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>1</td><br>      <td>2</td><br>      <td>40</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>1</td><br>      <td>3</td><br>      <td>40</td><br>    </tr><br>  </tbody><br></table><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逻辑斯蒂回归&quot;&gt;&lt;a href=&quot;#逻辑斯蒂回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑斯蒂回归&quot;&gt;&lt;/a&gt;逻辑斯蒂回归&lt;/h1&gt;&lt;h2 id=&quot;【关键词】Logistics函数，最大似然估计，梯度下降法&quot;&gt;&lt;a href=&quot;#【关键词】Logistics函数，最大似然估计，梯度下降法&quot; class=&quot;headerlink&quot; title=&quot;【关键词】Logistics函数，最大似然估计，梯度下降法&quot;&gt;&lt;/a&gt;【关键词】Logistics函数，最大似然估计，梯度下降法&lt;/h2&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>LinearRegression线性回归</title>
    <link href="https://www.xuhuiblog.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/LinearRegression%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://www.xuhuiblog.cn/机器学习/LinearRegression线性回归/</id>
    <published>2019-05-09T13:25:21.000Z</published>
    <updated>2019-05-17T13:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="【关键词】最小二乘法，线性"><a href="#【关键词】最小二乘法，线性" class="headerlink" title="【关键词】最小二乘法，线性"></a>【关键词】最小二乘法，线性</h2><a id="more"></a><h2 id="一、普通线性回归"><a href="#一、普通线性回归" class="headerlink" title="一、普通线性回归"></a>一、普通线性回归</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>分类的目标变量是标称型数据，而回归将会对连续型的数据做出预测。</p><p>应当怎样从一大堆数据里求出回归方程呢？</p><p>假定输人数据存放在矩阵X中，而回归系数存放在向量W中。那么对于给定的数据X1, 预测结果将会通过</p><p>Y=X*W</p><p>给出。现在的问题是，手里有一些X和对应的Y,怎样才能找到W呢？</p><p>一个常用的方法就是找出使误差最小的W。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，所以我<br>们采用平方误差。</p><p>最小二乘法<br><img src="/机器学习/LinearRegression线性回归/home/pighui/datas/day08/LinearRegression%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/images/1.PNG" alt="1.PNG"></p><p>平方误差可以写做<br>对W求导，当导数为零时，平方误差最小，此时W等于：<br><img src="/机器学习/LinearRegression线性回归/images/2.PNG" alt="2.PNG"></p><p>例如有下面一张图片：</p><p><img src="/机器学习/LinearRegression线性回归/images/3.PNG" alt="3.PNG"></p><p>求回归曲线，得到：</p><p><img src="/机器学习/LinearRegression线性回归/images/4.PNG" alt="4.PNG"></p><h3 id="2、实例-糖尿病数据分析"><a href="#2、实例-糖尿病数据分析" class="headerlink" title="2、实例 - 糖尿病数据分析"></a>2、实例 - 糖尿病数据分析</h3><p>导包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><p>获取糖尿病数据</p><ul><li>sklearn.datasets中load_diabetes()函数<ul><li>data 是特征数据</li><li>feature_names 特征名称</li><li>target 是目标</li></ul></li><li>生成DataFrame查看数据</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_diabetes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diabetes = load_diabetes()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diabetes_df = DataFrame(diabetes.data, columns=diabetes.feature_names)</span><br><span class="line">diabetes_df[<span class="string">'target'</span>] = Series(diabetes.target)</span><br><span class="line">diabetes_df.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>age</th><br>      <th>sex</th><br>      <th>bmi</th><br>      <th>bp</th><br>      <th>s1</th><br>      <th>s2</th><br>      <th>s3</th><br>      <th>s4</th><br>      <th>s5</th><br>      <th>s6</th><br>      <th>target</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0.038076</td><br>      <td>0.050680</td><br>      <td>0.061696</td><br>      <td>0.021872</td><br>      <td>-0.044223</td><br>      <td>-0.034821</td><br>      <td>-0.043401</td><br>      <td>-0.002592</td><br>      <td>0.019908</td><br>      <td>-0.017646</td><br>      <td>151.0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>-0.001882</td><br>      <td>-0.044642</td><br>      <td>-0.051474</td><br>      <td>-0.026328</td><br>      <td>-0.008449</td><br>      <td>-0.019163</td><br>      <td>0.074412</td><br>      <td>-0.039493</td><br>      <td>-0.068330</td><br>      <td>-0.092204</td><br>      <td>75.0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>0.085299</td><br>      <td>0.050680</td><br>      <td>0.044451</td><br>      <td>-0.005671</td><br>      <td>-0.045599</td><br>      <td>-0.034194</td><br>      <td>-0.032356</td><br>      <td>-0.002592</td><br>      <td>0.002864</td><br>      <td>-0.025930</td><br>      <td>141.0</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.089063</td><br>      <td>-0.044642</td><br>      <td>-0.011595</td><br>      <td>-0.036656</td><br>      <td>0.012191</td><br>      <td>0.024991</td><br>      <td>-0.036038</td><br>      <td>0.034309</td><br>      <td>0.022692</td><br>      <td>-0.009362</td><br>      <td>206.0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.005383</td><br>      <td>-0.044642</td><br>      <td>-0.036385</td><br>      <td>0.021872</td><br>      <td>0.003935</td><br>      <td>0.015596</td><br>      <td>0.008142</td><br>      <td>-0.002592</td><br>      <td>-0.031991</td><br>      <td>-0.046641</td><br>      <td>135.0</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diabetes.DESCR</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;.. _diabetes_dataset:\n\nDiabetes dataset\n----------------\n\nTen baseline variables, age, sex, body mass index, average blood\npressure, and six blood serum measurements were obtained for each of n =\n442 diabetes patients, as well as the response of interest, a\nquantitative measure of disease progression one year after baseline.\n\n**Data Set Characteristics:**\n\n  :Number of Instances: 442\n\n  :Number of Attributes: First 10 columns are numeric predictive values\n\n  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n\n  :Attribute Information:\n      - Age\n      - Sex\n      - Body mass index\n      - Average blood pressure\n      - S1\n      - S2\n      - S3\n      - S4\n      - S5\n      - S6\n\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n\nSource URL:\nhttp://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n\nFor more information see:\nBradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) &quot;Least Angle Regression,&quot; Annals of Statistics (with discussion), 407-499.\n(http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)&apos;</span><br></pre></td></tr></table></figure></div><p>抽取训练数据和预测数据</p><ul><li>研究bmi指标对血糖的影响趋势, bp字段</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bmi = diabetes_df[<span class="string">'bmi'</span>].values</span><br><span class="line">bp = diabetes_df[<span class="string">'bp'</span>].values</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(bmi, bp)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/LinearRegression线性回归/output_19_0.png" alt="png"></p><p>创建数学模型-普通线性回归</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear = LinearRegression()</span><br></pre></td></tr></table></figure></div><p>第一步：训练和预测的得分</p><ul><li>sklearn.metrics.r2_score(y_true, y_pred)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="keyword">as</span> split</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_X, test_X, train_y, test_y = split(bmi.reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">                                         diabetes.target)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear.fit(train_X, train_y).score(test_X, test_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.36813167310279926</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linear.fit(train_X, train_y)</span><br><span class="line">y_ = linear.predict(test_X)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r2_score(test_y, y_)  <span class="comment"># 回归性数据，计算真实的数据和预测的数据的比较得分</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.36813167310279926</span><br></pre></td></tr></table></figure></div><h3 id="使用全部的样本数据进行模型训练"><a href="#使用全部的样本数据进行模型训练" class="headerlink" title="使用全部的样本数据进行模型训练"></a>使用全部的样本数据进行模型训练</h3><p>生成新的预测数据</p><ul><li>获取bmi的最小和最大值，生成这个区间的100个等差数例<ul><li>linspace()</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bmi.min()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-0.0902752958985185</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bmi.max()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.17055522598066</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_X = np.linspace(bmi.min(), bmi.max(), num=<span class="number">100</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear.fit(bmi.reshape(<span class="number">-1</span>, <span class="number">1</span>), diabetes.target)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,</span><br><span class="line">         normalize=False)</span><br></pre></td></tr></table></figure></div><p>预测</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_ = linear.predict(test_X.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div><p>绘制图形</p><ul><li>将 测试数据和结果，画出线型图</li><li>将 训练数据和目标， 画出散点图</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(test_X, y_, color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(bmi, diabetes.target)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/LinearRegression线性回归/output_39_0.png" alt="png"></p><p>扩展</p><ul><li>获取训练模型后的系数<ul><li>linear.coef_</li></ul></li><li>计算得分： r2_score(test_true, test_predict)<ul><li>是sklearn.metrics 模块的函数</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear.coef_  <span class="comment"># 线性函数的 w 系数</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([949.43526038])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear.intercept_  <span class="comment"># 线性函数的截距 b</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">152.1334841628967</span><br></pre></td></tr></table></figure></div><p>练习： age和bmi对bp的影响</p><ul><li>获取age，bmi的实际数据进行模型的训练</li><li>生成age,bmi的测试数据， 每个特征的(min, max)生成等差数列</li><li>使用测试数据，进行测试</li><li>画出实现数据的散点图和线型图（两个）</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">samples = diabetes_df[[<span class="string">'age'</span>, <span class="string">'bmi'</span>]].values</span><br><span class="line">target = diabetes_df[<span class="string">'bp'</span>].values</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples[:, <span class="number">0</span>].min()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-0.107225631607358</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f1 = np.linspace(samples[:, <span class="number">0</span>].min(),</span><br><span class="line">                 samples[:, <span class="number">0</span>].max(), num=<span class="number">100</span>)</span><br><span class="line">f2 = np.linspace(samples[:, <span class="number">1</span>].min(),</span><br><span class="line">                 samples[:, <span class="number">1</span>].max(), num=<span class="number">100</span>)</span><br><span class="line">test_X = np.c_[f1, f2]  <span class="comment"># 将两个一维数组合成一个两列多行的二维数组</span></span><br><span class="line">test_X.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 2)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linear.fit(samples, target)</span><br><span class="line">y_ = linear.predict(test_X)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(<span class="number">121</span>)</span><br><span class="line">ax1.set_title(<span class="string">'Age vs DP'</span>)</span><br><span class="line">plt.scatter(samples[:, <span class="number">0</span>], target)</span><br><span class="line">plt.plot(test_X[:, <span class="number">0</span>], y_, color=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(<span class="number">122</span>)</span><br><span class="line">ax2.set_title(<span class="string">'BMI vs DP'</span>)</span><br><span class="line">plt.scatter(samples[:, <span class="number">1</span>], target)</span><br><span class="line">plt.plot(test_X[:, <span class="number">1</span>], y_, color=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/LinearRegression线性回归/output_48_0.png" alt="png"></p><h2 id="二、岭回归"><a href="#二、岭回归" class="headerlink" title="二、岭回归"></a>二、岭回归</h2><p>f(x) = w1<em>x1 + w2</em>x2 + w3<em>x3<br>f(x) = a</em>x1 + b<em>x2 + c</em>x3</p><p>1   2  4  7<br>2   5  3  2<br>3   6  1  9</p><h1 id="有解方程"><a href="#有解方程" class="headerlink" title="有解方程"></a>有解方程</h1><p>1 = a<em>2 + b</em>4 + c<em>7<br>2 = a</em>5 + b<em>3 + c</em>2<br>3 = a<em>6 + b</em>1 + c*9</p><p>1   2  4  7<br>2   5  3  2</p><h1 id="无解方程"><a href="#无解方程" class="headerlink" title="无解方程"></a>无解方程</h1><p>1 = a<em>2 + b</em>4 + c<em>7<br>2 = a</em>5 + b<em>3 + c</em>2</p><h1 id="不满秩矩阵-不能求逆"><a href="#不满秩矩阵-不能求逆" class="headerlink" title="不满秩矩阵 不能求逆"></a>不满秩矩阵 不能求逆</h1><h1 id="数据样本的个数-lt-数据特征的个数-需要使用岭回归"><a href="#数据样本的个数-lt-数据特征的个数-需要使用岭回归" class="headerlink" title="数据样本的个数 &lt; 数据特征的个数 需要使用岭回归"></a>数据样本的个数 &lt; 数据特征的个数 需要使用岭回归</h1><h1 id="多重共性"><a href="#多重共性" class="headerlink" title="多重共性"></a>多重共性</h1><p>2  4  7        1 0 0      3  4  7<br>5  3  2   + λ* 0 1 0  =   5  4  2  -&gt; 可以求逆 -&gt; 线性回归模型就可用了<br>               0 0 1      0  0  1   </p><h3 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h3><p>缩减系数来“理解”数据</p><p>如果数据的特征比样本点还多应该怎么办？是否还可以使用线性回归和之前的方法来做预测？</p><p>答案是否定的，即不能再使用前面介绍的方法。这是因为输入数据的矩阵X不是满秩矩阵。非满秩矩阵在求逆时会出现问题。</p><p>为了解决这个问题，统计学家引入了岭回归（ridge regression)的概念</p><p><img src="/机器学习/LinearRegression线性回归/images/5.PNG" alt="5.PNG"></p><p>缩减方法可以去掉不重要的参数，因此能更好地理解数据。此外，与简单的线性回归相比，缩减法能取得更好的预测效果。</p><p>岭回归是加了二阶正则项的最小二乘，主要适用于过拟合严重或各变量之间存在多重共线性的时候，岭回归是有bias的，这里的bias是为了让variance更小。</p><h4 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h4><p>1.岭回归可以解决特征数量比样本量多的问题</p><p>2.岭回归作为一种缩减算法可以判断哪些特征重要或者不重要，有点类似于降维的效果</p><p>3.缩减算法可以看作是对一个模型增加偏差的同时减少方差</p><p>岭回归用于处理下面两类问题：</p><p>1.数据点少于变量个数</p><p>2.变量间存在共线性（最小二乘回归得到的系数不稳定，方差很大）</p><h3 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h3><p>岭回归一般用于样本值不足的时候</p><ul><li>sklearn.linear_model模块中 Ridge</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br></pre></td></tr></table></figure></div><p>不满轶矩阵数据样本数据</p><ul><li>X_train = [[2,1,1],[1,2,3]]</li><li>y_train = [3, 1]</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 电影分类： 动作片-1， 枪战片-3， 爱情片-2</span></span><br><span class="line"><span class="comment">#           打斗，    开枪，    接吻</span></span><br><span class="line">train_X = [[<span class="number">10</span>, <span class="number">15</span>, <span class="number">8</span>],</span><br><span class="line">           [<span class="number">11</span>, <span class="number">1</span>, <span class="number">5</span>]]</span><br><span class="line">train_y = [<span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></div><p>使用普通线性回归</p><ul><li>LinearRegression</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linear2 = LinearRegression()</span><br><span class="line">linear2.fit(train_X, train_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,</span><br><span class="line">         normalize=False)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear2.predict([[<span class="number">15</span>, <span class="number">1</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0.96116505])</span><br></pre></td></tr></table></figure></div><p>使用岭回归</p><ul><li>Ridge(alpha=1) alpha指定偏差系数λ</li><li>经实例证明， alpha=0,Ridge就是普通的线性回归</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ridge = Ridge(alpha=<span class="number">0.5</span>)</span><br><span class="line">ridge.fit(train_X, train_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ridge(alpha=0.5, copy_X=True, fit_intercept=True, max_iter=None,</span><br><span class="line">   normalize=False, random_state=None, solver=&apos;auto&apos;, tol=0.001)</span><br></pre></td></tr></table></figure></div><p>比较它们之间的系数</p><ul><li>coef_ 所有的特征系数</li><li>Ridge()的alpha 无限接近0时，同线性回归几乎相同<ul><li>其实alpha 为0就是线性回归，不过系统会提示一些警告而已</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear2.coef_</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([-0.00970874,  0.13592233,  0.02912621])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ridge = Ridge(alpha=<span class="number">0</span>)  <span class="comment"># alpha 缩减系数为0时，就是一个普通的线性回归</span></span><br><span class="line">ridge.fit(train_X, train_y)</span><br><span class="line">ridge.coef_</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/apple/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/ridge.py:165: LinAlgWarning: scipy.linalg.solve</span><br><span class="line">Ill-conditioned matrix detected. Result is not guaranteed to be accurate.</span><br><span class="line">Reciprocal condition number1.537199e-17</span><br><span class="line">  overwrite_a=False)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([-0.00970874,  0.13592233,  0.02912621])</span><br></pre></td></tr></table></figure></div><h3 id="【扩展】深入研究岭回归"><a href="#【扩展】深入研究岭回归" class="headerlink" title="【扩展】深入研究岭回归"></a>【扩展】深入研究岭回归</h3><ul><li>理解岭回归缩减系数</li></ul><p>【备注】coef_函数可以获取机器学习模型中各个特征值的系数</p><h4 id="创建一个假象数据样本集"><a href="#创建一个假象数据样本集" class="headerlink" title="创建一个假象数据样本集"></a>创建一个假象数据样本集</h4><ul><li>生成一个10×10的二维数组 和 10个目标值<ul><li>X = 1 / (np.arange(1, 11) + np.arange(0, 10).reshape(-1, 1))</li><li>y = np.linspace(0, 10, num=10)</li></ul></li><li>创建 100个 alpha系数， 范围在 [e^-10, e^-2]<ul><li>np.logspace(-10, -2, 100)  生成e指数的等差数列</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = <span class="number">1</span>/(np.arange(<span class="number">1</span>, <span class="number">11</span>) + np.arange(<span class="number">10</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">10</span>, num=<span class="number">10</span>, endpoint=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(10, 10)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(10,)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alphas = np.logspace(<span class="number">-10</span>, <span class="number">-2</span>, num=<span class="number">100</span>)</span><br></pre></td></tr></table></figure></div><h4 id="根据不同的alpha-，训练X和y-并收集coef-系统数"><a href="#根据不同的alpha-，训练X和y-并收集coef-系统数" class="headerlink" title="根据不同的alpha ，训练X和y, 并收集coef_系统数"></a>根据不同的alpha ，训练X和y, 并收集coef_系统数</h4><ul><li>设置 Rigde的alpha参数： ridge.set_params(alpha=alpha) </li><li>coefs.append(ridge.coef_) </li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ridge = Ridge()</span><br><span class="line">coefs = []</span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    ridge.set_params(alpha=alpha)</span><br><span class="line">    ridge.fit(X, y)</span><br><span class="line">    coefs.append(ridge.coef_) <span class="comment"># 收集每次模型训练后的 w 系数</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coefs = np.array(coefs)</span><br><span class="line">coefs.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 10)</span><br></pre></td></tr></table></figure></div><h4 id="绘制线型图，查看alpha与coefs的关系"><a href="#绘制线型图，查看alpha与coefs的关系" class="headerlink" title="绘制线型图，查看alpha与coefs的关系"></a>绘制线型图，查看alpha与coefs的关系</h4><ul><li>plt.plot(alphas, coefs)</li><li>plt.xscale(‘log’) 坐标刻度的缩放比例为 指数形式</li><li>ax.set_xlim(ax.get_xlim()[::-1]) # 将x的刻度反转过来</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(alphas, coefs)</span><br><span class="line">plt.xscale(<span class="string">'log'</span>)</span><br><span class="line">ax = plt.gca()  <span class="comment"># 获取当前的Axes画布的实例对象</span></span><br><span class="line">ax.set_xlim(ax.get_xlim()[::<span class="number">-1</span>])  <span class="comment"># 将x坐标刻度反转过来</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/LinearRegression线性回归/output_83_0.png" alt="png"></p><h2 id="三、lasso回归"><a href="#三、lasso回归" class="headerlink" title="三、lasso回归"></a>三、lasso回归</h2><h3 id="1、原理-2"><a href="#1、原理-2" class="headerlink" title="1、原理"></a>1、原理</h3><p>【拉格朗日乘数法】</p><p>对于参数w增加一个限定条件，能到达和岭回归一样的效果：</p><p><img src="/机器学习/LinearRegression线性回归/images/6.PNG" alt="6.PNG"></p><p>在 λ (lambda) 足够小的时候，一些系数会因此被迫缩减到0</p><h3 id="2、实例－波士顿房价数据分析"><a href="#2、实例－波士顿房价数据分析" class="headerlink" title="2、实例－波士顿房价数据分析"></a>2、实例－波士顿房价数据分析</h3><p>加载数据</p><ul><li>sklearn.datasets 模块的 load_boston()</li><li>sklearn.model_selection 模块的 train_test_split() 分出训练数与测试数据</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bostan = load_boston()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bostan.data.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(506, 13)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bostan.feature_names</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;CRIM&apos;, &apos;ZN&apos;, &apos;INDUS&apos;, &apos;CHAS&apos;, &apos;NOX&apos;, &apos;RM&apos;, &apos;AGE&apos;, &apos;DIS&apos;, &apos;RAD&apos;,</span><br><span class="line">       &apos;TAX&apos;, &apos;PTRATIO&apos;, &apos;B&apos;, &apos;LSTAT&apos;], dtype=&apos;&lt;U7&apos;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_X, test_X, train_y, test_y = split(bostan.data, bostan.target)</span><br></pre></td></tr></table></figure></div><p>比较得分 和 系数</p><ul><li>Ridge(alpha=0.8)</li><li>Lasso(alpha=0.0006)</li><li>sklearn.metrics.r2_score()</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lasso = Lasso(alpha=<span class="number">0.0006</span>)</span><br><span class="line">ridge = Ridge(alpha=<span class="number">0.7</span>)</span><br><span class="line">linear3 = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [lasso, ridge, linear3]:</span><br><span class="line">    name = model.__class__.__name__</span><br><span class="line">    model.fit(train_X, train_y)</span><br><span class="line">    y_ = model.predict(test_X)</span><br><span class="line">    score = r2_score(test_y, y_)</span><br><span class="line">    print(name, <span class="string">'得分'</span>, score)</span><br><span class="line">    <span class="comment"># print(name, '系数', model.coef_)</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lasso 得分 0.7165217873439823</span><br><span class="line">Ridge 得分 0.7226997084819513</span><br><span class="line">LinearRegression 得分 0.7161985279583359</span><br></pre></td></tr></table></figure></div><h2 id="四、普通线性回归、岭回归与lasso回归比较"><a href="#四、普通线性回归、岭回归与lasso回归比较" class="headerlink" title="四、普通线性回归、岭回归与lasso回归比较"></a>四、普通线性回归、岭回归与lasso回归比较</h2><p>随机生成训练数据和测试数据</p><ul><li>np.random.seed(42) 指定种子</li><li>生成 50 行、200个特征的正态分布的样本数</li><li>生成系数（与特征量相同）的正态分布数 * 3， 即为 coefs</li><li>系数归零化<ul><li>获取系数索引, inds = np.arange(n_features)</li><li>打乱顺序, np.random.shuffle(inds)</li><li>对系数进行归零化处理, coefs[inds[10:]] = 0</li></ul></li><li>生成目标值 y <ul><li>样本数据与系数进行矩阵积的结果， y = np.dot(x, coef)</li><li>对目标值加噪音， y += 0.01*np.random.normal(n_samples)</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">10</span>)</span><br><span class="line">x = np.random.randn(<span class="number">50</span>, <span class="number">200</span>)  <span class="comment"># 生成样本数据</span></span><br><span class="line">coefs = np.random.randn(<span class="number">200</span>)*<span class="number">3</span>  <span class="comment"># 生成系数</span></span><br><span class="line"></span><br><span class="line">coefs_index = np.arange(<span class="number">200</span>) <span class="comment"># 生成系数的索引位置 0~199</span></span><br><span class="line">np.random.shuffle(coefs_index)  <span class="comment"># 打乱的索引的顺序</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coefs_index[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 53, 115,  40, 108, 103,  47, 186,  10, 129, 116])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coefs[coefs_index[:<span class="number">10</span>]]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([ 1.95578865,  2.46486138, -1.41746653, -2.42466241,  2.61244235,</span><br><span class="line">       -4.0891305 , -2.81876429, -1.1879966 , -3.0227635 ,  0.3799766 ])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coefs[coefs_index[<span class="number">10</span>:]] = <span class="number">0</span> <span class="comment"># 随机保留10个有效的w系数值，即其它的都是0</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = np.dot(x, coefs)  <span class="comment"># 将x 和 w系数进行矩阵积，结果变成50个目标值</span></span><br><span class="line">y += np.random.randn(<span class="number">50</span>) * <span class="number">0.01</span></span><br></pre></td></tr></table></figure></div><p>分别使用线性回归，岭回归，Lasso回归进行数据预测</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainX, testX, trainy,testy = split(x, y, test_size=<span class="number">.2</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linear = LinearRegression()</span><br><span class="line">ridge = Ridge(alpha=<span class="number">0.8</span>)</span><br><span class="line">lasso = Lasso(alpha=<span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> [linear, ridge, lasso]:</span><br><span class="line">    score = model.fit(trainX, trainy).score(testX, testy)</span><br><span class="line">    print(model.__class__.__name__, <span class="string">'得分:'</span>, score)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression 得分: 0.09403629166096383</span><br><span class="line">Ridge 得分: 0.09405238738460531</span><br><span class="line">Lasso 得分: 0.04997143478385713</span><br></pre></td></tr></table></figure></div><p>数据视图，此处获取各个算法的训练数据的coef_:系数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear.coef_[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([-0.09223179, -0.5798521 , -1.10985274,  0.00800645, -0.19329456,</span><br><span class="line">        0.43135926, -1.39670663, -0.26308844, -0.23870551,  0.54891173])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coefs[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ridge.coef_[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([-0.06252339, -0.56804829, -1.12697814,  0.03698796, -0.23258024,</span><br><span class="line">        0.45327138, -1.40633002, -0.24052112, -0.24432255,  0.52978321])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lasso.coef_[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array([  2.59385858,  -4.61989168,  -3.51590501,   1.83343066,</span><br><span class="line">         3.94410478,   0.46006678, -10.32702338,  -6.17487522,</span><br><span class="line">        -3.61182527,   3.27608103])</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;h2 id=&quot;【关键词】最小二乘法，线性&quot;&gt;&lt;a href=&quot;#【关键词】最小二乘法，线性&quot; class=&quot;headerlink&quot; title=&quot;【关键词】最小二乘法，线性&quot;&gt;&lt;/a&gt;【关键词】最小二乘法，线性&lt;/h2&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>KNN-手写数字识别</title>
    <link href="https://www.xuhuiblog.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/KNN-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://www.xuhuiblog.cn/机器学习/KNN-手写数字识别/</id>
    <published>2019-05-09T04:21:54.000Z</published>
    <updated>2019-05-17T13:12:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h2><ul><li>加载数据文件， 分了10个目录，每个目录中有500张图片</li><li>使用KNN分类模型</li></ul><a id="more"></a><h2 id="手写数字识别-1"><a href="#手写数字识别-1" class="headerlink" title="手写数字识别"></a>手写数字识别</h2><ul><li>加载数据文件， 分了10个目录，每个目录中有500张图片</li><li>使用KNN分类模型</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载7数字的第一张图片</span></span><br><span class="line">i7_1 = plt.imread(<span class="string">'digits/7/7_1.bmp'</span>)</span><br><span class="line">plt.imshow(i7_1, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f215184b860&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/KNN-手写数字识别/output_3_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i7_1.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(28, 28)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">samples = []  <span class="comment"># 样本数据</span></span><br><span class="line">target = [] <span class="comment"># 目标</span></span><br><span class="line"><span class="keyword">for</span> digit <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment"># 0-9范围的数字</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">501</span>): <span class="comment"># 每一个数字目录下都有500张图片</span></span><br><span class="line">        img = plt.imread(<span class="string">'digits/%d/%d_%d.bmp'</span>%(digit, digit, index))</span><br><span class="line">        samples.append(img.reshape(<span class="number">-1</span>)) <span class="comment"># 将二维图片转成一维数组，再添加到samples中</span></span><br><span class="line">        target.append(digit)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">samples = np.array(samples)</span><br><span class="line">target = np.array(target)</span><br><span class="line">display(samples.shape, target.shape)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(5000, 784)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(5000,)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(samples[<span class="number">4999</span>].reshape(<span class="number">28</span>,<span class="number">28</span>),cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f2151767358&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/KNN-手写数字识别/output_7_1.png" alt="png"></p><h3 id="拆分训练数据和预测数据"><a href="#拆分训练数据和预测数据" class="headerlink" title="拆分训练数据和预测数据"></a>拆分训练数据和预测数据</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="keyword">as</span> sp</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机抽样，测试数据集占比20%</span></span><br><span class="line">train_X, test_X, train_y, test_y = sp(samples, target, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure></div><h3 id="创建模型、训练和预测和模型得分"><a href="#创建模型、训练和预测和模型得分" class="headerlink" title="创建模型、训练和预测和模型得分"></a>创建模型、训练和预测和模型得分</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> np.arange(<span class="number">3</span>,<span class="number">17</span>,step = <span class="number">2</span>):</span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">    score = knn.fit(train_X, train_y).score(test_X,test_y)</span><br><span class="line">    print(<span class="string">'k='</span>,k, <span class="string">'score='</span>, score)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">k= 3 score= 0.947</span><br><span class="line">k= 5 score= 0.944</span><br><span class="line">k= 7 score= 0.939</span><br><span class="line">k= 9 score= 0.929</span><br><span class="line">k= 11 score= 0.93</span><br><span class="line">k= 13 score= 0.925</span><br><span class="line">k= 15 score= 0.924</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">knn.fit(train_X, train_y) <span class="comment"># 最优的模型训练</span></span><br><span class="line">y_ = knn.predict(test_X) <span class="comment"># 预测</span></span><br></pre></td></tr></table></figure></div><h3 id="画出预测结果中前50个图片和数字"><a href="#画出预测结果中前50个图片和数字" class="headerlink" title="画出预测结果中前50个图片和数字"></a>画出预测结果中前50个图片和数字</h3><ul><li>5 行 10 列</li><li>显示标题: True(真实结果)和Predict(识别结果)</li><li>去除坐标轴</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">60</span>,<span class="number">35</span>))</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">50</span>):  <span class="comment"># 测试数据中的前50张图片</span></span><br><span class="line">    ax = plt.subplot(<span class="number">5</span>,<span class="number">10</span>,index+<span class="number">1</span>)</span><br><span class="line">    img = test_X[index].reshape(<span class="number">28</span>,<span class="number">28</span>)  <span class="comment"># 读取第index行的图片数据并变形</span></span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.imshow(img, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    ax.set_title(<span class="string">'True:%s\nPredict:%s'</span>%(test_y[index], y_[index]), fontsize=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/KNN-手写数字识别/output_16_0.png" alt="png"></p><h3 id="自己手写的数字，-通过模型来识别"><a href="#自己手写的数字，-通过模型来识别" class="headerlink" title="自己手写的数字， 通过模型来识别"></a>自己手写的数字， 通过模型来识别</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">test7 = plt.imread(<span class="string">'digits/test/9.bmp'</span>)</span><br><span class="line">test7.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(28, 28, 3)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 降维</span></span><br><span class="line">test = test7.max(axis=<span class="number">-1</span>)</span><br><span class="line">test.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(28, 28)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(test,cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f214c6f5b00&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/KNN-手写数字识别/output_20_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn.predict(test.reshape(<span class="number">1</span>,<span class="number">-1</span>))</span><br></pre></td></tr></table></figure></div><p>预测正确</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([9])</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;手写数字识别&quot;&gt;&lt;a href=&quot;#手写数字识别&quot; class=&quot;headerlink&quot; title=&quot;手写数字识别&quot;&gt;&lt;/a&gt;手写数字识别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加载数据文件， 分了10个目录，每个目录中有500张图片&lt;/li&gt;
&lt;li&gt;使用KNN分类模型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>K-近邻算法（KNN）</title>
    <link href="https://www.xuhuiblog.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95-KNN/"/>
    <id>https://www.xuhuiblog.cn/机器学习/K-近邻算法-KNN/</id>
    <published>2019-05-08T12:10:04.000Z</published>
    <updated>2019-05-17T13:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K-近邻算法（KNN）"><a href="#K-近邻算法（KNN）" class="headerlink" title="K-近邻算法（KNN）"></a>K-近邻算法（KNN）</h1><p>K nearest neighbour</p><h2 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h2><a id="more"></a><h3 id="如何进行电影分类"><a href="#如何进行电影分类" class="headerlink" title="如何进行电影分类"></a>如何进行电影分类</h3><p>众所周知，电影可以按照题材分类，然而题材本身是如何定义的?由谁来判定某部电影属于哪<br>个题材?也就是说同一题材的电影具有哪些公共特征?这些都是在进行电影分类时必须要考虑的问<br>题。没有哪个电影人会说自己制作的电影和以前的某部电影类似，但我们确实知道每部电影在风格<br>上的确有可能会和同题材的电影相近。那么动作片具有哪些共有特征，使得动作片之间非常类似，<br>而与爱情片存在着明显的差别呢？动作片中也会存在接吻镜头，爱情片中也会存在打斗场景，我们<br>不能单纯依靠是否存在打斗或者亲吻来判断影片的类型。但是爱情片中的亲吻镜头更多，动作片中<br>的打斗场景也更频繁，基于此类场景在某部电影中出现的次数可以用来进行电影分类。</p><p>本章介绍第一个机器学习算法：K-近邻算法，它非常有效而且易于掌握。</p><h2 id="1、k-近邻算法原理"><a href="#1、k-近邻算法原理" class="headerlink" title="1、k-近邻算法原理"></a>1、k-近邻算法原理</h2><p>简单地说，K-近邻算法采用测量不同特征值之间的距离方法进行分类。</p><ul><li>优点：精度高、对异常值不敏感、无数据输入假定。</li><li>缺点：时间复杂度高、空间复杂度高。</li><li>适用数据范围：数值型和标称型。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据<br>与所属分类的对应关系。输人没有标签的新数据后，将新数据的每个特征与样本集中数据对应的<br>特征进行比较，然后算法提取样本集中特征最相似数据（最近邻）的分类标签。一般来说，我们<br>只选择样本数据集中前K个最相似的数据，这就是K-近邻算法中K的出处,通常<em>K是不大于20的整数。<br>最后 ，选择K个最相似数据中出现次数最多的分类，作为新数据的分类</em>。</p><p>回到前面电影分类的例子，使用K-近邻算法分类爱情片和动作片。有人曾经统计过很多电影的打斗镜头和接吻镜头，下图显示了6部电影的打斗和接吻次数。假如有一部未看过的电影，如何确定它是爱情片还是动作片呢？我们可以使用K-近邻算法来解决这个问题。</p><p><img src="/机器学习/K-近邻算法-KNN/1.PNG" alt="1.PNG"></p><p>首先我们需要知道这个未知电影存在多少个打斗镜头和接吻镜头，上图中问号位置是该未知电影出现的镜头数图形化展示，具体数字参见下表。</p><p><img src="/机器学习/K-近邻算法-KNN/2.PNG" alt="2.PNG"></p><p>即使不知道未知电影属于哪种类型，我们也可以通过某种方法计算出来。首先计算未知电影与样本集中其他电影的距离，如图所示。</p><p><img src="/机器学习/K-近邻算法-KNN/3.PNG" alt="3.PNG"></p><p>现在我们得到了样本集中所有电影与未知电影的距离，按照距离递增排序，可以找到K个距<br>离最近的电影。假定k=3，则三个最靠近的电影依次是California Man、He’s Not Really into Dudes、Beautiful Woman。K-近邻算法按照距离最近的三部电影的类型，决定未知电影的类型，而这三部电影全是爱情片，因此我们判定未知电影是爱情片。</p><h3 id="欧几里得距离-Euclidean-Distance"><a href="#欧几里得距离-Euclidean-Distance" class="headerlink" title="欧几里得距离(Euclidean Distance)"></a>欧几里得距离(Euclidean Distance)</h3><p>欧氏距离是最常见的距离度量，衡量的是多维空间中各个点之间的绝对距离。公式如下：</p><p><img src="/机器学习/K-近邻算法-KNN/4.png" alt="4.png"></p><h2 id="2、在scikit-learn库中使用k-近邻算法"><a href="#2、在scikit-learn库中使用k-近邻算法" class="headerlink" title="2、在scikit-learn库中使用k-近邻算法"></a>2、在scikit-learn库中使用k-近邻算法</h2><ul><li>分类问题：from sklearn.neighbors import KNeighborsClassifier</li><li>回归问题：from sklearn.neighbors import KNeighborsRegressor</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><h3 id="0）一个最简单的例子"><a href="#0）一个最简单的例子" class="headerlink" title="0）一个最简单的例子"></a>0）一个最简单的例子</h3><p>身高、体重、鞋子尺码数据对应性别</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身高、体重、鞋的尺寸</span></span><br><span class="line">X = np.array([[<span class="number">181</span>,<span class="number">80</span>,<span class="number">44</span>],</span><br><span class="line">              [<span class="number">177</span>,<span class="number">70</span>,<span class="number">43</span>],</span><br><span class="line">              [<span class="number">160</span>,<span class="number">60</span>,<span class="number">38</span>],</span><br><span class="line">              [<span class="number">154</span>,<span class="number">54</span>,<span class="number">37</span>],</span><br><span class="line">              [<span class="number">166</span>,<span class="number">65</span>,<span class="number">40</span>],</span><br><span class="line">              [<span class="number">190</span>,<span class="number">90</span>,<span class="number">47</span>],</span><br><span class="line">              [<span class="number">175</span>,<span class="number">64</span>,<span class="number">39</span>],</span><br><span class="line">              [<span class="number">177</span>,<span class="number">70</span>,<span class="number">40</span>],</span><br><span class="line">              [<span class="number">159</span>,<span class="number">55</span>,<span class="number">37</span>],</span><br><span class="line">              [<span class="number">171</span>,<span class="number">75</span>,<span class="number">42</span>],</span><br><span class="line">              [<span class="number">181</span>,<span class="number">85</span>,<span class="number">43</span>],</span><br><span class="line">              [<span class="number">175</span>,<span class="number">64</span>,<span class="number">42</span>],</span><br><span class="line">              [<span class="number">162</span>,<span class="number">50</span>,<span class="number">37</span>],</span><br><span class="line">              [<span class="number">176</span>,<span class="number">80</span>,<span class="number">42</span>]])</span><br><span class="line"></span><br><span class="line">y = [<span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'male'</span>,</span><br><span class="line">     <span class="string">'female'</span>,</span><br><span class="line">     <span class="string">'male'</span>]</span><br></pre></td></tr></table></figure></div><p>构建KNN分类器对象</p><p>knnclf = KNeighborsClassifier(n_neighbors=3)</p><p>n_neighbors应设置为一个奇数，表示距离预测样本最近的n个样本点</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">3</span>) <span class="comment"># 指定邻居的数量, 必须是奇数</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn.fit(X, y) <span class="comment"># 训练模型</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsClassifier(algorithm=&apos;auto&apos;, leaf_size=30, metric=&apos;minkowski&apos;,</span><br><span class="line">           metric_params=None, n_jobs=1, n_neighbors=3, p=2,</span><br><span class="line">           weights=&apos;uniform&apos;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练数据集的特征数和预测数据集的特征数必须保持一致</span></span><br><span class="line">test_X = [</span><br><span class="line">    [<span class="number">186</span>, <span class="number">110</span>, <span class="number">45</span>],</span><br><span class="line">    [<span class="number">170</span>, <span class="number">75</span>,  <span class="number">42</span>],</span><br><span class="line">    [<span class="number">182</span>, <span class="number">80</span>,  <span class="number">42</span>],</span><br><span class="line">    [<span class="number">165</span>, <span class="number">50</span>,  <span class="number">37</span>],</span><br><span class="line">    [<span class="number">170</span>, <span class="number">55</span>,  <span class="number">38</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn.predict(test_X)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;male&apos;, &apos;male&apos;, &apos;male&apos;, &apos;female&apos;, &apos;female&apos;], dtype=&apos;&lt;U6&apos;)</span><br></pre></td></tr></table></figure></div><h3 id="2）电影分类：-动作片、爱情片"><a href="#2）电影分类：-动作片、爱情片" class="headerlink" title="2）电影分类： 动作片、爱情片"></a>2）电影分类： 动作片、爱情片</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'动作次数'</span>: [ <span class="number">18</span>, <span class="number">20</span>, <span class="number">3</span>,  <span class="number">5</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">    <span class="string">'接吻次数'</span>: [ <span class="number">2</span>,  <span class="number">1</span>,  <span class="number">18</span>, <span class="number">12</span>, <span class="number">2</span>,  <span class="number">1</span>],</span><br><span class="line">    <span class="string">'电影类型'</span>: [<span class="string">'动作片'</span>, <span class="string">'动作片'</span>, <span class="string">'爱情片'</span>, <span class="string">'爱情片'</span>, <span class="string">'动作片'</span>, <span class="string">'动作片'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建DataFrame</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movies = DataFrame(data)</span><br><span class="line">movies</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>动作次数</th><br>      <th>接吻次数</th><br>      <th>电影类型</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>18</td><br>      <td>2</td><br>      <td>动作片</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>20</td><br>      <td>1</td><br>      <td>动作片</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>3</td><br>      <td>18</td><br>      <td>爱情片</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>5</td><br>      <td>12</td><br>      <td>爱情片</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16</td><br>      <td>2</td><br>      <td>动作片</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>22</td><br>      <td>1</td><br>      <td>动作片</td><br>    </tr><br>  </tbody><br></table><br></div><p>提取训练数据的样式</p><p>创建和训练KNN分类模型</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">knn_movie = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">knn_movie.fit(movies.iloc[:, :<span class="number">2</span>].values,</span><br><span class="line">              movies.iloc[:, <span class="number">-1</span>])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsClassifier(algorithm=&apos;auto&apos;, leaf_size=30, metric=&apos;minkowski&apos;,</span><br><span class="line">           metric_params=None, n_jobs=1, n_neighbors=3, p=2,</span><br><span class="line">           weights=&apos;uniform&apos;)</span><br></pre></td></tr></table></figure></div><p>预测数据</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn_movie.predict([[<span class="number">20</span>,<span class="number">1</span>], [<span class="number">5</span>, <span class="number">12</span>], [<span class="number">10</span>, <span class="number">10</span>]])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;动作片&apos;, &apos;爱情片&apos;, &apos;爱情片&apos;], dtype=object)</span><br></pre></td></tr></table></figure></div><h3 id="3）-数据鸢尾花-分类"><a href="#3）-数据鸢尾花-分类" class="headerlink" title="3） 数据鸢尾花 分类"></a>3） 数据鸢尾花 分类</h3><p>导包，机器学习的算法KNN、数据鸢尾花</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris = load_iris()  <span class="comment"># 返回一个字典对象</span></span><br><span class="line">iris.keys()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([&apos;data&apos;, &apos;target&apos;, &apos;target_names&apos;, &apos;DESCR&apos;, &apos;feature_names&apos;])</span><br></pre></td></tr></table></figure></div><p>获取训练样本</p><p>sklearn.datasets.load_iris是机器学习库提供给我们研究算法的数据方法， 返回的对象的属性有：</p><ul><li>data 数据</li><li>target 目标</li><li>target_names 目标名</li><li>feature_names 特征名</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.target_names</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;setosa&apos;, &apos;versicolor&apos;, &apos;virginica&apos;], dtype=&apos;&lt;U10&apos;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iris_df = DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">iris_df[<span class="string">'target'</span>] = Series(iris.target)</span><br><span class="line">iris_df.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>sepal length (cm)</th><br>      <th>sepal width (cm)</th><br>      <th>petal length (cm)</th><br>      <th>petal width (cm)</th><br>      <th>target</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>5.1</td><br>      <td>3.5</td><br>      <td>1.4</td><br>      <td>0.2</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4.9</td><br>      <td>3.0</td><br>      <td>1.4</td><br>      <td>0.2</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>4.7</td><br>      <td>3.2</td><br>      <td>1.3</td><br>      <td>0.2</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>4.6</td><br>      <td>3.1</td><br>      <td>1.5</td><br>      <td>0.2</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>5.0</td><br>      <td>3.6</td><br>      <td>1.4</td><br>      <td>0.2</td><br>      <td>0</td><br>    </tr><br>  </tbody><br></table><br></div><p>通过标准差，选择合适的特征数据集</p><p>df.std(axis=0)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris_df.std(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sepal length (cm)    0.828066</span><br><span class="line">sepal width (cm)     0.433594</span><br><span class="line">petal length (cm)    1.764420</span><br><span class="line">petal width (cm)     0.763161</span><br><span class="line">target               0.819232</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div><p>查看分类的数量 （种类）</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris_df[<span class="string">'target'</span>].unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0, 1, 2])</span><br></pre></td></tr></table></figure></div><p>查看特征名 feature_names</p><p>选择前80%的行数据作为训练集, 后20%的数据作为测试集 </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">samples = iris.data[:, :<span class="number">2</span>] <span class="comment"># 前两列数据</span></span><br><span class="line">samples.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(150, 2)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机拆分的样本数据和目标数据， 默认测试数据集的大小是25%，test_size=0.25</span></span><br><span class="line">train_x, test_x, train_y, test_y = train_test_split(samples, iris.target,test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure></div><p>注意：（离散性的、标称型的）目标值是不参与运算的，所以不是必须要转换成数字的格式</p><p>绘制图形</p><ul><li>plt.scatter()</li><li>matplotlib.colors.ListedColormap([]) 颜色映射列表</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cm = ListedColormap([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(samples[:, <span class="number">0</span>], samples[:, <span class="number">1</span>], c=iris.target, cmap=cm)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_56_0.png" alt="png"></p><p>对样本数据进行训练</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">knn_iris = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">knn_iris.fit(train_x, train_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsClassifier(algorithm=&apos;auto&apos;, leaf_size=30, metric=&apos;minkowski&apos;,</span><br><span class="line">           metric_params=None, n_jobs=1, n_neighbors=3, p=2,</span><br><span class="line">           weights=&apos;uniform&apos;)</span><br></pre></td></tr></table></figure></div><p>对数据进行预测</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_ = knn_iris.predict(test_x)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>], c=test_y)</span><br><span class="line">plt.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>], c=y_, cmap=cm)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_61_0.png" alt="png"></p><p>生成满屏预测数据</p><ul><li>min, max</li><li>np.linspace(min, max, size=1000)</li><li>np.meshgrid(x, y) 表格的格点处理<ul><li>x确定列数</li><li>y确定行数</li></ul></li><li>xx.ravel() 扁平化</li><li>np.c_[xx, yy]  组合两个数组</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f1 = np.linspace(samples[:, <span class="number">0</span>].min(), samples[:, <span class="number">0</span>].max(), num=<span class="number">200</span>)</span><br><span class="line">f2 = np.linspace(samples[:, <span class="number">1</span>].min(), samples[:, <span class="number">1</span>].max(), num=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">f1, f2 = np.meshgrid(f1, f2)</span><br><span class="line">test_x = np.c_[f1.ravel(), f2.ravel()]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">knn_iris.fit(samples, iris.target)</span><br><span class="line">y_=knn_iris.predict(test_x)</span><br></pre></td></tr></table></figure></div><p>绘制满屏的scatter图</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(test_x[:, <span class="number">0</span>], test_x[:, <span class="number">1</span>], c=y_, cmap=cm)</span><br><span class="line">plt.scatter(samples[:, <span class="number">0</span>], samples[:, <span class="number">1</span>], c=iris.target)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_66_0.png" alt="png"></p><p>matplotlib.colors.ListedColormap 多颜色映射列表</p><p>cmap = ListedColormap([‘#aa00ff’,’#00aaff’,’#ffaa00’])</p><ul><li>展示预测数据的分类情况</li></ul><p>plt.scatter(X_test[:,0],X_test[:,1],c=y_,cmap=cmap)</p><ul><li>展示真实数据的分类情况</li></ul><p>plt.scatter(samples.iloc[:,0],samples.iloc[:,1],c=target)</p><h4 id="4）用于回归"><a href="#4）用于回归" class="headerlink" title="4）用于回归"></a>4）用于回归</h4><p>回归用于对趋势的预测</p><p>导包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br></pre></td></tr></table></figure></div><p>生成样本数据</p><ul><li>符合正弦分布的数据 </li><li>生成噪音数据 <ul><li>noise = np.random.random(size=20) - 0.5</li><li>y[::2] += noise</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, num=<span class="number">50</span>)</span><br><span class="line">y = np.sin(x)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_74_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">noise = np.random.random(size=<span class="number">25</span>) - <span class="number">0.5</span></span><br><span class="line">y[::<span class="number">2</span>] += noise</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_76_0.png" alt="png"></p><p>第一步：生成模型，并训练数据</p><ul><li>可能会出现过拟合和欠拟合情况</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn_regressor = KNeighborsRegressor(n_neighbors=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn_regressor.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsRegressor(algorithm=&apos;auto&apos;, leaf_size=30, metric=&apos;minkowski&apos;,</span><br><span class="line">          metric_params=None, n_jobs=1, n_neighbors=5, p=2,</span><br><span class="line">          weights=&apos;uniform&apos;)</span><br></pre></td></tr></table></figure></div><p>第二步：使用模型，预测数据</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, num=<span class="number">200</span>)</span><br><span class="line">y_ = knn_regressor.predict(test_x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div><p>绘图显示数据</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y, c=<span class="string">'r'</span>)</span><br><span class="line">plt.plot(test_x, y_, c=<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_83_0.png" alt="png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>人类动作识别<br>步行，上楼，下楼，坐着，站立和躺着<br><img src="/机器学习/K-近邻算法-KNN/stand-sit-run.jpg" alt><br>数据采集每个人在腰部穿着智能手机，进行了六个活动（步行，上楼，下楼，坐着，站立和躺着）。采用嵌入式加速度计和陀螺仪，以50Hz的恒定速度捕获3轴线性加速度和3轴角速度，来获取数据</p><p>导入数据</p><ul><li>np.load(‘xx.npy’)</li><li>x_train.npy 训练数据 X</li><li>y_train.npy 训练数据目标</li><li>x_test.npy  预测数据 </li><li>y_test.npy</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_X = np.load(<span class="string">'npy/x_train.npy'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_X.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(7352, 561)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_y = np.load(<span class="string">'npy/y_train.npy'</span>)  <span class="comment"># np.save(filepath, arr)</span></span><br><span class="line">test_X = np.load(<span class="string">'npy/x_test.npy'</span>)</span><br><span class="line">test_y = np.load(<span class="string">'npy/y_test.npy'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同动作</span></span><br><span class="line">label = &#123;<span class="number">1</span>:<span class="string">'WALKING'</span>, </span><br><span class="line">         <span class="number">2</span>:<span class="string">'WALKING UPSTAIRS'</span>, </span><br><span class="line">         <span class="number">3</span>:<span class="string">'WALKING DOWNSTAIRS'</span>,</span><br><span class="line">         <span class="number">4</span>:<span class="string">'SITTING'</span>, </span><br><span class="line">         <span class="number">5</span>:<span class="string">'STANDING'</span>, </span><br><span class="line">         <span class="number">6</span>:<span class="string">'LAYING'</span>&#125;</span><br></pre></td></tr></table></figure></div><p>训练、预测</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    walk_knn = KNeighborsClassifier(n_neighbors=n)</span><br><span class="line">    walk_knn.fit(train_X, train_y)  <span class="comment"># 训练</span></span><br><span class="line">    y_ = walk_knn.predict(test_X)   <span class="comment"># 预测</span></span><br><span class="line">    score = test_y[test_y==y_].size/test_y.size</span><br><span class="line">    <span class="keyword">if</span> score &gt;=<span class="number">0.95</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">2</span></span><br><span class="line">print(<span class="string">'本次得分:'</span>, score, <span class="string">'n='</span>, n)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">walk_knn = KNeighborsClassifier(n_neighbors=n)</span><br><span class="line">walk_knn.fit(train_X, train_y)  <span class="comment"># 训练</span></span><br><span class="line">y_ = walk_knn.predict(test_X)   <span class="comment"># 预测</span></span><br><span class="line">score = test_y[test_y==y_].size/test_y.size</span><br><span class="line">print(<span class="string">'本次得分:'</span>, score, <span class="string">'n='</span>, n)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本次得分: 0.9053274516457415 n= 9</span><br></pre></td></tr></table></figure></div><p>查看得分</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">walk_knn.score(test_X, test_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.9046487953851374</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_y[test_y==y_].size/test_y.size</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.9046487953851374</span><br></pre></td></tr></table></figure></div><p>画出不同动作的线性图</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series(train_y).unique()  <span class="comment"># 目标， 六个动作</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([5, 4, 6, 1, 3, 2])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查出走的动作的数据</span></span><br><span class="line">x = train_X[train_y==<span class="number">1</span>][:<span class="number">500</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, color=<span class="string">'#c40488'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_99_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画六个子画布</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">12</span>))</span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">colors = (<span class="string">'#c40488'</span>, <span class="string">'#cd2408'</span>, <span class="string">'#f404d8'</span>, <span class="string">'#34d488'</span>, <span class="string">'#84f4c8'</span>, <span class="string">'#04d500'</span>)</span><br><span class="line"><span class="keyword">for</span> k, name <span class="keyword">in</span> label.items():</span><br><span class="line">    x = train_X[train_y==k][:<span class="number">500</span>, <span class="number">0</span>]</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>,<span class="number">2</span>, index)</span><br><span class="line">    ax.set_title(name)</span><br><span class="line">    ax.plot(x, c=colors[index<span class="number">-1</span>])</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/机器学习/K-近邻算法-KNN/output_100_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;K-近邻算法（KNN）&quot;&gt;&lt;a href=&quot;#K-近邻算法（KNN）&quot; class=&quot;headerlink&quot; title=&quot;K-近邻算法（KNN）&quot;&gt;&lt;/a&gt;K-近邻算法（KNN）&lt;/h1&gt;&lt;p&gt;K nearest neighbour&lt;/p&gt;
&lt;h2 id=&quot;导引&quot;&gt;&lt;a href=&quot;#导引&quot; class=&quot;headerlink&quot; title=&quot;导引&quot;&gt;&lt;/a&gt;导引&lt;/h2&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="机器学习" scheme="https://www.xuhuiblog.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>海洋数据分析</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%B5%B7%E6%B4%8B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://www.xuhuiblog.cn/数据分析/海洋数据分析/</id>
    <published>2019-05-08T11:44:10.000Z</published>
    <updated>2019-05-17T13:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="城市气候与海洋的关系研究"><a href="#城市气候与海洋的关系研究" class="headerlink" title="城市气候与海洋的关系研究"></a>城市气候与海洋的关系研究</h1><p>导入包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure></div><a id="more"></a><p>导入数据各个海滨城市数据</p><ul><li>os.listdir(‘data’)</li><li>filter() 过滤出所有.csv文件, 返回一个可迭代的Filter对象</li><li>df.append() 以行的方式追加, <font color="red">返回一个新的DataFrame</font></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">files = os.listdir(<span class="string">'data'</span>)</span><br><span class="line">all_ = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filter(<span class="keyword">lambda</span> item: item.endswith(<span class="string">'.csv'</span>), files):</span><br><span class="line">    df = pd.read_csv(<span class="string">'data/%s'</span> % filename)</span><br><span class="line">    <span class="keyword">if</span> all_ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        all_ = df</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_ = all_.append(df)</span><br><span class="line">all_.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(675, 11)</span><br></pre></td></tr></table></figure></div><p>查看列数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Unnamed: 0</th><br>      <th>temp</th><br>      <th>humidity</th><br>      <th>pressure</th><br>      <th>description</th><br>      <th>dt</th><br>      <th>wind_speed</th><br>      <th>wind_deg</th><br>      <th>city</th><br>      <th>day</th><br>      <th>dist</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>28.34</td><br>      <td>65</td><br>      <td>1017.0</td><br>      <td>Sky is Clear</td><br>      <td>1436863109</td><br>      <td>3.1</td><br>      <td>20.0</td><br>      <td>Torino</td><br>      <td>2015-07-14 10:38:29</td><br>      <td>357</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1</td><br>      <td>29.25</td><br>      <td>65</td><br>      <td>1017.0</td><br>      <td>Sky is Clear</td><br>      <td>1436866696</td><br>      <td>3.1</td><br>      <td>80.0</td><br>      <td>Torino</td><br>      <td>2015-07-14 11:38:16</td><br>      <td>357</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2</td><br>      <td>30.40</td><br>      <td>58</td><br>      <td>1017.0</td><br>      <td>Sky is Clear</td><br>      <td>1436870399</td><br>      <td>2.6</td><br>      <td>100.0</td><br>      <td>Torino</td><br>      <td>2015-07-14 12:39:59</td><br>      <td>357</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>3</td><br>      <td>31.37</td><br>      <td>54</td><br>      <td>1017.0</td><br>      <td>Sky is Clear</td><br>      <td>1436874005</td><br>      <td>2.1</td><br>      <td>90.0</td><br>      <td>Torino</td><br>      <td>2015-07-14 13:40:05</td><br>      <td>357</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>4</td><br>      <td>32.59</td><br>      <td>45</td><br>      <td>1016.0</td><br>      <td>few clouds</td><br>      <td>1436877558</td><br>      <td>2.1</td><br>      <td>120.0</td><br>      <td>Torino</td><br>      <td>2015-07-14 14:39:18</td><br>      <td>357</td><br>    </tr><br>  </tbody><br></table><br></div><p>去除没用的列 Unnamed: 0</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_.drop(columns=<span class="string">'Unnamed: 0'</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_.index</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,</span><br><span class="line">            ...</span><br><span class="line">            14, 15, 16, 17, 18, 19, 20, 21, 22, 23],</span><br><span class="line">           dtype=&apos;int64&apos;, length=675)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新生成索引</span></span><br><span class="line">all_.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">all_.index</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RangeIndex(start=0, stop=675, step=1)</span><br></pre></td></tr></table></figure></div><p>显示最高温度与离海远近的关系</p><ul><li>按city分组， 计算temp和dist的最大值</li><li>按dist排序， df.sort_values()</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist_temp = all_.groupby(<span class="string">'city'</span>)[<span class="string">'temp'</span>, <span class="string">'dist'</span>].max().sort_values(<span class="string">'dist'</span>)</span><br><span class="line">dist_temp</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>temp</th><br>      <th>dist</th><br>    </tr><br>    <tr><br>      <th>city</th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>Ravenna</th><br>      <td>32.79</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>Cesena</th><br>      <td>32.81</td><br>      <td>14</td><br>    </tr><br>    <tr><br>      <th>Faenza</th><br>      <td>32.74</td><br>      <td>37</td><br>    </tr><br>    <tr><br>      <th>Ferrara</th><br>      <td>33.43</td><br>      <td>47</td><br>    </tr><br>    <tr><br>      <th>Bologna</th><br>      <td>33.85</td><br>      <td>71</td><br>    </tr><br>    <tr><br>      <th>Mantova</th><br>      <td>34.18</td><br>      <td>121</td><br>    </tr><br>    <tr><br>      <th>Piacenza</th><br>      <td>33.92</td><br>      <td>200</td><br>    </tr><br>    <tr><br>      <th>Milano</th><br>      <td>34.81</td><br>      <td>250</td><br>    </tr><br>    <tr><br>      <th>Asti</th><br>      <td>34.31</td><br>      <td>315</td><br>    </tr><br>    <tr><br>      <th>Torino</th><br>      <td>34.69</td><br>      <td>357</td><br>    </tr><br>  </tbody><br></table><br></div><p>画图显示关系 </p><ul><li>scatter() 显示距离与温度的散布图</li><li>plot() 显示距离与温度的线形图</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(dist_temp[<span class="string">'dist'</span>], dist_temp[<span class="string">'temp'</span>])</span><br><span class="line">plt.plot(dist_temp[<span class="string">'dist'</span>], dist_temp[<span class="string">'temp'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_15_0.png" alt="png"></p><p>读取Asti城市某一天的温度变化数据， 并画出线型图和散点图，如2015-7-14这一天的天气变化</p><ul><li>处理 day 时间格式<ul><li>转成年、月、日的date日期</li><li>或转成时、分、秒的字符串</li></ul></li><li>将绘制的画布保存成一张png图片</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asti = all_[all_[<span class="string">'city'</span>]==<span class="string">'Asti'</span>]</span><br><span class="line">asti_temp = asti[[<span class="string">'day'</span>, <span class="string">'temp'</span>]]</span><br><span class="line">asti_temp.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(68, 2)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_temp.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>day</th><br>      <th>temp</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>180</th><br>      <td>2015-06-27 09:42:05</td><br>      <td>22.68</td><br>    </tr><br>    <tr><br>      <th>181</th><br>      <td>2015-06-27 10:37:23</td><br>      <td>24.05</td><br>    </tr><br>    <tr><br>      <th>182</th><br>      <td>2015-06-27 11:56:57</td><br>      <td>26.56</td><br>    </tr><br>    <tr><br>      <th>183</th><br>      <td>2015-06-27 12:53:40</td><br>      <td>27.20</td><br>    </tr><br>    <tr><br>      <th>184</th><br>      <td>2015-06-27 13:54:16</td><br>      <td>28.56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_temp.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">day      object</span><br><span class="line">temp    float64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_datetime</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(item, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_time_str</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> item.strftime(<span class="string">'%H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_date_str</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> item.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asti_temp[<span class="string">'day'</span>] = asti_temp[<span class="string">'day'</span>].map(to_datetime)</span><br><span class="line">asti_temp[<span class="string">'time'</span>] = asti_temp[<span class="string">'day'</span>].map(to_time_str)</span><br><span class="line">asti_temp[<span class="string">'date'</span>] = asti_temp[<span class="string">'day'</span>].map(to_date_str)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_temp.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>day</th><br>      <th>temp</th><br>      <th>time</th><br>      <th>date</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>180</th><br>      <td>2015-06-27 09:42:05</td><br>      <td>22.68</td><br>      <td>09:42:05</td><br>      <td>2015-06-27</td><br>    </tr><br>    <tr><br>      <th>181</th><br>      <td>2015-06-27 10:37:23</td><br>      <td>24.05</td><br>      <td>10:37:23</td><br>      <td>2015-06-27</td><br>    </tr><br>    <tr><br>      <th>182</th><br>      <td>2015-06-27 11:56:57</td><br>      <td>26.56</td><br>      <td>11:56:57</td><br>      <td>2015-06-27</td><br>    </tr><br>    <tr><br>      <th>183</th><br>      <td>2015-06-27 12:53:40</td><br>      <td>27.20</td><br>      <td>12:53:40</td><br>      <td>2015-06-27</td><br>    </tr><br>    <tr><br>      <th>184</th><br>      <td>2015-06-27 13:54:16</td><br>      <td>28.56</td><br>      <td>13:54:16</td><br>      <td>2015-06-27</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_temp_14 = asti_temp[asti_temp[<span class="string">'date'</span>] == <span class="string">'2015-07-14'</span>]</span><br><span class="line">asti_temp_14.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>day</th><br>      <th>temp</th><br>      <th>time</th><br>      <th>date</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>477</th><br>      <td>2015-07-14 10:39:36</td><br>      <td>28.05</td><br>      <td>10:39:36</td><br>      <td>2015-07-14</td><br>    </tr><br>    <tr><br>      <th>478</th><br>      <td>2015-07-14 11:39:19</td><br>      <td>29.51</td><br>      <td>11:39:19</td><br>      <td>2015-07-14</td><br>    </tr><br>    <tr><br>      <th>479</th><br>      <td>2015-07-14 12:41:50</td><br>      <td>30.39</td><br>      <td>12:41:50</td><br>      <td>2015-07-14</td><br>    </tr><br>    <tr><br>      <th>480</th><br>      <td>2015-07-14 13:41:38</td><br>      <td>31.10</td><br>      <td>13:41:38</td><br>      <td>2015-07-14</td><br>    </tr><br>    <tr><br>      <th>481</th><br>      <td>2015-07-14 14:40:45</td><br>      <td>33.23</td><br>      <td>14:40:45</td><br>      <td>2015-07-14</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">'Asti 2015-07-14的温度变化'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.scatter(asti_temp_14[<span class="string">'time'</span>], asti_temp_14[<span class="string">'temp'</span>], c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(asti_temp_14[<span class="string">'time'</span>], asti_temp_14[<span class="string">'temp'</span>])</span><br><span class="line">plt.savefig(<span class="string">'2015-07-14.png'</span>, dpi=<span class="number">120</span>)</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_24_0.png" alt="png"></p><p>查看asti的一周的湿度变化的数据，并画出散点与线型图</p><ul><li>按天进行分组</li><li>将分组后的data设置为列</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_temp_week = DataFrame(asti_temp.groupby(<span class="string">'date'</span>)[<span class="string">'temp'</span>].mean()).reset_index()</span><br><span class="line">asti_temp_week</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>date</th><br>      <th>temp</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2015-06-27</td><br>      <td>27.040833</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2015-06-28</td><br>      <td>19.702500</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2015-07-14</td><br>      <td>30.550714</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2015-07-15</td><br>      <td>24.722000</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>2015-07-24</td><br>      <td>28.627692</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>2015-07-25</td><br>      <td>23.045455</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">'Asti 一周的温度变化'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.scatter(asti_temp_week[<span class="string">'date'</span>], asti_temp_week[<span class="string">'temp'</span>], c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(asti_temp_week[<span class="string">'date'</span>], asti_temp_week[<span class="string">'temp'</span>])</span><br><span class="line"><span class="comment"># 修改坐标轴的刻度标签的文本样式</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>, labelcolor=<span class="string">'black'</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_27_0.png" alt="png"></p><p>观察发现，离海近的可以形成一条直线，离海远的也能形成一条直线。</p><p>分别以100公里和50公里为分界点，划分为离海近和离海远的两组数据</p><ul><li>city_temp[‘dist’] &gt; 50  # 远距离</li><li>city_temp[‘dist’] &lt; 100 # 近距离</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist_temp_gt50 = dist_temp[dist_temp[<span class="string">'dist'</span>] &gt; <span class="number">50</span> ]</span><br><span class="line">dist_temp_lt100 = dist_temp[dist_temp[<span class="string">'dist'</span>] &lt; <span class="number">100</span>]</span><br></pre></td></tr></table></figure></div><p>画出远、近的距离与温度的散布图</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(dist_temp_gt50[<span class="string">'dist'</span>],</span><br><span class="line">            dist_temp_gt50[<span class="string">'temp'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'远距离的温度'</span>)</span><br><span class="line">plt.scatter(dist_temp_lt100[<span class="string">'dist'</span>], </span><br><span class="line">            dist_temp_lt100[<span class="string">'temp'</span>], c=<span class="string">'red'</span>, label=<span class="string">'近距离的温度'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_31_0.png" alt="png"></p><p>使用线性回归预测给定距离的温度</p><ul><li>机器学习的线性回归模型 LinearRegression</li><li>scikit-learn 模块中线性模型<ul><li>sklearn.linear_model</li></ul></li><li>创建回归模型对象<ul><li>linear = LinearRegression()</li></ul></li><li>训练模型<ul><li>fit(x, y) <ul><li>x 是实际数据的自变量, 必须是 二维数组</li><li>y 实际数据的因变量</li></ul></li></ul></li><li>预测模型<ul><li>predict(x) 根据预测函数，计算x的结果<ul><li>x 也是一个二维数组</li></ul></li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></table></figure></div><p>创建线性回归模型对象</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear = LinearRegression()</span><br></pre></td></tr></table></figure></div><p>训练模型</p><ul><li>一个被训练过的模型，就是一个预测函数表达式f(x) = wx+b</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练数据的X是二维数组， 如 [[1], [2], ...]</span></span><br><span class="line">train_X = dist_temp_lt100[<span class="string">'dist'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">train_y = dist_temp_lt100[<span class="string">'temp'</span>].values</span><br><span class="line"></span><br><span class="line">linear.fit(train_X, train_y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)</span><br></pre></td></tr></table></figure></div><p> 预测模型  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist_temp_lt100</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>temp</th><br>      <th>dist</th><br>    </tr><br>    <tr><br>      <th>city</th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>Ravenna</th><br>      <td>32.79</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>Cesena</th><br>      <td>32.81</td><br>      <td>14</td><br>    </tr><br>    <tr><br>      <th>Faenza</th><br>      <td>32.74</td><br>      <td>37</td><br>    </tr><br>    <tr><br>      <th>Ferrara</th><br>      <td>33.43</td><br>      <td>47</td><br>    </tr><br>    <tr><br>      <th>Bologna</th><br>      <td>33.85</td><br>      <td>71</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_X = [[<span class="number">23</span>], [<span class="number">35</span>], [<span class="number">50</span>], [<span class="number">55</span>], [<span class="number">70</span>]]</span><br><span class="line">linear.predict(test_X)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([32.91212001, 33.11716516, 33.37347161, 33.45890709, 33.71521353])</span><br></pre></td></tr></table></figure></div><p>预测100个近距离数据的温度</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_lt100_X = np.linspace(<span class="number">0</span>, <span class="number">100</span>, num=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测数据的维度与训练数据的维度保持一致</span></span><br><span class="line">test_lt100_y = linear.predict(test_lt100_X.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(dist_temp_gt50[<span class="string">'dist'</span>],</span><br><span class="line">            dist_temp_gt50[<span class="string">'temp'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'远距离的温度'</span>)</span><br><span class="line">plt.scatter(dist_temp_lt100[<span class="string">'dist'</span>], </span><br><span class="line">            dist_temp_lt100[<span class="string">'temp'</span>], c=<span class="string">'red'</span>, label=<span class="string">'近距离的温度'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(test_lt100_X, test_lt100_y, c=<span class="string">'red'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_43_0.png" alt="png"></p><p>训练远距离和温度的模型</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linear.fit(dist_temp_gt50[<span class="string">'dist'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">           dist_temp_gt50[<span class="string">'temp'</span>].values)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)</span><br></pre></td></tr></table></figure></div><p>预测100个远距离的温度</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_gt50_X = np.linspace(<span class="number">50</span>, <span class="number">400</span>, num=<span class="number">100</span>)</span><br><span class="line">test_gt50_y = linear.predict(test_gt50_X.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(dist_temp_gt50[<span class="string">'dist'</span>],</span><br><span class="line">            dist_temp_gt50[<span class="string">'temp'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'远距离的温度'</span>)</span><br><span class="line">plt.scatter(dist_temp_lt100[<span class="string">'dist'</span>], </span><br><span class="line">            dist_temp_lt100[<span class="string">'temp'</span>], c=<span class="string">'red'</span>, label=<span class="string">'近距离的温度'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(test_lt100_X, test_lt100_y, c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(test_gt50_X, test_gt50_y, c=<span class="string">'blue'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_48_0.png" alt="png"></p><h3 id="风向与风速的关系"><a href="#风向与风速的关系" class="headerlink" title="风向与风速的关系"></a>风向与风速的关系</h3><ul><li>查看Asti城市的风向wind_deg与风速wind_speed</li><li>按wind_deg风向排序</li><li>重新创建索引 reset_index()</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">temp           float64</span><br><span class="line">humidity         int64</span><br><span class="line">pressure       float64</span><br><span class="line">description     object</span><br><span class="line">dt               int64</span><br><span class="line">wind_speed     float64</span><br><span class="line">wind_deg       float64</span><br><span class="line">city            object</span><br><span class="line">day             object</span><br><span class="line">dist             int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_wind = asti[[<span class="string">'wind_deg'</span>, <span class="string">'wind_speed'</span>, <span class="string">'temp'</span>, <span class="string">'humidity'</span>]]</span><br><span class="line">asti_wind.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>wind_deg</th><br>      <th>wind_speed</th><br>      <th>temp</th><br>      <th>humidity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>180</th><br>      <td>80.000</td><br>      <td>2.10</td><br>      <td>22.68</td><br>      <td>60</td><br>    </tr><br>    <tr><br>      <th>181</th><br>      <td>50.000</td><br>      <td>2.60</td><br>      <td>24.05</td><br>      <td>60</td><br>    </tr><br>    <tr><br>      <th>182</th><br>      <td>100.000</td><br>      <td>2.10</td><br>      <td>26.56</td><br>      <td>57</td><br>    </tr><br>    <tr><br>      <th>183</th><br>      <td>70.000</td><br>      <td>2.10</td><br>      <td>27.20</td><br>      <td>57</td><br>    </tr><br>    <tr><br>      <th>184</th><br>      <td>154.505</td><br>      <td>2.06</td><br>      <td>28.56</td><br>      <td>29</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_wind  = asti_wind.sort_values(<span class="string">'wind_deg'</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">asti_wind.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>wind_deg</th><br>      <th>wind_speed</th><br>      <th>temp</th><br>      <th>humidity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0.0</td><br>      <td>2.10</td><br>      <td>24.77</td><br>      <td>57</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>0.0</td><br>      <td>0.50</td><br>      <td>22.74</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>0.0</td><br>      <td>0.50</td><br>      <td>27.00</td><br>      <td>65</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>0.0</td><br>      <td>1.00</td><br>      <td>24.34</td><br>      <td>64</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.0</td><br>      <td>2.06</td><br>      <td>25.58</td><br>      <td>77</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_wind.tail()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>wind_deg</th><br>      <th>wind_speed</th><br>      <th>temp</th><br>      <th>humidity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>63</th><br>      <td>350.0</td><br>      <td>3.1</td><br>      <td>23.00</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>64</th><br>      <td>350.0</td><br>      <td>2.6</td><br>      <td>24.45</td><br>      <td>73</td><br>    </tr><br>    <tr><br>      <th>65</th><br>      <td>360.0</td><br>      <td>2.1</td><br>      <td>24.24</td><br>      <td>73</td><br>    </tr><br>    <tr><br>      <th>66</th><br>      <td>360.0</td><br>      <td>1.5</td><br>      <td>19.81</td><br>      <td>73</td><br>    </tr><br>    <tr><br>      <th>67</th><br>      <td>360.0</td><br>      <td>2.1</td><br>      <td>18.01</td><br>      <td>77</td><br>    </tr><br>  </tbody><br></table><br></div><p>画出风向与风速的线性图</p><ul><li>按wind_deg分组，并计算wind_speed的平均风速，最后再plot()画出线形图</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_wind_mean = asti_wind.groupby(<span class="string">'wind_deg'</span>)[<span class="string">'wind_speed'</span>, <span class="string">'humidity'</span>].mean()</span><br><span class="line">asti_wind_mean.plot()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fe30edf7518&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_55_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asti_wind_mean.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line">asti_wind_mean</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>wind_deg</th><br>      <th>wind_speed</th><br>      <th>humidity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0.000</td><br>      <td>1.018667</td><br>      <td>68.266667</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>10.000</td><br>      <td>3.600000</td><br>      <td>62.666667</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>24.000</td><br>      <td>2.060000</td><br>      <td>49.000000</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>30.000</td><br>      <td>2.050000</td><br>      <td>73.000000</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>40.000</td><br>      <td>1.500000</td><br>      <td>62.000000</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>42.501</td><br>      <td>2.570000</td><br>      <td>66.000000</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>50.000</td><br>      <td>2.075000</td><br>      <td>54.500000</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>70.000</td><br>      <td>2.600000</td><br>      <td>56.750000</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>80.000</td><br>      <td>2.100000</td><br>      <td>60.000000</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>90.000</td><br>      <td>1.800000</td><br>      <td>61.500000</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>100.000</td><br>      <td>2.083333</td><br>      <td>51.666667</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>110.000</td><br>      <td>2.100000</td><br>      <td>46.000000</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>120.000</td><br>      <td>2.350000</td><br>      <td>48.000000</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>140.000</td><br>      <td>1.500000</td><br>      <td>45.000000</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>154.505</td><br>      <td>2.060000</td><br>      <td>29.000000</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>170.000</td><br>      <td>5.700000</td><br>      <td>58.000000</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>180.000</td><br>      <td>1.000000</td><br>      <td>61.000000</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>240.000</td><br>      <td>2.100000</td><br>      <td>46.000000</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>263.000</td><br>      <td>1.540000</td><br>      <td>64.000000</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>270.000</td><br>      <td>2.600000</td><br>      <td>61.000000</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>280.000</td><br>      <td>2.100000</td><br>      <td>64.000000</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>290.000</td><br>      <td>1.500000</td><br>      <td>64.000000</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>300.000</td><br>      <td>3.600000</td><br>      <td>57.000000</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>310.000</td><br>      <td>1.500000</td><br>      <td>73.000000</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>320.000</td><br>      <td>2.600000</td><br>      <td>73.000000</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>321.501</td><br>      <td>0.880000</td><br>      <td>84.000000</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>330.000</td><br>      <td>1.500000</td><br>      <td>73.000000</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>340.000</td><br>      <td>2.600000</td><br>      <td>74.333333</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>350.000</td><br>      <td>2.233333</td><br>      <td>78.000000</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>360.000</td><br>      <td>1.900000</td><br>      <td>74.333333</td><br>    </tr><br>  </tbody><br></table><br></div><p>在子图中，同时比较风向与湿度和风力的关系</p><ul><li>查看humidity列的数据类型</li><li>通过pd.to_numeric()将字符类型转成数值型</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_wind_mean.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wind_deg      float64</span><br><span class="line">wind_speed    float64</span><br><span class="line">humidity      float64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">121</span>)</span><br><span class="line">ax1.set_title(<span class="string">'风向与风速的关系图'</span>)</span><br><span class="line">ax1.plot(asti_wind_mean[<span class="string">'wind_deg'</span>], asti_wind_mean[<span class="string">'wind_speed'</span>])</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">122</span>)</span><br><span class="line">ax2.set_title(<span class="string">'风向与湿度的关系图'</span>)</span><br><span class="line">ax2.plot(asti_wind_mean[<span class="string">'wind_deg'</span>], asti_wind_mean[<span class="string">'humidity'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_59_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asti_wind_mean.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>wind_deg</th><br>      <th>wind_speed</th><br>      <th>humidity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0.000</td><br>      <td>1.018667</td><br>      <td>68.266667</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>10.000</td><br>      <td>3.600000</td><br>      <td>62.666667</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>24.000</td><br>      <td>2.060000</td><br>      <td>49.000000</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>30.000</td><br>      <td>2.050000</td><br>      <td>73.000000</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>40.000</td><br>      <td>1.500000</td><br>      <td>62.000000</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>42.501</td><br>      <td>2.570000</td><br>      <td>66.000000</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>50.000</td><br>      <td>2.075000</td><br>      <td>54.500000</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>70.000</td><br>      <td>2.600000</td><br>      <td>56.750000</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>80.000</td><br>      <td>2.100000</td><br>      <td>60.000000</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>90.000</td><br>      <td>1.800000</td><br>      <td>61.500000</td><br>    </tr><br>  </tbody><br></table><br></div><p>角度 转成 弧度 </p><ul><li>角度/180 = 弧度/pi， 弧度 = 角度 * pi / 180</li></ul><p>asti_wind[(asti_wind[‘wind_deg’] &gt;= deg) &amp; (asti_wind[‘wind_deg’] &lt; 45+deg)][‘wind_deg’]</p><p>由于风向是360度，我们可以考虑使用玫瑰图（极坐标条形图）</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.subplot(polar=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 随机产生颜色值(r, g, b) 取值范围是 [0,1)</span></span><br><span class="line">ax.bar(index, heights, </span><br><span class="line">       align=<span class="string">'edge'</span>,</span><br><span class="line">       color=np.random.random(size=(<span class="number">8</span>, <span class="number">3</span>)),</span><br><span class="line">       width=<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xticklabels([<span class="string">'东'</span>, <span class="string">'东北'</span>, <span class="string">'北'</span>, <span class="string">'西北'</span>, <span class="string">'西'</span>, <span class="string">'西南'</span>, <span class="string">'南'</span>, <span class="string">'东南'</span>],</span><br><span class="line">                  fontsize=<span class="number">16</span>, color=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">heights, labels = plt.yticks()</span><br><span class="line"><span class="keyword">for</span> lable <span class="keyword">in</span> labels:</span><br><span class="line">    lable.set_color(<span class="string">'blue'</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_63_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.subplot(polar=<span class="literal">True</span>)  <span class="comment"># 极坐标条形图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x 坐标方向(八个方向)</span></span><br><span class="line">degs = np.arange(<span class="number">0</span>, <span class="number">360</span>, step=<span class="number">45</span>)  <span class="comment"># ［0, 45, ....315]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y轴的数值hegiht x 坐标的个数保持一致</span></span><br><span class="line"><span class="comment"># y轴的数值 每个方向对应的风速有多个，则计算出它的平均风速</span></span><br><span class="line">heights = [asti_wind[<span class="string">'wind_speed'</span>][(asti_wind[<span class="string">'wind_deg'</span>] &gt;= deg) </span><br><span class="line">                      &amp; (asti_wind[<span class="string">'wind_deg'</span>] &lt; <span class="number">45</span>+deg)].mean() <span class="keyword">for</span> deg <span class="keyword">in</span> degs]</span><br><span class="line"></span><br><span class="line">index = degs*np.pi/<span class="number">180</span>  <span class="comment"># 将八个角度转成八弧度</span></span><br><span class="line"></span><br><span class="line">ax.bar(index, heights,</span><br><span class="line">       color=np.random.random(size=(<span class="number">8</span>, <span class="number">3</span>)), <span class="comment"># 颜色 [[0.1, 0.5, 0.3], ]</span></span><br><span class="line">       align=<span class="string">'edge'</span>, width=<span class="number">0.7</span>) <span class="comment"># 起始的对齐方式</span></span><br><span class="line"></span><br><span class="line">ax.set_xticklabels([<span class="string">'东'</span>, <span class="string">'东北'</span>, <span class="string">'北'</span>, <span class="string">'西北'</span>, <span class="string">'西'</span>, <span class="string">'西南'</span>, <span class="string">'南'</span>, <span class="string">'东南'</span>])</span><br><span class="line">ax.set_title(<span class="string">'方向与风力的关系'</span>, color=<span class="string">'r'</span>,</span><br><span class="line">            position=(<span class="number">0.5</span>, <span class="number">1.1</span>), fontsize=<span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_64_0.png" alt="png"></p><p>首先自定义一个画图函数</p><p>用numpy创建一个直方图，将360度划分为8个面元，将数据分类到这8个面元中</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_polar</span><span class="params">(city, compare_colname, title=None)</span>:</span></span><br><span class="line">    <span class="comment"># 获取指定城市的 风向与某一列比较的信息</span></span><br><span class="line">    city_wind = all_[all_[<span class="string">'city'</span>] == city][[<span class="string">'wind_deg'</span>, compare_colname]]</span><br><span class="line">    city_wind.sort_values(<span class="string">'wind_deg'</span>, inplace=<span class="literal">True</span>) <span class="comment"># 按方向排序</span></span><br><span class="line">    city_wind.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 8个方向角度</span></span><br><span class="line">    degs = np.arange(<span class="number">0</span>, <span class="number">360</span>, step=<span class="number">45</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取每个方向上的数据的平均值</span></span><br><span class="line">    heights = [city_wind[compare_colname][(city_wind[<span class="string">'wind_deg'</span>] &gt;= deg) &amp;</span><br><span class="line">                         (city_wind[<span class="string">'wind_deg'</span>] &lt; <span class="number">45</span>+deg)].mean() <span class="keyword">for</span> deg <span class="keyword">in</span> degs]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将角度转为弧度:  角度/360 = 弧度/2*pi</span></span><br><span class="line">    x = [ deg*np.pi/<span class="number">180</span>  <span class="keyword">for</span> deg <span class="keyword">in</span> degs]</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line">    plt.axes(polar = <span class="literal">True</span>, frameon=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plt.bar(x, height=heights,</span><br><span class="line">        align=<span class="string">'edge'</span>,</span><br><span class="line">        bottom=<span class="number">0.1</span>, color=np.random.random(size=(<span class="number">8</span>,<span class="number">3</span>)))</span><br><span class="line">    </span><br><span class="line">    plt.xticks(x, (<span class="string">'东'</span>, <span class="string">'东北'</span>, <span class="string">'北'</span>, <span class="string">'西北'</span>, <span class="string">'西'</span>, <span class="string">'西南'</span>, <span class="string">'南'</span>, <span class="string">'东南'</span>),</span><br><span class="line">              fontsize=<span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> title:</span><br><span class="line">        plt.title(city+<span class="string">'城市的'</span>+title,fontsize=<span class="number">20</span>, color=<span class="string">'r'</span>,</span><br><span class="line">                  loc=<span class="string">'center'</span>, position=(<span class="number">0.5</span>,<span class="number">1.1</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_polar(<span class="string">'Bologna'</span>, <span class="string">'humidity'</span>, <span class="string">'风向与湿度的关系'</span>)</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/海洋数据分析/output_68_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;城市气候与海洋的关系研究&quot;&gt;&lt;a href=&quot;#城市气候与海洋的关系研究&quot; class=&quot;headerlink&quot; title=&quot;城市气候与海洋的关系研究&quot;&gt;&lt;/a&gt;城市气候与海洋的关系研究&lt;/h1&gt;&lt;p&gt;导入包&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Series,DataFrame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.rcParams[&lt;span class=&quot;string&quot;&gt;&#39;font.sans-serif&#39;&lt;/span&gt;] = [&lt;span class=&quot;string&quot;&gt;&#39;SimHei&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.rcParams[&lt;span class=&quot;string&quot;&gt;&#39;axes.unicode_minus&#39;&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib图表用法Ⅱ</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib%E5%9B%BE%E8%A1%A8%E7%94%A8%E6%B3%95%E2%85%A1/"/>
    <id>https://www.xuhuiblog.cn/数据分析/Matplotlib图表用法Ⅱ/</id>
    <published>2019-05-08T11:41:16.000Z</published>
    <updated>2019-05-17T13:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="画文本"><a href="#画文本" class="headerlink" title="画文本"></a>画文本</h3><ul><li>plt.text(x,y,s)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi, np.pi, num=<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">'m--'</span>)</span><br><span class="line"><span class="comment"># 画文本是，可以使用Text对象的相关属性，如字体大小、颜色</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,s=<span class="string">r'$\sin(0)$'</span>, color=<span class="string">'red'</span>, fontsize=<span class="number">20</span>)  <span class="comment"># x和y是坐标</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib图表用法Ⅱ/output_2_0.png" alt="png"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>plt.annotate(text, xy, xytext, arrowprops={})</p></li><li><p>arrowprops包含的属性</p><ul><li>width  箭头中正方形的宽度</li><li>headlength 箭头的长度</li><li>headwidth 箭头的宽度</li><li>shrink 箭头和文本的距离的比例</li><li>facecolor 填充颜色</li><li>arrowstyle 指定箭头的风格</li></ul><font color="red">注意：arrowstyle不能和arrowprops中其它的属性同时使用</font></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y*<span class="number">10</span>, <span class="string">'m--'</span>)</span><br><span class="line">plt.annotate(<span class="string">'sin(0)'</span>,xy=(<span class="number">0</span>, <span class="number">0</span>), xytext=(<span class="number">1</span>,<span class="number">5</span>), arrowprops=&#123;</span><br><span class="line">    <span class="string">'width'</span>: <span class="number">3</span>,          <span class="comment"># 箭头线的宽度</span></span><br><span class="line">    <span class="string">'headlength'</span>: <span class="number">10</span>,    <span class="comment"># 箭头的长度</span></span><br><span class="line">    <span class="string">'headwidth'</span>: <span class="number">10</span>,     <span class="comment"># 箭头的宽度</span></span><br><span class="line">    <span class="string">'shrink'</span>: <span class="number">0.1</span>,       <span class="comment"># 箭头距指向坐标，距文本的比例值</span></span><br><span class="line">    <span class="string">'facecolor'</span>: <span class="string">'green'</span> <span class="comment"># 箭头颜色</span></span><br><span class="line">&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib图表用法Ⅱ/output_4_0.png" alt="png"></p><h3 id="arrowstyle的values"><a href="#arrowstyle的values" class="headerlink" title="arrowstyle的values"></a>arrowstyle的values</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">============   =============================================</span><br><span class="line">Name           Attrs</span><br><span class="line">============   =============================================</span><br><span class="line">``&apos;-&apos;``        None</span><br><span class="line">``&apos;-&gt;&apos;``       head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;-[&apos;``       widthB=1.0,lengthB=0.2,angleB=None</span><br><span class="line">``&apos;|-|&apos;``      widthA=1.0,widthB=1.0</span><br><span class="line">``&apos;-|&gt;&apos;``      head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;&lt;-&apos;``       head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;&lt;-&gt;&apos;``      head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;&lt;|-&apos;``      head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;&lt;|-|&gt;&apos;``    head_length=0.4,head_width=0.2</span><br><span class="line">``&apos;fancy&apos;``    head_length=0.4,head_width=0.4,tail_width=0.4</span><br><span class="line">``&apos;simple&apos;``   head_length=0.5,head_width=0.5,tail_width=0.2</span><br><span class="line">``&apos;wedge&apos;``    tail_width=0.3,shrink_factor=0.5</span><br><span class="line">============   =============================================</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y*<span class="number">10</span>, <span class="string">'m--'</span>)</span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">'Sin(0)'</span>, xy=(<span class="number">0</span>, <span class="number">0</span>), xytext=(<span class="number">1</span>, <span class="number">5</span>), arrowprops=&#123;</span><br><span class="line">    <span class="string">'arrowstyle'</span>: <span class="string">'fancy'</span>,</span><br><span class="line">    <span class="string">'facecolor'</span>: <span class="string">'red'</span></span><br><span class="line">&#125;, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib图表用法Ⅱ/output_6_0.png" alt="png"></p><h3 id="3D图形"><a href="#3D图形" class="headerlink" title="3D图形"></a>3D图形</h3><ul><li>mpl_toolkits.mpl3d.axes3d.Axes3D 类导入</li><li>flg.add_subplot(,projection=’3d’) 设置子画布为3d坐标系</li><li>axes.plot_surface(x, y, z, rstride, cstride)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.axes3d <span class="keyword">import</span> Axes3D</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 确定列数，表示是一行</span></span><br><span class="line">b = [<span class="number">4</span>, <span class="number">6</span>] <span class="comment"># 确定行数，表示一列</span></span><br><span class="line"></span><br><span class="line">a, b = np.meshgrid(a, b) <span class="comment"># a, b 的shape都是(2, 3)</span></span><br><span class="line">display(a.shape, b.shape)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(2, 3)</span><br><span class="line">(2, 3)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = y = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 将x, y转成二维的数组-&gt; 表格化处理np.meshgrid(x, y)</span></span><br><span class="line">X, Y = np.meshgrid(x,y)</span><br><span class="line"></span><br><span class="line">a = <span class="number">0.7</span></span><br><span class="line">b = np.pi</span><br><span class="line"></span><br><span class="line">compZ = <span class="keyword">lambda</span> X, Y: <span class="number">2</span>+a<span class="number">-2</span>*np.cos(X)*np.cos(Y) - a*np.cos(b<span class="number">-2</span>*X)</span><br><span class="line">Z = compZ(X, Y)</span><br><span class="line"></span><br><span class="line">display(X.shape, Y.shape, Z.shape)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(100, 100)</span><br><span class="line">(100, 100)</span><br><span class="line">(100, 100)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>)) <span class="comment"># 获取画布对象，并设置画布的大小</span></span><br><span class="line"><span class="comment"># 创建两个3d的子画布</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">121</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">122</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">ax1.plot_surface(X,Y,Z,cstride=<span class="number">5</span>, rstride=<span class="number">5</span>)</span><br><span class="line">ps = ax2.plot_surface(X,Y,Z,cstride=<span class="number">5</span>, rstride=<span class="number">5</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示颜色栏</span></span><br><span class="line">plt.colorbar(ps, shrink=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib图表用法Ⅱ/output_11_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>re模块介绍</title>
    <link href="https://www.xuhuiblog.cn/%E7%88%AC%E8%99%AB/re%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.xuhuiblog.cn/爬虫/re模块介绍/</id>
    <published>2019-05-08T01:10:26.000Z</published>
    <updated>2019-05-08T02:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。</p><p>许多程序设计语言都支持利用正则表达式进行字符串操作。python也不例外。python通过内置模块re对正则表达式提供了支持。</p><a id="more"></a><h2 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h2><p>模式字符串使用特殊的语法来表示一个正则表达式：</p><p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p><p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p><p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p><p>反斜杠本身需要使用反斜杠转义。</p><p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r’/t’，等价于’//t’)匹配相应的特殊字符。</p><p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p><table><thead><tr><th>元字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>\</td><td style="text-align:left">将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配\n。“\n”匹配换行符。序列“\”匹配“\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td></tr><tr><td>^</td><td style="text-align:left">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</td></tr><tr><td>$</td><td style="text-align:left">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</td></tr><tr><td>*</td><td style="text-align:left">匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，也能匹配“zo”以及“zoo”。</em>等价于o{0,}</td></tr><tr><td>+</td><td style="text-align:left">匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td></tr><tr><td>?</td><td style="text-align:left">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td></tr><tr><td>{n}</td><td style="text-align:left">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td></tr><tr><td>{n,}</td><td style="text-align:left">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td></tr><tr><td>{n,m}</td><td style="text-align:left">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o为一组，后三个o为一组。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td style="text-align:left">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+”将尽可能多的匹配“o”，得到结果[“oooo”]，而“o+?”将尽可能少的匹配“o”，得到结果 [‘o’,   ‘o’, ‘o’, ‘o’]</td></tr><tr><td>.点</td><td style="text-align:left">匹配除“\r\n”之外的任何单个字符。要匹配包括“\r\n”在内的任何字符，请使用像“[\s\S]”的模式。</td></tr><tr><td>(pattern)</td><td style="text-align:left">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。</td></tr><tr><td>(?:pattern)</td><td style="text-align:left">非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(\</td><td>)”来组合一个模式的各个部分时很有用。例如“industr(?:y\</td><td>ies)”就是一个比“industry\</td><td>industries”更简略的表达式。</td></tr><tr><td>(?=pattern)</td><td style="text-align:left">非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95\</td><td>98\</td><td>NT\</td><td>2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td style="text-align:left">非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95\</td><td>98\</td><td>NT\</td><td>2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</td></tr><tr><td>(?&lt;=pattern)</td><td style="text-align:left">非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95\</td><td>98\</td><td>NT\</td><td>2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</td></tr><tr><td>(?&lt;!pattern)</td><td style="text-align:left">非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95\</td><td>98\</td><td>NT\</td><td>2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题   此处用或任意一项都不能超过2位，如“(?&lt;!95\</td><td>98\</td><td>NT\</td><td>20)Windows正确，“(?&lt;!95\</td><td>980\</td><td>NT\</td><td>20)Windows   报错，若是单独使用则无限制，如(?&lt;!2000)Windows   正确匹配</td></tr><tr><td>x\</td><td style="text-align:left">y</td><td>匹配x或y。例如，“z\</td><td>food”能匹配“z”或“food”(此处请谨慎)。“[zf]ood”则匹配“zood”或“food”。</td></tr><tr><td>[xyz]</td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td></tr><tr><td>[^xyz]</td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如，“abc”可以匹配“plain”中的“plin”。</td></tr><tr><td>[a-z]</td><td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。   注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td></tr><tr><td>[^a-z]</td><td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“a-z”可以匹配任何不在“a”到“z”范围内的任意字符。</td></tr><tr><td>\b</td><td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td></tr><tr><td>\B</td><td style="text-align:left">匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td></tr><tr><td>\cx</td><td style="text-align:left">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td></tr><tr><td>\d</td><td style="text-align:left">匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持</td></tr><tr><td>\D</td><td style="text-align:left">匹配一个非数字字符。等价于0-9。grep要加上-P，perl正则支持</td></tr><tr><td>\f</td><td style="text-align:left">匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td>\n</td><td style="text-align:left">匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td>\r</td><td style="text-align:left">匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td>\s</td><td style="text-align:left">匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td style="text-align:left">匹配任何可见字符。等价于   \f\n\r\t\v。</td></tr><tr><td>\t</td><td style="text-align:left">匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td>\v</td><td style="text-align:left">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td>\w</td><td style="text-align:left">匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集。</td></tr><tr><td>\W</td><td style="text-align:left">匹配任何非单词字符。等价于“A-Za-z0-9_”。</td></tr><tr><td>\xn</td><td style="text-align:left">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。</td></tr><tr><td>\num</td><td style="text-align:left">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td></tr><tr><td>\nm</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td></tr><tr><td>\nml</td><td style="text-align:left">如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td></tr><tr><td>\un</td><td style="text-align:left">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。</td></tr><tr><td>\p{P}</td><td style="text-align:left">小写   p 是 property 的意思，表示 Unicode   属性，用于   Unicode   正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。   其他六个属性：   L：字母；   M：标记符号（一般不会单独出现）；   Z：分隔符（比如空格、换行等）；   S：符号（比如数学符号、货币符号等）；   N：数字（比如阿拉伯数字、罗马数字等）；   C：其他字符。   *注：此语法部分语言不支持，例：javascript。</td></tr><tr><td>&lt;   &gt;</td><td style="text-align:left">匹配词（word）的开始（&lt;）和结束（&gt;）。例如正则表达式\&lt;the>能够匹配字符串”for   the wise”中的”the”，但是不能匹配字符串”otherwise”中的”the”。注意：这个元字符不是所有的软件都支持的。</td></tr><tr><td>( )</td><td style="text-align:left">将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \1 到\9 的符号来引用。</td></tr><tr><td>\</td><td style="text-align:left"></td><td>将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him\</td><td>her) 匹配”it   belongs to him”和”it   belongs to her”，但是不能匹配”it   belongs to them.”。注意：这个元字符不是所有的软件都支持的。</td></tr></tbody></table><h2 id="re模块使用"><a href="#re模块使用" class="headerlink" title="re模块使用"></a>re模块使用</h2><p>使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。下面代码是一个简单的应用示例：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: UTF-8 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象 </span></span><br><span class="line">pattern = re.compile(r’hello’)</span><br><span class="line"><span class="comment"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None </span></span><br><span class="line">match = pattern.match(‘hello world!’) </span><br><span class="line"><span class="keyword">if</span> match: <span class="comment"># 使用Match获得分组信息 </span></span><br><span class="line">    <span class="keyword">print</span> (match.group())</span><br></pre></td></tr></table></figure></div><p><strong>compile</strong></p><p>re.compile(strPattern[, flag]):</p><p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile(‘pattern’, re.I | re.M)与re.compile(‘(?im)pattern’)是等价的。 </p><p>可选值有：</p><p>re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</p><p>re.M(MULTILINE): 多行模式，改变’^’和’$’的行为</p><p>re.S(DOTALL): 点任意匹配模式，改变’.’的行为</p><p>re.L(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</p><p>re.U(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</p><p>re.X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释</p><p>例如，以下两个正则表达式是等价的：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = re.compile(r“”“\d+ </span><br><span class="line"></span><br><span class="line">  \. </span><br><span class="line"></span><br><span class="line">  \d* “””, re.X) </span><br><span class="line"></span><br><span class="line">b = re.compile(r“\d+\.\d*”)</span><br></pre></td></tr></table></figure></div><p>​    re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = re.match(r’hello’, ‘hello world!’) </span><br><span class="line"><span class="keyword">print</span> m.group()</span><br></pre></td></tr></table></figure></div><p><strong>反斜杠的困扰</strong></p><p>正则表达式使用反斜杆（\）来转义特殊字符，使其可以匹配字符本身，而不是指定其他特殊的含义。这可能会和python字面意义上的字符串转义相冲突，这也许有些令人费解。比如，要匹配一个反斜杆本身，你也许要用‘\\’来做为正则表达式的字符串，因为正则表达式要是\，而字符串里，每个反斜杆都要写成\。<br> 你也可以在字符串前加上 r 这个前缀来避免部分疑惑，因为 r 开头的python字符串是 原生字符串(raw字符串)，所以里面的所有字符都不会被转义，比如r’\n’这个字符串就是一个反斜杆加上一字母n，而’\n’我们知道这是个换行符。因此，上面的’\\‘你也可以写成r’\‘，这样，应该就好理解很多了。</p><h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><p>re.match(pattern, string[, flags]):<br>这个方法将会从string（我们要匹配的字符串）的开头开始，尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，立即返回 None，如果匹配未结束已经到达string的末尾，也会返回None。两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止，不再对 string向后匹配。下面我们通过一个例子理解一下:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="comment">#导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象，注意hello前面的r的意思是“原生字符串”</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\w&#123;3,5&#125;-\d&#123;3&#125;'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用re.match匹配文本，获得匹配结果，无法匹配时将返回None</span></span><br><span class="line">result1 = re.match(pattern,<span class="string">'hello-123'</span>)</span><br><span class="line">result2 = re.match(pattern,<span class="string">'hello-345o CQC!'</span>)</span><br><span class="line">result3 = re.match(pattern,<span class="string">'he-123 CQC!'</span>)</span><br><span class="line">result4 = re.match(pattern,<span class="string">'hello-1 CQC!'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">result1 = pattern.match('hello')</span></span><br><span class="line"><span class="string">result2 = pattern.match('helloo CQC!')</span></span><br><span class="line"><span class="string">result3 = pattern.match('helo CQC!')</span></span><br><span class="line"><span class="string">result4 = pattern.match('hello CQC!')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#如果1匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result1:</span><br><span class="line">  <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">  print(result1.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'1匹配失败！'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#如果2匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result2:</span><br><span class="line">  <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">  print(result2.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'2匹配失败！'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#如果3匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result3:</span><br><span class="line">  <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">  print(result3.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'3匹配失败！'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#如果4匹配成功</span></span><br><span class="line"><span class="keyword">if</span> result4:</span><br><span class="line">  <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">  <span class="keyword">print</span> (result4.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'4匹配失败！'</span>)</span><br></pre></td></tr></table></figure></div><p>匹配分析</p><ol><li>第一个匹配，pattern正则表达式为’hello’，我们匹配的目标字符串string也为hello，从头至尾完全匹配，匹配成功。</li><li>第二个匹配，string为helloo CQC，从string头开始匹配pattern完全可以匹配，pattern匹配结束，同时匹配终止，后面的o CQC不再匹配，返回匹配成功的信息。</li><li>第三个匹配，string为helo CQC，从string头开始匹配pattern，发现到 ‘o’ 时无法完成匹配，匹配终止，返回None</li><li>第四个匹配，同第二个匹配原理，即使遇到了空格符也不会受影响。</li></ol><p>我们还看到最后打印出了result.group()，这个是什么意思呢？下面我们说一下关于match对象的的属性和方法<br> Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p><p><strong>属性：</strong></p><p>•string: 匹配时使用的文本。</p><p>•re: 匹配时使用的Pattern对象。</p><p>•pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</p><p>•endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</p><p>•lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</p><p>•lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</p><p><strong>方法：</strong></p><p>start([group]):<br> 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</p><p>end([group]):<br> 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</p><p>span([group]):<br> 返回(start(group), end(group))。</p><p>expand(template):<br> 将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g<1>0。</1></id></name></id></p><p>示例代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!'</span>) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"m.string:"</span>, m.string) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"m.re:"</span>, m.re) </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.pos:"</span>, m.pos </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.endpos:"</span>, m.endpos </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastindex:"</span>, m.lastindex </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastgroup:"</span>, m.lastgroup </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.group(1,2):"</span>, m.group(<span class="number">1</span>, <span class="number">2</span>) </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groups():"</span>, m.groups() </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groupdict():"</span>, m.groupdict() </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.start(2):"</span>, m.start(<span class="number">2</span>) </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.end(2):"</span>, m.end(<span class="number">2</span>) </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.span(2):"</span>, m.span(<span class="number">2</span>) </span><br><span class="line"><span class="keyword">print</span> <span class="string">r"m.expand(r'\2 \1\3'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)</span><br></pre></td></tr></table></figure></div><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>re.search(pattern, string[, flags])</p><p>search方法与match方法极其类似，区别在于match()函数只检测re是不是在string的开始位置匹配，search()会扫描整个string查找匹配，match（）只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match()就返回None。同样，search方法的返回对象同样match()返回对象的方法和属性。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入re模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象</span></span><br><span class="line">pattern = re.compile(r’world’)</span><br><span class="line"><span class="comment"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None</span></span><br><span class="line"><span class="comment"># 这个例子中使用match()无法成功匹配</span></span><br><span class="line">match = re.search(pattern,’hello world!’)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="comment"># 使用Match获得分组信息</span></span><br><span class="line">    <span class="keyword">print</span> match.group()</span><br></pre></td></tr></table></figure></div><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>re.split(pattern, string[, maxsplit])</p><p>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">print</span> re.split(pattern,<span class="string">'one1two2three3four4'</span>)</span><br></pre></td></tr></table></figure></div><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>re.findall(pattern, string[, flags])<br>搜索string，以列表形式返回全部能匹配的子串。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">print</span> re.findall(pattern,<span class="string">'one1two2three3four4'</span>)</span><br></pre></td></tr></table></figure></div><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>re.sub(pattern, repl, string[, count])<br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。当repl是一个字符串时，可以使用\id或\g、\g引用分组，但不能使用编号0。当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。count用于指定最多替换次数，不指定时全部替换。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,sys</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.exit()  </span></span><br><span class="line">print(re.sub(pattern,<span class="string">r'\2 \1'</span>, s))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">'-'</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line"><span class="comment">#I-Say,Hello-World!  </span></span><br><span class="line">print(re.sub(pattern,func, s))</span><br></pre></td></tr></table></figure></div><h3 id="subn"><a href="#subn" class="headerlink" title="subn"></a>subn</h3><p>re.subn(pattern, repl, string[, count])<br>返回 (sub(repl, string[, count]), 替换次数)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">  </span><br><span class="line">pattern = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> re.subn(pattern,<span class="string">r'\2 \1'</span>, s)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> re.subn(pattern,func, s)</span><br></pre></td></tr></table></figure></div><p>作业：任意一个html页面中图片地址取出（所有）</p><p>例如 \&lt;img  src = “xxxx” title =’xxx’ style=’xxx’ class =’xxx’/> </p><p>取出 src之后的xxxx</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;/p&gt;
&lt;p&gt;许多程序设计语言都支持利用正则表达式进行字符串操作。python也不例外。python通过内置模块re对正则表达式提供了支持。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://www.xuhuiblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.xuhuiblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib的基本使用</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.xuhuiblog.cn/数据分析/Matplotlib的基本使用/</id>
    <published>2019-05-07T10:30:10.000Z</published>
    <updated>2019-05-17T12:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载一个字体库文件， 生成一个FontProperties对象</span></span><br><span class="line">font_wwt = FontProperties(fname=<span class="string">'ttc/hkwwt.ttc'</span>, size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'这是第一个空白的画布'</span>, fontproperties=font_wwt)</span><br><span class="line">plt.xlabel(<span class="string">'X轴'</span>, fontproperties=<span class="string">'SimHei'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y轴'</span>, fontproperties=<span class="string">'SimSun'</span>)</span><br><span class="line">plt.plot()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_2_1.png" alt="png"></p><h3 id="画图的基础知识"><a href="#画图的基础知识" class="headerlink" title="画图的基础知识"></a>画图的基础知识</h3><h4 id="画布的组成部分"><a href="#画布的组成部分" class="headerlink" title="画布的组成部分"></a>画布的组成部分</h4><ul><li>标题 title (text)</li><li>坐标轴 x, y -&gt; axis(line)</li><li>轴标签 xlabel, ylabel </li><li>轴的刻度 tick (line)</li><li>刻度的标签 tick label(text)</li><li>数据 data (line)</li><li>图例 legend</li><li>绘图区域 figure</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi*<span class="number">2</span>, np.pi*<span class="number">2</span>, num=<span class="number">20</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">'r--+'</span>)</span><br><span class="line"><span class="comment"># 修改坐标轴的刻度范围</span></span><br><span class="line"><span class="comment"># [xmin, xmax, ymin, ymax]</span></span><br><span class="line">plt.axis([<span class="number">-10</span>, <span class="number">10</span>, <span class="number">-2</span>, <span class="number">2</span>])</span><br><span class="line">plt.title(<span class="string">'sin(x)'</span>, fontdict=&#123;</span><br><span class="line">    <span class="string">'fontsize'</span>: <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_6_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sereis画线</span></span><br><span class="line">x = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">30</span>)</span><br><span class="line">Series(x).plot()</span><br><span class="line"></span><br><span class="line">x2 = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=<span class="number">30</span>)</span><br><span class="line">Series(x2).plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_8_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = DataFrame(&#123;</span><br><span class="line">    <span class="string">'x'</span>: x,</span><br><span class="line">    <span class="string">'x2'</span>: x2</span><br><span class="line">&#125;)</span><br><span class="line">df.plot()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fcd1b8bd668&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_9_1.png" alt="png"></p><h4 id="网格的使用"><a href="#网格的使用" class="headerlink" title="网格的使用"></a>网格的使用</h4><ul><li>plt.grid(True) 开启网格</li><li>plt.grid(ls, lw, color, axis=’both’)<ul><li>ls -&gt; linestyle</li><li>lw -&gt; linewidth</li><li>axis -&gt; {‘both’, ‘x’, ‘y’}</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series(x.cumsum()).plot()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fcd1b83a3c8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_11_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>, ls=<span class="string">'dotted'</span>, color=<span class="string">'red'</span>, alpha=<span class="number">0.25</span>, lw=<span class="number">1</span>, axis=<span class="string">'y'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">30</span>),  <span class="comment"># x坐标-&gt; 数量</span></span><br><span class="line">         x.cumsum(), <span class="string">'cyan'</span>)  <span class="comment"># y坐标 -&gt; 累计的数值</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd26aeada0&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_12_1.png" alt="png"></p><h4 id="坐标轴刻度操作"><a href="#坐标轴刻度操作" class="headerlink" title="坐标轴刻度操作"></a>坐标轴刻度操作</h4><ul><li>plt.axis(‘off’) 关闭坐标轴</li><li>plt.axis([xmin, xmax, ymin, ymax]) 设置坐标轴的两条线的刻度</li><li>plt.axis(xmin=, ymin=)  # 设置某一轴的最大或最小的刻度</li><li>plt.ylim([ymin, ymax])  # 设置 y坐标轴的刻度</li><li>plt.xlim([xmin, xmax])  # 设置 x坐标轴的刻度</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.axis(ymax=2000, xmax=35)</span></span><br><span class="line"><span class="comment"># plt.xlim([-1, 40])</span></span><br><span class="line">plt.ylim([<span class="number">-100</span>, <span class="number">1500</span>])</span><br><span class="line">plt.plot(np.arange(<span class="number">30</span>),  <span class="comment"># x坐标-&gt; 数量</span></span><br><span class="line">         x.cumsum(), <span class="string">'cyan'</span>)  <span class="comment"># y坐标 -&gt; 累计的数值</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd2735bb38&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_14_1.png" alt="png"></p><h4 id="标题的位置与方向"><a href="#标题的位置与方向" class="headerlink" title="标题的位置与方向"></a>标题的位置与方向</h4><ul><li>plt.title(‘’, loc=’left|center|right’, rotation=45)</li><li>plt.title(‘’, color=’red’, fontsize=14)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'This is a Title'</span>, color=<span class="string">'red'</span>, fontsize=<span class="number">30</span>,</span><br><span class="line">          loc=<span class="string">'right'</span>,rotation=<span class="number">45</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">30</span>),  <span class="comment"># x坐标-&gt; 数量</span></span><br><span class="line">         x.cumsum(), <span class="string">'cyan'</span>)  <span class="comment"># y坐标 -&gt; 累计的数值</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd26aae6d8&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_16_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'This is a Title'</span>, color=<span class="string">'red'</span>, fontsize=<span class="number">30</span>,</span><br><span class="line">          loc=<span class="string">'left'</span>,rotation=<span class="number">-2</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">30</span>),  <span class="comment"># x坐标-&gt; 数量</span></span><br><span class="line">         x.cumsum(), <span class="string">'cyan'</span>)  <span class="comment"># y坐标 -&gt; 累计的数值</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd1b7ad5f8&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_17_1.png" alt="png"></p><h3 id="legend-图例"><a href="#legend-图例" class="headerlink" title="legend 图例"></a>legend 图例</h3><ul><li>plt.plot(x, y, label=’线的图例名称’)</li><li>plt.legend() 显示图例</li><li><p>plt.legend(loc=(0, 0)) 设置图例显示位置 </p><p>loc属性值</p><pre><code>===============   =============Location String   Location Code===============   =============&apos;best&apos;            0&apos;upper right&apos;     1&apos;upper left&apos;      2&apos;lower left&apos;      3&apos;lower right&apos;     4&apos;right&apos;           5&apos;center left&apos;     6&apos;center right&apos;    7&apos;lower center&apos;    8&apos;upper center&apos;    9&apos;center&apos;          10===============   =============</code></pre></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">30</span>, num=<span class="number">30</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>, label=<span class="string">'x^2'</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">3</span>, label=<span class="string">'x^3'</span>)</span><br><span class="line">plt.plot(x, <span class="number">2</span>*x+<span class="number">5</span>, label=<span class="string">'2*x+5*x'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>) <span class="comment"># (0, 0) 在左下角， （1,1）右上角</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_20_0.png" alt="png"></p><h3 id="扩展-cumsum-累加和"><a href="#扩展-cumsum-累加和" class="headerlink" title="扩展 cumsum() 累加和"></a>扩展 cumsum() 累加和</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>],</span><br><span class="line">        [<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>]</span><br><span class="line">    ]</span><br><span class="line">])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.cumsum(axis=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array([[[  1,   3,   6,  10],</span><br><span class="line">        [  2,   5,   9,  14],</span><br><span class="line">        [  5,  11,  18,  26]],</span><br><span class="line"></span><br><span class="line">       [[ 10,  30,  60, 100],</span><br><span class="line">        [ 20,  50,  90, 140],</span><br><span class="line">        [ 50, 110, 180, 260]]])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画出不同的三条线，并保存的画布为png图片</span></span><br><span class="line">plt.title(<span class="string">'三条不同的线'</span>, fontproperties=<span class="string">'SimHei'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>plot(x, y, 'go--', linewidth=2, markersize=12)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>plot(x, y, color='green', marker='o', linestyle='dashed',</span></span><br><span class="line"><span class="string"><span class="meta">... </span>     linewidth=2, markersize=12)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  marker: unknown</span></span><br><span class="line"><span class="string">  markeredgecolor: color</span></span><br><span class="line"><span class="string">  markeredgewidth: float</span></span><br><span class="line"><span class="string">  markerfacecolor: color</span></span><br><span class="line"><span class="string">  markerfacecoloralt: color</span></span><br><span class="line"><span class="string">  markersize: float</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">50</span>)</span><br><span class="line">y1 = np.random.randn(<span class="number">50</span>).cumsum() </span><br><span class="line">y2 = np.random.randn(<span class="number">50</span>).cumsum() </span><br><span class="line">y3 = np.random.randn(<span class="number">50</span>).cumsum() </span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, ls=<span class="string">'--'</span>, marker=<span class="string">'o'</span>, markersize=<span class="number">5</span>)</span><br><span class="line">plt.plot(x, y2, color=<span class="string">'red'</span>, marker=<span class="string">'x'</span>)</span><br><span class="line">plt.plot(x, y3, color=<span class="string">'green'</span>, marker=<span class="string">'h'</span>,</span><br><span class="line">         markersize=<span class="number">10</span>, markerfacecolor=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">savefig(fname, dpi=None, facecolor='w', edgecolor='w',</span></span><br><span class="line"><span class="string">          orientation='portrait', papertype=None, format=None,</span></span><br><span class="line"><span class="string">          transparent=False, bbox_inches=None, pad_inches=0.1,</span></span><br><span class="line"><span class="string">          frameon=None, metadata=None)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">plt.savefig(<span class="string">'lines.png'</span>, dpi=<span class="number">160</span>, facecolor=<span class="string">'g'</span>) <span class="comment"># 保存画布为png图片</span></span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_24_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置画布的背景颜色</span></span><br><span class="line">plt.subplot(fc=<span class="string">'c'</span>)  <span class="comment"># facecolor = fc </span></span><br><span class="line"><span class="comment"># plt.plot(x, y1, ls='--', marker='o', markersize=5)</span></span><br><span class="line">plt.plot(x, y1, ls=<span class="string">'steps'</span>, c=<span class="string">'r'</span>)  <span class="comment"># 画出阶梯线，每个角都是直角</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd1b78d828&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_25_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">**Markers**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=============    ===============================</span></span><br><span class="line"><span class="string">character        description</span></span><br><span class="line"><span class="string">=============    ===============================</span></span><br><span class="line"><span class="string">``'.'``          point marker</span></span><br><span class="line"><span class="string">``','``          pixel marker</span></span><br><span class="line"><span class="string">``'o'``          circle marker</span></span><br><span class="line"><span class="string">``'v'``          triangle_down marker</span></span><br><span class="line"><span class="string">``'^'``          triangle_up marker</span></span><br><span class="line"><span class="string">``'&lt;'``          triangle_left marker</span></span><br><span class="line"><span class="string">``'&gt;'``          triangle_right marker</span></span><br><span class="line"><span class="string">``'1'``          tri_down marker</span></span><br><span class="line"><span class="string">``'2'``          tri_up marker</span></span><br><span class="line"><span class="string">``'3'``          tri_left marker</span></span><br><span class="line"><span class="string">``'4'``          tri_right marker</span></span><br><span class="line"><span class="string">``'s'``          square marker</span></span><br><span class="line"><span class="string">``'p'``          pentagon marker</span></span><br><span class="line"><span class="string">``'*'``          star marker</span></span><br><span class="line"><span class="string">``'h'``          hexagon1 marker</span></span><br><span class="line"><span class="string">``'H'``          hexagon2 marker</span></span><br><span class="line"><span class="string">``'+'``          plus marker</span></span><br><span class="line"><span class="string">``'x'``          x marker</span></span><br><span class="line"><span class="string">``'D'``          diamond marker</span></span><br><span class="line"><span class="string">``'d'``          thin_diamond marker</span></span><br><span class="line"><span class="string">``'|'``          vline marker</span></span><br><span class="line"><span class="string">``'_'``          hline marker</span></span><br><span class="line"><span class="string">=============    ===============================</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, marker=<span class="string">'1'</span>, ls=<span class="string">'None'</span>, markersize=<span class="number">10</span>) </span><br><span class="line">plt.plot(x, y2, marker=<span class="string">'3'</span>, ls=<span class="string">'None'</span>, markersize=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd1b6870b8&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_26_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.lines <span class="keyword">import</span> Line2D</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以线的对象来设置线的属性</span></span><br><span class="line">lines = plt.plot(x, y1)  <span class="comment"># [&lt;matplotlib.lines.Line2D at 0x1162ec978&gt;]</span></span><br><span class="line">line = lines[<span class="number">0</span>]</span><br><span class="line">line.set_ls(<span class="string">'--'</span>)  <span class="comment"># set_linestyle('--')</span></span><br><span class="line">line.set_marker(<span class="string">'h'</span>)</span><br><span class="line">line.set_markersize(<span class="number">10</span>)</span><br><span class="line">line.set_markerfacecolor(<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_28_0.png" alt="png"></p><h3 id="修改画布的刻度"><a href="#修改画布的刻度" class="headerlink" title="修改画布的刻度"></a>修改画布的刻度</h3><ul><li>plt.xticks([位置], [标签])</li><li>plt.yticks([], [])</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>]</span><br><span class="line">plt.plot(x, marker=<span class="string">'h'</span>, markersize=<span class="number">10</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]) <span class="comment"># x轴上的刻度只标上三个</span></span><br><span class="line">yticks, yticklabels = plt.yticks([<span class="number">0</span>, <span class="number">15</span>, <span class="number">30</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改刻度标签的文本颜色和字体大小</span></span><br><span class="line"><span class="keyword">for</span> ticklabel <span class="keyword">in</span> yticklabels:</span><br><span class="line">    ticklabel.set_color(<span class="string">'red'</span>)</span><br><span class="line">    ticklabel.set_size(<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_30_0.png" alt="png"></p><h3 id="LaTex语法"><a href="#LaTex语法" class="headerlink" title="LaTex语法"></a>LaTex语法</h3><ul><li>格式： r’$\name$’</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi, np.pi)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.title(<span class="string">r'$\sin(x)$'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xticks([-np.pi, -np.pi*<span class="number">0.5</span>, <span class="number">0</span>, np.pi*<span class="number">0.5</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>, <span class="string">r'$-\frac&#123;\pi&#125;&#123;2&#125;$'</span>,</span><br><span class="line">            <span class="string">'0'</span>, <span class="string">r'$\frac&#123;\pi&#125;&#123;2&#125;$'</span>, <span class="string">r'$\pi$'</span>],</span><br><span class="line">           fontsize=<span class="number">20</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(x, y)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7fcd1b400cf8&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_32_1.png" alt="png"></p><h3 id="2D图形"><a href="#2D图形" class="headerlink" title="2D图形"></a>2D图形</h3><ul><li>直方图 hist(arr, bins=50)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">12</span>, <span class="number">60</span>]</span><br><span class="line"><span class="comment"># 直方图查看数据的分布情况，统计数据密度</span></span><br><span class="line">plt.hist(n, bins=<span class="number">3</span>, cumulative=<span class="literal">False</span>,</span><br><span class="line">         rwidth=<span class="number">0.8</span>, color=<span class="string">'red'</span>) <span class="comment"># cumulative=True累计直方图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_34_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个画布对象</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>,<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">axes[<span class="number">0</span>].hist(n, bins=<span class="number">10</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">'普通的直方图'</span>, fontproperties=<span class="string">'SimHei'</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].hist(n, bins=<span class="number">10</span>, cumulative=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">'累计的直方图'</span>, fontproperties=<span class="string">'SimHei'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_35_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度的直方图</span></span><br><span class="line"><span class="comment"># 水平方向和垂直方向</span></span><br><span class="line">n = np.random.normal(<span class="number">10</span>, <span class="number">2</span>, size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># density归一化处理，密度的直方图</span></span><br><span class="line">plt.hist(n, bins=<span class="number">20</span>,</span><br><span class="line">         density=<span class="literal">True</span>,</span><br><span class="line">         orientation=<span class="string">'vertical'</span>,</span><br><span class="line">         color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_36_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平方向的密度直方图</span></span><br><span class="line">plt.hist(n, bins=<span class="number">20</span>,</span><br><span class="line">         density=<span class="literal">True</span>,</span><br><span class="line">         orientation=<span class="string">'horizontal'</span>,</span><br><span class="line">         color=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_37_0.png" alt="png"></p><h4 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h4><ul><li>plt.bar(x, y, width,  bottom, color)</li><li>plt.barh(x, y, height, left, color) 水平条形图</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">y1 = <span class="number">10</span>*np.abs(np.random.randn(<span class="number">5</span>))</span><br><span class="line">y2 = <span class="number">10</span>*np.abs(np.random.randn(<span class="number">5</span>))</span><br><span class="line">y3 = <span class="number">10</span>*np.abs(np.random.randn(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line">plt.bar(x, y1, width=width, color=<span class="string">'r'</span>, bottom=<span class="number">1</span>)</span><br><span class="line">plt.bar(x+width, y2, width=width, color=<span class="string">'b'</span>, bottom=<span class="number">1</span>)</span><br><span class="line">plt.bar(x+<span class="number">2</span>*width, y3, width=width, color=<span class="string">'g'</span>, bottom=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将x轴的刻度放在第二条形的下方</span></span><br><span class="line">plt.xticks(x+width, x)</span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">30</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_39_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重叠</span></span><br><span class="line">plt.bar(x, y1, width=width, color=<span class="string">'r'</span>)</span><br><span class="line">plt.bar(x, y2, width=width, color=<span class="string">'b'</span>)</span><br><span class="line">plt.bar(x, y3, width=width, color=<span class="string">'g'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BarContainer object of 5 artists&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_40_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  水平方向的条形图</span></span><br><span class="line">plt.barh(x, y1, height=<span class="number">0.4</span>, color=<span class="string">'r'</span>, left=<span class="number">0.1</span>)</span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">25</span>])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 25)</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_41_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.barh(x, y1, height=width, color=<span class="string">'r'</span>)</span><br><span class="line">plt.barh(x+width, y2, height=width, color=<span class="string">'b'</span>)</span><br><span class="line">plt.barh(x+<span class="number">2</span>*width, y3, height=width, color=<span class="string">'g'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_42_0.png" alt="png"></p><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><ul><li>plt.pie(x, labels, color, explode, autopct, pctdistance, labeldistance)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">10</span>]</span><br><span class="line">labels = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Autumn'</span>, <span class="string">'Winter'</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">plt.pie(</span></span><br><span class="line"><span class="string">    ['x', 'explode=None', 'labels=None',</span></span><br><span class="line"><span class="string">    'colors=None', 'autopct=None', 'pctdistance=0.6', </span></span><br><span class="line"><span class="string">    'shadow=False', 'labeldistance=1.1', </span></span><br><span class="line"><span class="string">    'startangle=None', 'radius=None',</span></span><br><span class="line"><span class="string">    'counterclock=True', 'wedgeprops=None', </span></span><br><span class="line"><span class="string">    'textprops=None', 'center=(0, 0)',</span></span><br><span class="line"><span class="string">    'frame=False', 'rotatelabels=False', '*', 'data=None'],</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">plt.pie(x,[<span class="number">0.2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        labels=labels,</span><br><span class="line">        shadow=<span class="literal">True</span>, startangle=<span class="number">90</span>,</span><br><span class="line">        autopct=<span class="string">'%.1f%%'</span>,</span><br><span class="line">        rotatelabels=<span class="literal">True</span>,</span><br><span class="line">        labeldistance=<span class="number">1</span>, textprops=&#123;<span class="string">'fontsize'</span>:<span class="number">18</span>,</span><br><span class="line">                                      <span class="string">'color'</span>:<span class="string">'k'</span>&#125;)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_44_0.png" alt="png"></p><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><ul><li>plt.scatter(x, y, color, label, edgecolor)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, marker=<span class="string">'d'</span>, c=[<span class="string">'#0f0408'</span>, </span><br><span class="line">                                <span class="string">'#990021'</span>,</span><br><span class="line">                                <span class="string">'#876199'</span>,</span><br><span class="line">                                <span class="string">'#d4c001'</span></span><br><span class="line">                                ])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_46_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">y = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">colors_arr = np.random.randint(<span class="number">16777215</span>, size=<span class="number">1000</span>)</span><br><span class="line">colors = []</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors_arr:</span><br><span class="line">    color_txt = hex(color) <span class="comment"># 0x12dd1f</span></span><br><span class="line">    color_txt = color_txt[<span class="number">2</span>:] <span class="comment">#  12dd1f</span></span><br><span class="line">    colors.append(<span class="string">'#'</span>+color_txt.rjust(<span class="number">6</span>, <span class="string">'0'</span>))</span><br><span class="line">    </span><br><span class="line">plt.scatter(x, y, c=colors, marker=<span class="string">'d'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/Matplotlib的基本使用/output_47_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; matplotlib.font_manager &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; FontProperties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scipy中的图片过滤</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/scipy%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E8%BF%87%E6%BB%A4/"/>
    <id>https://www.xuhuiblog.cn/数据分析/scipy中的图片过滤/</id>
    <published>2019-05-07T03:33:48.000Z</published>
    <updated>2019-05-07T09:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> face</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.ndimage <span class="keyword">import</span> gaussian_filter, median_filter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.signal <span class="keyword">import</span> wiener</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="ndimage中的图片过滤方法"><a href="#ndimage中的图片过滤方法" class="headerlink" title="ndimage中的图片过滤方法"></a>ndimage中的图片过滤方法</h3><ul><li>gaussian_filter(arr, sigmal=1)  高斯滤波</li><li>median_filter(arr, size=5)  中值滤波</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_img = face(gray=<span class="literal">True</span>)</span><br><span class="line">plt.imshow(face_img, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f564a20a208&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_3_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face1 = face_img[:<span class="number">512</span>, <span class="number">-512</span>:]  <span class="comment"># 图片切片，取前512行，后512列</span></span><br><span class="line">plt.imshow(face1, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f564a1b44e0&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_4_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给face1 图片加上噪点</span></span><br><span class="line">face2 = np.copy(face1).astype(np.float)  <span class="comment"># 复制face1并且修改类型为float</span></span><br><span class="line">face2 += face1.std()*<span class="number">0.5</span>*np.random.standard_normal(face1.shape)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(face2, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f564a112cf8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_6_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_gaussian=gaussian_filter(face2, sigma=<span class="number">1</span>)</span><br><span class="line">plt.imshow(face_gaussian,cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f564a0e9eb8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_7_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_media = median_filter(face2, size=<span class="number">5</span>)</span><br><span class="line">plt.imshow(face_media, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f56485d2eb8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_8_1.png" alt="png"></p><h3 id="维纳滤波"><a href="#维纳滤波" class="headerlink" title="维纳滤波"></a>维纳滤波</h3><ul><li>signal.wiener(arr, mysize=(5,5))</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_wiener = wiener(face2, mysize=[<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line">plt.imshow(face_wiener, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f5648141668&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_10_2.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置画布大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">4</span>))  <span class="comment"># 单位 英寸/2.54cm</span></span><br><span class="line">titles=[</span><br><span class="line">    <span class="string">'原图'</span>,</span><br><span class="line">    <span class="string">'加噪'</span>,</span><br><span class="line">    <span class="string">'高斯滤波'</span>,</span><br><span class="line">    <span class="string">'中值滤波'</span>,</span><br><span class="line">    <span class="string">'维纳滤波'</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># matplotlib.rcParams['font.sans-serif'] = ['Droid Sans Fallback']</span></span><br><span class="line"><span class="comment"># matplotlib.rcParams['axes.unicode_minus']=False</span></span><br><span class="line">faces = [</span><br><span class="line">    face1,</span><br><span class="line">    face2,</span><br><span class="line">    face_gaussian,</span><br><span class="line">    face_media,</span><br><span class="line">    face_wiener</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i,face <span class="keyword">in</span> enumerate(faces):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">5</span>,  i+<span class="number">1</span>) <span class="comment"># 创建子画布</span></span><br><span class="line">    plt.imshow(face,cmap=<span class="string">'gray'</span> ) <span class="comment"># 在子画布中显示 图片</span></span><br><span class="line">    plt.axis(<span class="string">'off'</span>)  <span class="comment"># 将坐标轴关闭</span></span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">plt.show()  <span class="comment"># 显示整个画布</span></span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的图片过滤/output_11_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scipy.misc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; face&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scipy.ndimage &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; gaussian_filter, median_filter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scipy.signal &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; wiener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scipy中的ndimage的应用</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/scipy%E4%B8%AD%E7%9A%84ndimage%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://www.xuhuiblog.cn/数据分析/scipy中的ndimage的应用/</id>
    <published>2019-05-06T11:27:41.000Z</published>
    <updated>2019-05-06T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片的移动，缩放，和旋转"><a href="#图片的移动，缩放，和旋转" class="headerlink" title="图片的移动，缩放，和旋转"></a>图片的移动，缩放，和旋转</h3><ul><li>ndimage.shift() 移动</li><li>ndimage.zoom() 缩放</li><li>ndimage.rotate() 旋转</li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> face</span><br><span class="line"><span class="keyword">from</span> scipy.ndimage <span class="keyword">import</span> shift, zoom, rotate</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_img = face(gray=<span class="literal">True</span>)</span><br><span class="line">plt.imshow(face_img, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f0d326213c8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/home/pighui/datas/day05/scipy%E4%B8%AD%E7%9A%84ndimage%E7%9A%84%E5%BA%94%E7%94%A8/output_2_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mode = &#123;'reflect', 'constant', 'nearest', 'mirror', 'wrap'&#125;</span></span><br><span class="line"><span class="comment"># 向下移动100像素，向右移动200像素</span></span><br><span class="line">plt.imshow(shift(face_img, shift=(<span class="number">100</span>, <span class="number">200</span>), mode=<span class="string">'mirror'</span>), cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f0d32372470&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/output_3_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(rotate(face_img, angle=<span class="number">45</span>), cmap=<span class="string">'gray'</span>) <span class="comment"># 逆时针旋转45°</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f0d32446748&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/output_4_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">face_r = rotate(face_img, angle=<span class="number">45</span>, mode=<span class="string">'nearest'</span>)</span><br><span class="line">plt.imshow(face_r) <span class="comment"># 显示</span></span><br><span class="line"><span class="comment"># plt.imsave('face_rotate.png', face_r) # 保存到本地</span></span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/output_5_0.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">face_2 = zoom(face_img, zoom=<span class="number">0.5</span>)</span><br><span class="line">plt.imshow(face_2, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7f0d32423470&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/output_6_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_2.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(384, 512)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">12</span>,<span class="number">12</span>))  <span class="comment"># 设置画布的大小</span></span><br><span class="line"></span><br><span class="line">faces = [</span><br><span class="line">    face_img,</span><br><span class="line">    shift(face_img, shift=(<span class="number">150</span>, <span class="number">150</span>)),</span><br><span class="line">    rotate(face_img, angle=<span class="number">90</span>),</span><br><span class="line">    zoom(face_img, zoom=<span class="number">0.5</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,face <span class="keyword">in</span> enumerate(faces):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">5</span>,  i+<span class="number">1</span>) <span class="comment"># 创建子画布</span></span><br><span class="line">    plt.imshow(face,cmap = plt.cm.gray ) <span class="comment"># 在子画布中显示 图片</span></span><br><span class="line">    plt.axis(<span class="string">'off'</span>)  <span class="comment"># 将坐标轴关闭</span></span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy中的ndimage的应用/output_8_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图片的移动，缩放，和旋转&quot;&gt;&lt;a href=&quot;#图片的移动，缩放，和旋转&quot; class=&quot;headerlink&quot; title=&quot;图片的移动，缩放，和旋转&quot;&gt;&lt;/a&gt;图片的移动，缩放，和旋转&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ndimage.shift() 移动&lt;/li&gt;
&lt;li&gt;ndimage.zoom() 缩放&lt;/li&gt;
&lt;li&gt;ndimage.rotate() 旋转&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scipy的io操作</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/scipy%E7%9A%84io%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.xuhuiblog.cn/数据分析/scipy的io操作/</id>
    <published>2019-05-06T11:26:14.000Z</published>
    <updated>2019-05-17T12:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="io的保存与加载"><a href="#io的保存与加载" class="headerlink" title="io的保存与加载"></a>io的保存与加载</h3><ul><li>scipy.io.savemat()</li><li>scipy.io.loadmat()</li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> io</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个1-100之间的1000个等差数列</span></span><br><span class="line">data = np.linspace(<span class="number">1</span>, <span class="number">100</span>, num=<span class="number">1000</span>).reshape((<span class="number">100</span>,<span class="number">10</span>))</span><br><span class="line">data.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 10)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将生成的ndarray的数组保存起来</span></span><br><span class="line"><span class="comment"># 以io模块</span></span><br><span class="line">io.savemat(<span class="string">'data.mat'</span>, mdict=&#123;</span><br><span class="line">    <span class="string">'X'</span>: data,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'1-100的1000个等差数列'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载mat文件，获取数据</span></span><br><span class="line">dmat=io.loadmat(<span class="string">'data.mat'</span>) <span class="comment"># 返回一个字典对象</span></span><br><span class="line">dmat</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;__header__&apos;: b&apos;MATLAB 5.0 MAT-file Platform: posix, Created on: Mon May  6 17:17:43 2019&apos;,</span><br><span class="line"> &apos;__version__&apos;: &apos;1.0&apos;,</span><br><span class="line"> &apos;__globals__&apos;: [],</span><br><span class="line"> &apos;X&apos;: array([[  1.        ,   1.0990991 ,   1.1981982 ,   1.2972973 ,</span><br><span class="line">           1.3963964 ,   1.4954955 ,   1.59459459,   1.69369369,</span><br><span class="line">           1.79279279,   1.89189189],</span><br><span class="line">        [  1.99099099,   2.09009009,   2.18918919,   2.28828829,</span><br><span class="line">           2.38738739,   2.48648649,   2.58558559,   2.68468468,</span><br><span class="line">           2.78378378,   2.88288288],</span><br><span class="line">        [  2.98198198,   3.08108108,   3.18018018,   3.27927928,</span><br><span class="line">           3.37837838,   3.47747748,   3.57657658,   3.67567568,</span><br><span class="line">           3.77477477,   3.87387387],</span><br><span class="line">        [  3.97297297,   4.07207207,   4.17117117,   4.27027027,</span><br><span class="line">           4.36936937,   4.46846847,   4.56756757,   4.66666667,</span><br><span class="line">           4.76576577,   4.86486486],</span><br><span class="line">        [  4.96396396,   5.06306306,   5.16216216,   5.26126126,</span><br><span class="line">           5.36036036,   5.45945946,   5.55855856,   5.65765766,</span><br><span class="line">           5.75675676,   5.85585586],</span><br><span class="line">        [  5.95495495,   6.05405405,   6.15315315,   6.25225225,</span><br><span class="line">           6.35135135,   6.45045045,   6.54954955,   6.64864865,</span><br><span class="line">           6.74774775,   6.84684685],</span><br><span class="line">        [  6.94594595,   7.04504505,   7.14414414,   7.24324324,</span><br><span class="line">           7.34234234,   7.44144144,   7.54054054,   7.63963964,</span><br><span class="line">           7.73873874,   7.83783784],</span><br><span class="line">        [  7.93693694,   8.03603604,   8.13513514,   8.23423423,</span><br><span class="line">           8.33333333,   8.43243243,   8.53153153,   8.63063063,</span><br><span class="line">           8.72972973,   8.82882883],</span><br><span class="line">        [  8.92792793,   9.02702703,   9.12612613,   9.22522523,</span><br><span class="line">           9.32432432,   9.42342342,   9.52252252,   9.62162162,</span><br><span class="line">           9.72072072,   9.81981982],</span><br><span class="line">        [  9.91891892,  10.01801802,  10.11711712,  10.21621622,</span><br><span class="line">          10.31531532,  10.41441441,  10.51351351,  10.61261261,</span><br><span class="line">          10.71171171,  10.81081081],</span><br><span class="line">        [ 10.90990991,  11.00900901,  11.10810811,  11.20720721,</span><br><span class="line">          11.30630631,  11.40540541,  11.5045045 ,  11.6036036 ,</span><br><span class="line">          11.7027027 ,  11.8018018 ],</span><br><span class="line">        [ 11.9009009 ,  12.        ,  12.0990991 ,  12.1981982 ,</span><br><span class="line">          12.2972973 ,  12.3963964 ,  12.4954955 ,  12.59459459,</span><br><span class="line">          12.69369369,  12.79279279],</span><br><span class="line">        [ 12.89189189,  12.99099099,  13.09009009,  13.18918919,</span><br><span class="line">          13.28828829,  13.38738739,  13.48648649,  13.58558559,</span><br><span class="line">          13.68468468,  13.78378378],</span><br><span class="line">        [ 13.88288288,  13.98198198,  14.08108108,  14.18018018,</span><br><span class="line">          14.27927928,  14.37837838,  14.47747748,  14.57657658,</span><br><span class="line">          14.67567568,  14.77477477],</span><br><span class="line">        [ 14.87387387,  14.97297297,  15.07207207,  15.17117117,</span><br><span class="line">          15.27027027,  15.36936937,  15.46846847,  15.56756757,</span><br><span class="line">          15.66666667,  15.76576577],</span><br><span class="line">        [ 15.86486486,  15.96396396,  16.06306306,  16.16216216,</span><br><span class="line">          16.26126126,  16.36036036,  16.45945946,  16.55855856,</span><br><span class="line">          16.65765766,  16.75675676],</span><br><span class="line">        [ 16.85585586,  16.95495495,  17.05405405,  17.15315315,</span><br><span class="line">          17.25225225,  17.35135135,  17.45045045,  17.54954955,</span><br><span class="line">          17.64864865,  17.74774775],</span><br><span class="line">        [ 17.84684685,  17.94594595,  18.04504505,  18.14414414,</span><br><span class="line">          18.24324324,  18.34234234,  18.44144144,  18.54054054,</span><br><span class="line">          18.63963964,  18.73873874],</span><br><span class="line">        [ 18.83783784,  18.93693694,  19.03603604,  19.13513514,</span><br><span class="line">          19.23423423,  19.33333333,  19.43243243,  19.53153153,</span><br><span class="line">          19.63063063,  19.72972973],</span><br><span class="line">        [ 19.82882883,  19.92792793,  20.02702703,  20.12612613,</span><br><span class="line">          20.22522523,  20.32432432,  20.42342342,  20.52252252,</span><br><span class="line">          20.62162162,  20.72072072],</span><br><span class="line">        [ 20.81981982,  20.91891892,  21.01801802,  21.11711712,</span><br><span class="line">          21.21621622,  21.31531532,  21.41441441,  21.51351351,</span><br><span class="line">          21.61261261,  21.71171171],</span><br><span class="line">        [ 21.81081081,  21.90990991,  22.00900901,  22.10810811,</span><br><span class="line">          22.20720721,  22.30630631,  22.40540541,  22.5045045 ,</span><br><span class="line">          22.6036036 ,  22.7027027 ],</span><br><span class="line">        [ 22.8018018 ,  22.9009009 ,  23.        ,  23.0990991 ,</span><br><span class="line">          23.1981982 ,  23.2972973 ,  23.3963964 ,  23.4954955 ,</span><br><span class="line">          23.59459459,  23.69369369],</span><br><span class="line">        [ 23.79279279,  23.89189189,  23.99099099,  24.09009009,</span><br><span class="line">          24.18918919,  24.28828829,  24.38738739,  24.48648649,</span><br><span class="line">          24.58558559,  24.68468468],</span><br><span class="line">        [ 24.78378378,  24.88288288,  24.98198198,  25.08108108,</span><br><span class="line">          25.18018018,  25.27927928,  25.37837838,  25.47747748,</span><br><span class="line">          25.57657658,  25.67567568],</span><br><span class="line">        [ 25.77477477,  25.87387387,  25.97297297,  26.07207207,</span><br><span class="line">          26.17117117,  26.27027027,  26.36936937,  26.46846847,</span><br><span class="line">          26.56756757,  26.66666667],</span><br><span class="line">        [ 26.76576577,  26.86486486,  26.96396396,  27.06306306,</span><br><span class="line">          27.16216216,  27.26126126,  27.36036036,  27.45945946,</span><br><span class="line">          27.55855856,  27.65765766],</span><br><span class="line">        [ 27.75675676,  27.85585586,  27.95495495,  28.05405405,</span><br><span class="line">          28.15315315,  28.25225225,  28.35135135,  28.45045045,</span><br><span class="line">          28.54954955,  28.64864865],</span><br><span class="line">        [ 28.74774775,  28.84684685,  28.94594595,  29.04504505,</span><br><span class="line">          29.14414414,  29.24324324,  29.34234234,  29.44144144,</span><br><span class="line">          29.54054054,  29.63963964],</span><br><span class="line">        [ 29.73873874,  29.83783784,  29.93693694,  30.03603604,</span><br><span class="line">          30.13513514,  30.23423423,  30.33333333,  30.43243243,</span><br><span class="line">          30.53153153,  30.63063063],</span><br><span class="line">        [ 30.72972973,  30.82882883,  30.92792793,  31.02702703,</span><br><span class="line">          31.12612613,  31.22522523,  31.32432432,  31.42342342,</span><br><span class="line">          31.52252252,  31.62162162],</span><br><span class="line">        [ 31.72072072,  31.81981982,  31.91891892,  32.01801802,</span><br><span class="line">          32.11711712,  32.21621622,  32.31531532,  32.41441441,</span><br><span class="line">          32.51351351,  32.61261261],</span><br><span class="line">        [ 32.71171171,  32.81081081,  32.90990991,  33.00900901,</span><br><span class="line">          33.10810811,  33.20720721,  33.30630631,  33.40540541,</span><br><span class="line">          33.5045045 ,  33.6036036 ],</span><br><span class="line">        [ 33.7027027 ,  33.8018018 ,  33.9009009 ,  34.        ,</span><br><span class="line">          34.0990991 ,  34.1981982 ,  34.2972973 ,  34.3963964 ,</span><br><span class="line">          34.4954955 ,  34.59459459],</span><br><span class="line">        [ 34.69369369,  34.79279279,  34.89189189,  34.99099099,</span><br><span class="line">          35.09009009,  35.18918919,  35.28828829,  35.38738739,</span><br><span class="line">          35.48648649,  35.58558559],</span><br><span class="line">        [ 35.68468468,  35.78378378,  35.88288288,  35.98198198,</span><br><span class="line">          36.08108108,  36.18018018,  36.27927928,  36.37837838,</span><br><span class="line">          36.47747748,  36.57657658],</span><br><span class="line">        [ 36.67567568,  36.77477477,  36.87387387,  36.97297297,</span><br><span class="line">          37.07207207,  37.17117117,  37.27027027,  37.36936937,</span><br><span class="line">          37.46846847,  37.56756757],</span><br><span class="line">        [ 37.66666667,  37.76576577,  37.86486486,  37.96396396,</span><br><span class="line">          38.06306306,  38.16216216,  38.26126126,  38.36036036,</span><br><span class="line">          38.45945946,  38.55855856],</span><br><span class="line">        [ 38.65765766,  38.75675676,  38.85585586,  38.95495495,</span><br><span class="line">          39.05405405,  39.15315315,  39.25225225,  39.35135135,</span><br><span class="line">          39.45045045,  39.54954955],</span><br><span class="line">        [ 39.64864865,  39.74774775,  39.84684685,  39.94594595,</span><br><span class="line">          40.04504505,  40.14414414,  40.24324324,  40.34234234,</span><br><span class="line">          40.44144144,  40.54054054],</span><br><span class="line">        [ 40.63963964,  40.73873874,  40.83783784,  40.93693694,</span><br><span class="line">          41.03603604,  41.13513514,  41.23423423,  41.33333333,</span><br><span class="line">          41.43243243,  41.53153153],</span><br><span class="line">        [ 41.63063063,  41.72972973,  41.82882883,  41.92792793,</span><br><span class="line">          42.02702703,  42.12612613,  42.22522523,  42.32432432,</span><br><span class="line">          42.42342342,  42.52252252],</span><br><span class="line">        [ 42.62162162,  42.72072072,  42.81981982,  42.91891892,</span><br><span class="line">          43.01801802,  43.11711712,  43.21621622,  43.31531532,</span><br><span class="line">          43.41441441,  43.51351351],</span><br><span class="line">        [ 43.61261261,  43.71171171,  43.81081081,  43.90990991,</span><br><span class="line">          44.00900901,  44.10810811,  44.20720721,  44.30630631,</span><br><span class="line">          44.40540541,  44.5045045 ],</span><br><span class="line">        [ 44.6036036 ,  44.7027027 ,  44.8018018 ,  44.9009009 ,</span><br><span class="line">          45.        ,  45.0990991 ,  45.1981982 ,  45.2972973 ,</span><br><span class="line">          45.3963964 ,  45.4954955 ],</span><br><span class="line">        [ 45.59459459,  45.69369369,  45.79279279,  45.89189189,</span><br><span class="line">          45.99099099,  46.09009009,  46.18918919,  46.28828829,</span><br><span class="line">          46.38738739,  46.48648649],</span><br><span class="line">        [ 46.58558559,  46.68468468,  46.78378378,  46.88288288,</span><br><span class="line">          46.98198198,  47.08108108,  47.18018018,  47.27927928,</span><br><span class="line">          47.37837838,  47.47747748],</span><br><span class="line">        [ 47.57657658,  47.67567568,  47.77477477,  47.87387387,</span><br><span class="line">          47.97297297,  48.07207207,  48.17117117,  48.27027027,</span><br><span class="line">          48.36936937,  48.46846847],</span><br><span class="line">        [ 48.56756757,  48.66666667,  48.76576577,  48.86486486,</span><br><span class="line">          48.96396396,  49.06306306,  49.16216216,  49.26126126,</span><br><span class="line">          49.36036036,  49.45945946],</span><br><span class="line">        [ 49.55855856,  49.65765766,  49.75675676,  49.85585586,</span><br><span class="line">          49.95495495,  50.05405405,  50.15315315,  50.25225225,</span><br><span class="line">          50.35135135,  50.45045045],</span><br><span class="line">        [ 50.54954955,  50.64864865,  50.74774775,  50.84684685,</span><br><span class="line">          50.94594595,  51.04504505,  51.14414414,  51.24324324,</span><br><span class="line">          51.34234234,  51.44144144],</span><br><span class="line">        [ 51.54054054,  51.63963964,  51.73873874,  51.83783784,</span><br><span class="line">          51.93693694,  52.03603604,  52.13513514,  52.23423423,</span><br><span class="line">          52.33333333,  52.43243243],</span><br><span class="line">        [ 52.53153153,  52.63063063,  52.72972973,  52.82882883,</span><br><span class="line">          52.92792793,  53.02702703,  53.12612613,  53.22522523,</span><br><span class="line">          53.32432432,  53.42342342],</span><br><span class="line">        [ 53.52252252,  53.62162162,  53.72072072,  53.81981982,</span><br><span class="line">          53.91891892,  54.01801802,  54.11711712,  54.21621622,</span><br><span class="line">          54.31531532,  54.41441441],</span><br><span class="line">        [ 54.51351351,  54.61261261,  54.71171171,  54.81081081,</span><br><span class="line">          54.90990991,  55.00900901,  55.10810811,  55.20720721,</span><br><span class="line">          55.30630631,  55.40540541],</span><br><span class="line">        [ 55.5045045 ,  55.6036036 ,  55.7027027 ,  55.8018018 ,</span><br><span class="line">          55.9009009 ,  56.        ,  56.0990991 ,  56.1981982 ,</span><br><span class="line">          56.2972973 ,  56.3963964 ],</span><br><span class="line">        [ 56.4954955 ,  56.59459459,  56.69369369,  56.79279279,</span><br><span class="line">          56.89189189,  56.99099099,  57.09009009,  57.18918919,</span><br><span class="line">          57.28828829,  57.38738739],</span><br><span class="line">        [ 57.48648649,  57.58558559,  57.68468468,  57.78378378,</span><br><span class="line">          57.88288288,  57.98198198,  58.08108108,  58.18018018,</span><br><span class="line">          58.27927928,  58.37837838],</span><br><span class="line">        [ 58.47747748,  58.57657658,  58.67567568,  58.77477477,</span><br><span class="line">          58.87387387,  58.97297297,  59.07207207,  59.17117117,</span><br><span class="line">          59.27027027,  59.36936937],</span><br><span class="line">        [ 59.46846847,  59.56756757,  59.66666667,  59.76576577,</span><br><span class="line">          59.86486486,  59.96396396,  60.06306306,  60.16216216,</span><br><span class="line">          60.26126126,  60.36036036],</span><br><span class="line">        [ 60.45945946,  60.55855856,  60.65765766,  60.75675676,</span><br><span class="line">          60.85585586,  60.95495495,  61.05405405,  61.15315315,</span><br><span class="line">          61.25225225,  61.35135135],</span><br><span class="line">        [ 61.45045045,  61.54954955,  61.64864865,  61.74774775,</span><br><span class="line">          61.84684685,  61.94594595,  62.04504505,  62.14414414,</span><br><span class="line">          62.24324324,  62.34234234],</span><br><span class="line">        [ 62.44144144,  62.54054054,  62.63963964,  62.73873874,</span><br><span class="line">          62.83783784,  62.93693694,  63.03603604,  63.13513514,</span><br><span class="line">          63.23423423,  63.33333333],</span><br><span class="line">        [ 63.43243243,  63.53153153,  63.63063063,  63.72972973,</span><br><span class="line">          63.82882883,  63.92792793,  64.02702703,  64.12612613,</span><br><span class="line">          64.22522523,  64.32432432],</span><br><span class="line">        [ 64.42342342,  64.52252252,  64.62162162,  64.72072072,</span><br><span class="line">          64.81981982,  64.91891892,  65.01801802,  65.11711712,</span><br><span class="line">          65.21621622,  65.31531532],</span><br><span class="line">        [ 65.41441441,  65.51351351,  65.61261261,  65.71171171,</span><br><span class="line">          65.81081081,  65.90990991,  66.00900901,  66.10810811,</span><br><span class="line">          66.20720721,  66.30630631],</span><br><span class="line">        [ 66.40540541,  66.5045045 ,  66.6036036 ,  66.7027027 ,</span><br><span class="line">          66.8018018 ,  66.9009009 ,  67.        ,  67.0990991 ,</span><br><span class="line">          67.1981982 ,  67.2972973 ],</span><br><span class="line">        [ 67.3963964 ,  67.4954955 ,  67.59459459,  67.69369369,</span><br><span class="line">          67.79279279,  67.89189189,  67.99099099,  68.09009009,</span><br><span class="line">          68.18918919,  68.28828829],</span><br><span class="line">        [ 68.38738739,  68.48648649,  68.58558559,  68.68468468,</span><br><span class="line">          68.78378378,  68.88288288,  68.98198198,  69.08108108,</span><br><span class="line">          69.18018018,  69.27927928],</span><br><span class="line">        [ 69.37837838,  69.47747748,  69.57657658,  69.67567568,</span><br><span class="line">          69.77477477,  69.87387387,  69.97297297,  70.07207207,</span><br><span class="line">          70.17117117,  70.27027027],</span><br><span class="line">        [ 70.36936937,  70.46846847,  70.56756757,  70.66666667,</span><br><span class="line">          70.76576577,  70.86486486,  70.96396396,  71.06306306,</span><br><span class="line">          71.16216216,  71.26126126],</span><br><span class="line">        [ 71.36036036,  71.45945946,  71.55855856,  71.65765766,</span><br><span class="line">          71.75675676,  71.85585586,  71.95495495,  72.05405405,</span><br><span class="line">          72.15315315,  72.25225225],</span><br><span class="line">        [ 72.35135135,  72.45045045,  72.54954955,  72.64864865,</span><br><span class="line">          72.74774775,  72.84684685,  72.94594595,  73.04504505,</span><br><span class="line">          73.14414414,  73.24324324],</span><br><span class="line">        [ 73.34234234,  73.44144144,  73.54054054,  73.63963964,</span><br><span class="line">          73.73873874,  73.83783784,  73.93693694,  74.03603604,</span><br><span class="line">          74.13513514,  74.23423423],</span><br><span class="line">        [ 74.33333333,  74.43243243,  74.53153153,  74.63063063,</span><br><span class="line">          74.72972973,  74.82882883,  74.92792793,  75.02702703,</span><br><span class="line">          75.12612613,  75.22522523],</span><br><span class="line">        [ 75.32432432,  75.42342342,  75.52252252,  75.62162162,</span><br><span class="line">          75.72072072,  75.81981982,  75.91891892,  76.01801802,</span><br><span class="line">          76.11711712,  76.21621622],</span><br><span class="line">        [ 76.31531532,  76.41441441,  76.51351351,  76.61261261,</span><br><span class="line">          76.71171171,  76.81081081,  76.90990991,  77.00900901,</span><br><span class="line">          77.10810811,  77.20720721],</span><br><span class="line">        [ 77.30630631,  77.40540541,  77.5045045 ,  77.6036036 ,</span><br><span class="line">          77.7027027 ,  77.8018018 ,  77.9009009 ,  78.        ,</span><br><span class="line">          78.0990991 ,  78.1981982 ],</span><br><span class="line">        [ 78.2972973 ,  78.3963964 ,  78.4954955 ,  78.59459459,</span><br><span class="line">          78.69369369,  78.79279279,  78.89189189,  78.99099099,</span><br><span class="line">          79.09009009,  79.18918919],</span><br><span class="line">        [ 79.28828829,  79.38738739,  79.48648649,  79.58558559,</span><br><span class="line">          79.68468468,  79.78378378,  79.88288288,  79.98198198,</span><br><span class="line">          80.08108108,  80.18018018],</span><br><span class="line">        [ 80.27927928,  80.37837838,  80.47747748,  80.57657658,</span><br><span class="line">          80.67567568,  80.77477477,  80.87387387,  80.97297297,</span><br><span class="line">          81.07207207,  81.17117117],</span><br><span class="line">        [ 81.27027027,  81.36936937,  81.46846847,  81.56756757,</span><br><span class="line">          81.66666667,  81.76576577,  81.86486486,  81.96396396,</span><br><span class="line">          82.06306306,  82.16216216],</span><br><span class="line">        [ 82.26126126,  82.36036036,  82.45945946,  82.55855856,</span><br><span class="line">          82.65765766,  82.75675676,  82.85585586,  82.95495495,</span><br><span class="line">          83.05405405,  83.15315315],</span><br><span class="line">        [ 83.25225225,  83.35135135,  83.45045045,  83.54954955,</span><br><span class="line">          83.64864865,  83.74774775,  83.84684685,  83.94594595,</span><br><span class="line">          84.04504505,  84.14414414],</span><br><span class="line">        [ 84.24324324,  84.34234234,  84.44144144,  84.54054054,</span><br><span class="line">          84.63963964,  84.73873874,  84.83783784,  84.93693694,</span><br><span class="line">          85.03603604,  85.13513514],</span><br><span class="line">        [ 85.23423423,  85.33333333,  85.43243243,  85.53153153,</span><br><span class="line">          85.63063063,  85.72972973,  85.82882883,  85.92792793,</span><br><span class="line">          86.02702703,  86.12612613],</span><br><span class="line">        [ 86.22522523,  86.32432432,  86.42342342,  86.52252252,</span><br><span class="line">          86.62162162,  86.72072072,  86.81981982,  86.91891892,</span><br><span class="line">          87.01801802,  87.11711712],</span><br><span class="line">        [ 87.21621622,  87.31531532,  87.41441441,  87.51351351,</span><br><span class="line">          87.61261261,  87.71171171,  87.81081081,  87.90990991,</span><br><span class="line">          88.00900901,  88.10810811],</span><br><span class="line">        [ 88.20720721,  88.30630631,  88.40540541,  88.5045045 ,</span><br><span class="line">          88.6036036 ,  88.7027027 ,  88.8018018 ,  88.9009009 ,</span><br><span class="line">          89.        ,  89.0990991 ],</span><br><span class="line">        [ 89.1981982 ,  89.2972973 ,  89.3963964 ,  89.4954955 ,</span><br><span class="line">          89.59459459,  89.69369369,  89.79279279,  89.89189189,</span><br><span class="line">          89.99099099,  90.09009009],</span><br><span class="line">        [ 90.18918919,  90.28828829,  90.38738739,  90.48648649,</span><br><span class="line">          90.58558559,  90.68468468,  90.78378378,  90.88288288,</span><br><span class="line">          90.98198198,  91.08108108],</span><br><span class="line">        [ 91.18018018,  91.27927928,  91.37837838,  91.47747748,</span><br><span class="line">          91.57657658,  91.67567568,  91.77477477,  91.87387387,</span><br><span class="line">          91.97297297,  92.07207207],</span><br><span class="line">        [ 92.17117117,  92.27027027,  92.36936937,  92.46846847,</span><br><span class="line">          92.56756757,  92.66666667,  92.76576577,  92.86486486,</span><br><span class="line">          92.96396396,  93.06306306],</span><br><span class="line">        [ 93.16216216,  93.26126126,  93.36036036,  93.45945946,</span><br><span class="line">          93.55855856,  93.65765766,  93.75675676,  93.85585586,</span><br><span class="line">          93.95495495,  94.05405405],</span><br><span class="line">        [ 94.15315315,  94.25225225,  94.35135135,  94.45045045,</span><br><span class="line">          94.54954955,  94.64864865,  94.74774775,  94.84684685,</span><br><span class="line">          94.94594595,  95.04504505],</span><br><span class="line">        [ 95.14414414,  95.24324324,  95.34234234,  95.44144144,</span><br><span class="line">          95.54054054,  95.63963964,  95.73873874,  95.83783784,</span><br><span class="line">          95.93693694,  96.03603604],</span><br><span class="line">        [ 96.13513514,  96.23423423,  96.33333333,  96.43243243,</span><br><span class="line">          96.53153153,  96.63063063,  96.72972973,  96.82882883,</span><br><span class="line">          96.92792793,  97.02702703],</span><br><span class="line">        [ 97.12612613,  97.22522523,  97.32432432,  97.42342342,</span><br><span class="line">          97.52252252,  97.62162162,  97.72072072,  97.81981982,</span><br><span class="line">          97.91891892,  98.01801802],</span><br><span class="line">        [ 98.11711712,  98.21621622,  98.31531532,  98.41441441,</span><br><span class="line">          98.51351351,  98.61261261,  98.71171171,  98.81081081,</span><br><span class="line">          98.90990991,  99.00900901],</span><br><span class="line">        [ 99.10810811,  99.20720721,  99.30630631,  99.40540541,</span><br><span class="line">          99.5045045 ,  99.6036036 ,  99.7027027 ,  99.8018018 ,</span><br><span class="line">          99.9009009 , 100.        ]]),</span><br><span class="line"> &apos;name&apos;: array([&apos;1-100的1000个等差数列&apos;], dtype=&apos;&lt;U15&apos;)&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmat[<span class="string">'name'</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;1-100的1000个等差数列&apos;</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmat[<span class="string">'X'</span>].shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 10)</span><br></pre></td></tr></table></figure></div><h3 id="扩展Python对象的序列化和反序列化"><a href="#扩展Python对象的序列化和反序列化" class="headerlink" title="扩展Python对象的序列化和反序列化"></a>扩展Python对象的序列化和反序列化</h3><ul><li>pickle.dump(obj,fp) 将对象序列化成字节流，并写入到fp的文件对象中</li><li>pickle.load(fp) 将字节流反序列化成对象</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ss</span><span class="params">(name, age)</span>:</span></span><br><span class="line">    print(name, age)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;function __main__.ss(name, age)&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 ss函数对象保存到文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ss.func'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(ss, f)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载 ss.func的文件,获取ss函数对象</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ss.func'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s_func = pickle.load(f)</span><br><span class="line">    print(s_func)</span><br><span class="line">s_func(<span class="string">'disen'</span>, <span class="string">'20'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;function ss at 0x7f66bb6e16a8&gt;</span><br><span class="line">disen 20</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将data的ndarray对象存储到data.nd文件中</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.nd'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(data, f)</span><br><span class="line">    print(<span class="string">'写入成功'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写入成功</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　将data数据从data.nd中加载出来</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.nd'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = pickle.load(f)</span><br><span class="line">    print(d.shape)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100, 10)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;io的保存与加载&quot;&gt;&lt;a href=&quot;#io的保存与加载&quot; class=&quot;headerlink&quot; title=&quot;io的保存与加载&quot;&gt;&lt;/a&gt;io的保存与加载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;scipy.io.savemat()&lt;/li&gt;
&lt;li&gt;scipy.io.loadmat()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scipy的图片处理</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/scipy%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    <id>https://www.xuhuiblog.cn/数据分析/scipy的图片处理/</id>
    <published>2019-05-06T11:23:14.000Z</published>
    <updated>2019-05-17T12:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib</span><br></pre></td></tr></table></figure></div><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moon = plt.imread(<span class="string">'moonlanding.png'</span>)  <span class="comment"># 返回ndarray</span></span><br><span class="line">plt.imshow(moon)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe28d47d128&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_1_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moon.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(474, 630)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(moon, cmap=<span class="string">'gray'</span>)  <span class="comment"># 灰度显示</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe28d23db00&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_3_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moon[:<span class="number">2</span>, :<span class="number">2</span>] <span class="comment"># png格式的图片内容，数值是小数位的</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[0.04705882, 0.        ],</span><br><span class="line">       [0.        , 0.        ]], dtype=float32)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片的消噪，使用傅里叶变换实现</span></span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft2, ifft2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将时域的数据转成频域的数据</span></span><br><span class="line">fft_moon = fft2(moon)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出高频次的数据，并且置为0 -&gt; 消噪</span></span><br><span class="line">fft_moon = np.where(np.abs(fft_moon) &gt; <span class="number">8e2</span>, <span class="number">0</span>, fft_moon)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将频域的数据转成时域的数据，并提取复数中的实数部分</span></span><br><span class="line">ifft_moon = np.real(ifft2(fft_moon))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度显示</span></span><br><span class="line">plt.imshow(ifft_moon, cmap=<span class="string">'gray'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe28c293208&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_6_2.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> face</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_img = face()  <span class="comment"># gray=True 表示返回灰度处理的的图片</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(face_img)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe27d46abe0&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_9_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_img.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(768, 1024, 3)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_img[:<span class="number">5</span>, :<span class="number">5</span>] <span class="comment"># 每行的三个数据表示RGB的 0-255 的颜色值， 图片的格式是 .jpg</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">array([[[121, 112, 131],</span><br><span class="line">        [138, 129, 148],</span><br><span class="line">        [153, 144, 165],</span><br><span class="line">        [155, 146, 167],</span><br><span class="line">        [155, 146, 167]],</span><br><span class="line"></span><br><span class="line">       [[ 89,  82, 100],</span><br><span class="line">        [110, 103, 121],</span><br><span class="line">        [130, 122, 143],</span><br><span class="line">        [137, 129, 150],</span><br><span class="line">        [141, 133, 154]],</span><br><span class="line"></span><br><span class="line">       [[ 73,  66,  84],</span><br><span class="line">        [ 94,  87, 105],</span><br><span class="line">        [115, 108, 126],</span><br><span class="line">        [123, 115, 136],</span><br><span class="line">        [127, 119, 140]],</span><br><span class="line"></span><br><span class="line">       [[ 81,  77,  94],</span><br><span class="line">        [ 97,  93, 110],</span><br><span class="line">        [113, 109, 126],</span><br><span class="line">        [120, 115, 135],</span><br><span class="line">        [125, 120, 140]],</span><br><span class="line"></span><br><span class="line">       [[103,  99, 114],</span><br><span class="line">        [113, 109, 126],</span><br><span class="line">        [123, 119, 136],</span><br><span class="line">        [132, 127, 147],</span><br><span class="line">        [142, 137, 157]]], dtype=uint8)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大化或最小化或平均值等方式灰度处理</span></span><br><span class="line">plt.imshow(face_img.max(axis=<span class="number">-1</span>), cmap=<span class="string">'gray'</span>)  <span class="comment"># 最大</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe27d488710&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_12_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(face_img.min(axis=<span class="number">-1</span>), cmap=<span class="string">'gray'</span>) <span class="comment"># 最小</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe27d3e1ac8&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_13_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(face_img.mean(axis=<span class="number">-1</span>), cmap=<span class="string">'gray'</span>) <span class="comment"># 平均</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.image.AxesImage at 0x7fe27cd41438&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的图片处理/output_14_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_img.mean(axis=<span class="number">-1</span>).shape   <span class="comment"># 降维</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(768, 1024)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weight = [<span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.3</span>]  <span class="comment"># 加权平均方式实现降维</span></span><br><span class="line">face_img.dot(weight).shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(768, 1024)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>scipy的积分函数</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/scipy%E7%9A%84%E7%A7%AF%E5%88%86%E5%87%BD%E6%95%B0/"/>
    <id>https://www.xuhuiblog.cn/数据分析/scipy的积分函数/</id>
    <published>2019-05-06T11:21:03.000Z</published>
    <updated>2019-05-06T11:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="通过定积分画一个圆"><a href="#通过定积分画一个圆" class="headerlink" title="通过定积分画一个圆"></a>通过定积分画一个圆</h3><ul><li>f(x)=(1-x^2)^0.5</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="keyword">lambda</span> x: (<span class="number">1</span>-x**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, num=<span class="number">100</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>) <span class="comment"># 设置坐标轴的长宽同比</span></span><br><span class="line">plt.plot(x, y(x), <span class="string">'r--o'</span>, x, -y(x), <span class="string">'b-.x'</span>) <span class="comment"># 画圆</span></span><br><span class="line"><span class="comment"># 由两个半圆组成，每一条线都有线的颜色color，连接线的样式linestyle和连接点的形状marker</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x7f442bf15ba8&gt;,</span><br><span class="line"> &lt;matplotlib.lines.Line2D at 0x7f442bf15da0&gt;]</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/scipy的积分函数/output_2_1.png" alt="png"></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2, error = quad(y, <span class="number">-1</span>, <span class="number">1</span>)   <span class="comment"># error 为偏差</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.5707963267948983</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.pi/<span class="number">2</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.5707963267948966</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas的透视表与交叉表</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas%E7%9A%84%E9%80%8F%E8%A7%86%E8%A1%A8%E4%B8%8E%E4%BA%A4%E5%8F%89%E8%A1%A8/"/>
    <id>https://www.xuhuiblog.cn/数据分析/Pandas的透视表与交叉表/</id>
    <published>2019-05-06T11:19:09.000Z</published>
    <updated>2019-05-17T12:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是透视表"><a href="#什么是透视表" class="headerlink" title="什么是透视表"></a>什么是透视表</h3><ul><li>透视表针对特定的列进行分组同时聚合计算，相当于groupby()与聚合函数的组合使用</li><li>透视表注重的是数据排列与聚合计算，默认使用平均值做聚合计算</li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure></div><h3 id="行透视表"><a href="#行透视表" class="headerlink" title="行透视表"></a>行透视表</h3><ul><li>df.pivot_table(index=)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = DataFrame(&#123;</span><br><span class="line">    <span class="string">'sex'</span>: np.random.choice([<span class="string">'男'</span>, <span class="string">'女'</span>], size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'smoke'</span>: np.random.choice([<span class="string">'Yes'</span>, <span class="string">'No'</span>], size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'height(cm)'</span>: np.random.randint(<span class="number">160</span>, <span class="number">200</span>, size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'weight(kg)'</span>: np.random.randint(<span class="number">55</span>, <span class="number">100</span>, size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'size(尺)'</span>: np.random.randint(<span class="number">30</span>, <span class="number">40</span>, size=<span class="number">10</span>)</span><br><span class="line">&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>sex</th><br>      <th>smoke</th><br>      <th>height(cm)</th><br>      <th>weight(kg)</th><br>      <th>size(尺)</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>男</td><br>      <td>Yes</td><br>      <td>184</td><br>      <td>93</td><br>      <td>35</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>女</td><br>      <td>No</td><br>      <td>182</td><br>      <td>62</td><br>      <td>33</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>男</td><br>      <td>No</td><br>      <td>171</td><br>      <td>55</td><br>      <td>36</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>男</td><br>      <td>No</td><br>      <td>199</td><br>      <td>75</td><br>      <td>39</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>男</td><br>      <td>Yes</td><br>      <td>186</td><br>      <td>75</td><br>      <td>36</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>男</td><br>      <td>No</td><br>      <td>180</td><br>      <td>81</td><br>      <td>30</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>女</td><br>      <td>No</td><br>      <td>178</td><br>      <td>69</td><br>      <td>31</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>男</td><br>      <td>No</td><br>      <td>186</td><br>      <td>74</td><br>      <td>38</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>女</td><br>      <td>Yes</td><br>      <td>194</td><br>      <td>71</td><br>      <td>36</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>男</td><br>      <td>Yes</td><br>      <td>182</td><br>      <td>56</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按是否抽烟、计算平均身高、体重、腰围</span></span><br><span class="line">df.groupby(<span class="string">'smoke'</span>).mean()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>height(cm)</th><br>      <th>weight(kg)</th><br>      <th>size(尺)</th><br>    </tr><br>    <tr><br>      <th>smoke</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>No</th><br>      <td>182.666667</td><br>      <td>69.333333</td><br>      <td>34.50</td><br>    </tr><br>    <tr><br>      <th>Yes</th><br>      <td>186.500000</td><br>      <td>73.750000</td><br>      <td>36.25</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index=<span class="string">'smoke'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>height(cm)</th><br>      <th>size(尺)</th><br>      <th>weight(kg)</th><br>    </tr><br>    <tr><br>      <th>smoke</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>No</th><br>      <td>182.666667</td><br>      <td>34.50</td><br>      <td>69.333333</td><br>    </tr><br>    <tr><br>      <th>Yes</th><br>      <td>186.500000</td><br>      <td>36.25</td><br>      <td>73.750000</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否吸烟和不同的性别的平均的身高、体重、腰围的数据</span></span><br><span class="line">df.groupby([<span class="string">'smoke'</span>, <span class="string">'sex'</span>]).mean()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th></th><br>      <th>height(cm)</th><br>      <th>weight(kg)</th><br>      <th>size(尺)</th><br>    </tr><br>    <tr><br>      <th>smoke</th><br>      <th>sex</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th rowspan="2" valign="top">No</th><br>      <th>女</th><br>      <td>180.0</td><br>      <td>65.500000</td><br>      <td>32.000000</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>184.0</td><br>      <td>71.250000</td><br>      <td>35.750000</td><br>    </tr><br>    <tr><br>      <th rowspan="2" valign="top">Yes</th><br>      <th>女</th><br>      <td>194.0</td><br>      <td>71.000000</td><br>      <td>36.000000</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>184.0</td><br>      <td>74.666667</td><br>      <td>36.333333</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index=[<span class="string">'smoke'</span>, <span class="string">'sex'</span>], aggfunc=<span class="string">'max'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th></th><br>      <th>height(cm)</th><br>      <th>size(尺)</th><br>      <th>weight(kg)</th><br>    </tr><br>    <tr><br>      <th>smoke</th><br>      <th>sex</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th rowspan="2" valign="top">No</th><br>      <th>女</th><br>      <td>182</td><br>      <td>33</td><br>      <td>69</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>199</td><br>      <td>39</td><br>      <td>81</td><br>    </tr><br>    <tr><br>      <th rowspan="2" valign="top">Yes</th><br>      <th>女</th><br>      <td>194</td><br>      <td>36</td><br>      <td>71</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>186</td><br>      <td>38</td><br>      <td>93</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="列透视表"><a href="#列透视表" class="headerlink" title="列透视表"></a>列透视表</h3><ul><li>df.pivot_table(columns=)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(columns=<span class="string">'smoke'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>smoke</th><br>      <th>No</th><br>      <th>Yes</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>height(cm)</th><br>      <td>182.666667</td><br>      <td>186.50</td><br>    </tr><br>    <tr><br>      <th>size(尺)</th><br>      <td>34.500000</td><br>      <td>36.25</td><br>    </tr><br>    <tr><br>      <th>weight(kg)</th><br>      <td>69.333333</td><br>      <td>73.75</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby([<span class="string">'smoke'</span>]).mean().transpose()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>smoke</th><br>      <th>No</th><br>      <th>Yes</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>height(cm)</th><br>      <td>182.666667</td><br>      <td>186.50</td><br>    </tr><br>    <tr><br>      <th>weight(kg)</th><br>      <td>69.333333</td><br>      <td>73.75</td><br>    </tr><br>    <tr><br>      <th>size(尺)</th><br>      <td>34.500000</td><br>      <td>36.25</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(columns=[<span class="string">'smoke'</span>, <span class="string">'sex'</span>])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">            smoke  sex</span><br><span class="line">height(cm)  No     女      180.000000</span><br><span class="line">                   男      184.000000</span><br><span class="line">            Yes    女      194.000000</span><br><span class="line">                   男      184.000000</span><br><span class="line">weight(kg)  No     女       65.500000</span><br><span class="line">                   男       71.250000</span><br><span class="line">            Yes    女       71.000000</span><br><span class="line">                   男       74.666667</span><br><span class="line">size(尺)     No     女       32.000000</span><br><span class="line">                   男       35.750000</span><br><span class="line">            Yes    女       36.000000</span><br><span class="line">                   男       36.333333</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div><h3 id="行列同时透视"><a href="#行列同时透视" class="headerlink" title="行列同时透视"></a>行列同时透视</h3><ul><li>df.pivot_table(index, columns)</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index=<span class="string">'sex'</span>, columns=<span class="string">'smoke'</span>, aggfunc=<span class="string">'min'</span>)  <span class="comment"># aggfunc指定聚合函数</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead tr th {<br>    text-align: left;<br>}<br>.dataframe thead tr:last-of-type th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr><br>      <th></th><br>      <th colspan="2" halign="left">height(cm)</th><br>      <th colspan="2" halign="left">size(尺)</th><br>      <th colspan="2" halign="left">weight(kg)</th><br>    </tr><br>    <tr><br>      <th>smoke</th><br>      <th>No</th><br>      <th>Yes</th><br>      <th>No</th><br>      <th>Yes</th><br>      <th>No</th><br>      <th>Yes</th><br>    </tr><br>    <tr><br>      <th>sex</th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>女</th><br>      <td>178</td><br>      <td>194</td><br>      <td>31</td><br>      <td>36</td><br>      <td>62</td><br>      <td>71</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>171</td><br>      <td>182</td><br>      <td>30</td><br>      <td>35</td><br>      <td>55</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><ul><li>pd.cross(index, columns) 通过不同表的特征数据进行交叉显示</li><li>是一种特殊的透视表,聚合函数只是用来统计数量</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.crosstab(df[<span class="string">'sex'</span>],df[<span class="string">'smoke'</span>])</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>smoke</th><br>      <th>No</th><br>      <th>Yes</th><br>    </tr><br>    <tr><br>      <th>sex</th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>女</th><br>      <td>2</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>4</td><br>      <td>3</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># margins=True 小计</span></span><br><span class="line">pd.crosstab(df[<span class="string">'sex'</span>],df[<span class="string">'smoke'</span>], margins=<span class="literal">True</span>, margins_name=<span class="string">'小计'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>smoke</th><br>      <th>No</th><br>      <th>Yes</th><br>      <th>小计</th><br>    </tr><br>    <tr><br>      <th>sex</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>女</th><br>      <td>2</td><br>      <td>1</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>男</th><br>      <td>4</td><br>      <td>3</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>小计</th><br>      <td>6</td><br>      <td>4</td><br>      <td>10</td><br>    </tr><br>  </tbody><br></table><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是透视表&quot;&gt;&lt;a href=&quot;#什么是透视表&quot; class=&quot;headerlink&quot; title=&quot;什么是透视表&quot;&gt;&lt;/a&gt;什么是透视表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;透视表针对特定的列进行分组同时聚合计算，相当于groupby()与聚合函数的组合使用&lt;/li&gt;
&lt;li&gt;透视表注重的是数据排列与聚合计算，默认使用平均值做聚合计算&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Pandas的数据加载</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD/"/>
    <id>https://www.xuhuiblog.cn/数据分析/Pandas的数据加载/</id>
    <published>2019-05-06T05:29:58.000Z</published>
    <updated>2019-05-17T12:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure></div><h3 id="加载文本数据"><a href="#加载文本数据" class="headerlink" title="加载文本数据"></a>加载文本数据</h3><ul><li>pd.read_csv()</li><li>pd.read_table()</li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载person.csv问价，分割符是‘；’</span></span><br><span class="line"><span class="comment"># sep 指定分隔符</span></span><br><span class="line">persons = pd.read_csv(<span class="string">'data2/persons.csv'</span>, sep=<span class="string">';'</span>)</span><br><span class="line">persons.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Unnamed: 0</th><br>      <th>age</th><br>      <th>height</th><br>      <th>id</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>22</td><br>      <td>159</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1</td><br>      <td>19</td><br>      <td>191</td><br>      <td>2</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2</td><br>      <td>24</td><br>      <td>189</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>3</td><br>      <td>21</td><br>      <td>185</td><br>      <td>4</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>4</td><br>      <td>20</td><br>      <td>231</td><br>      <td>5</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">persons.drop(columns=<span class="string">'Unnamed: 0'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">persons.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>age</th><br>      <th>height</th><br>      <th>id</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>22</td><br>      <td>159</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>19</td><br>      <td>191</td><br>      <td>2</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>24</td><br>      <td>189</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>21</td><br>      <td>185</td><br>      <td>4</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>20</td><br>      <td>231</td><br>      <td>5</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将列按 id, age, height的顺序显示</span></span><br><span class="line">persons.take([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>], axis=<span class="number">1</span>).head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>age</th><br>      <th>height</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>1</td><br>      <td>22</td><br>      <td>159</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2</td><br>      <td>19</td><br>      <td>191</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>3</td><br>      <td>24</td><br>      <td>189</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>4</td><br>      <td>21</td><br>      <td>185</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>5</td><br>      <td>20</td><br>      <td>231</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载seeds.tsv文件， 分隔符是'\t'</span></span><br><span class="line"><span class="comment"># header=None 表示数据是无标题的</span></span><br><span class="line">seeds = pd.read_csv(<span class="string">'data2/seeds.tsv'</span>, sep=<span class="string">'\t'</span>, header=<span class="literal">None</span>)</span><br><span class="line">seeds.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>0</th><br>      <th>1</th><br>      <th>2</th><br>      <th>3</th><br>      <th>4</th><br>      <th>5</th><br>      <th>6</th><br>      <th>7</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>15.26</td><br>      <td>14.84</td><br>      <td>0.8710</td><br>      <td>5.763</td><br>      <td>3.312</td><br>      <td>2.221</td><br>      <td>5.220</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>14.88</td><br>      <td>14.57</td><br>      <td>0.8811</td><br>      <td>5.554</td><br>      <td>3.333</td><br>      <td>1.018</td><br>      <td>4.956</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>14.29</td><br>      <td>14.09</td><br>      <td>0.9050</td><br>      <td>5.291</td><br>      <td>3.337</td><br>      <td>2.699</td><br>      <td>4.825</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>13.84</td><br>      <td>13.94</td><br>      <td>0.8955</td><br>      <td>5.324</td><br>      <td>3.379</td><br>      <td>2.259</td><br>      <td>4.805</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16.14</td><br>      <td>14.99</td><br>      <td>0.9034</td><br>      <td>5.658</td><br>      <td>3.562</td><br>      <td>1.355</td><br>      <td>5.175</td><br>      <td>Kama</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read_table()默认情况下读取的数据是以\t分隔的</span></span><br><span class="line">seeds2 = pd.read_table(<span class="string">'data2/seeds.tsv'</span>, header=<span class="literal">None</span>)</span><br><span class="line">seeds2.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>0</th><br>      <th>1</th><br>      <th>2</th><br>      <th>3</th><br>      <th>4</th><br>      <th>5</th><br>      <th>6</th><br>      <th>7</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>15.26</td><br>      <td>14.84</td><br>      <td>0.8710</td><br>      <td>5.763</td><br>      <td>3.312</td><br>      <td>2.221</td><br>      <td>5.220</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>14.88</td><br>      <td>14.57</td><br>      <td>0.8811</td><br>      <td>5.554</td><br>      <td>3.333</td><br>      <td>1.018</td><br>      <td>4.956</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>14.29</td><br>      <td>14.09</td><br>      <td>0.9050</td><br>      <td>5.291</td><br>      <td>3.337</td><br>      <td>2.699</td><br>      <td>4.825</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>13.84</td><br>      <td>13.94</td><br>      <td>0.8955</td><br>      <td>5.324</td><br>      <td>3.379</td><br>      <td>2.259</td><br>      <td>4.805</td><br>      <td>Kama</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16.14</td><br>      <td>14.99</td><br>      <td>0.9034</td><br>      <td>5.658</td><br>      <td>3.562</td><br>      <td>1.355</td><br>      <td>5.175</td><br>      <td>Kama</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="加载excel的是数据文件"><a href="#加载excel的是数据文件" class="headerlink" title="加载excel的是数据文件"></a>加载excel的是数据文件</h3><ul><li>pd.read_execl()</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载students.xlsx数据文件</span></span><br><span class="line">students = pd.read_excel(<span class="string">'data2/students.xlsx'</span>)</span><br><span class="line">students.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>name</th><br>      <th>age</th><br>      <th>sex</th><br>      <th>height(cm)</th><br>      <th>weight(kg)</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>1</td><br>      <td>吴果</td><br>      <td>20</td><br>      <td>男</td><br>      <td>165</td><br>      <td>50</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2</td><br>      <td>李平</td><br>      <td>33</td><br>      <td>女</td><br>      <td>158</td><br>      <td>45</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>3</td><br>      <td>王和</td><br>      <td>21</td><br>      <td>男</td><br>      <td>179</td><br>      <td>75</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>4</td><br>      <td>刘言</td><br>      <td>27</td><br>      <td>男</td><br>      <td>180</td><br>      <td>80</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>5</td><br>      <td>王平</td><br>      <td>20</td><br>      <td>女</td><br>      <td>164</td><br>      <td>82</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将students的id列设置为行索引</span></span><br><span class="line">students.set_index(<span class="string">'id'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>name</th><br>      <th>age</th><br>      <th>sex</th><br>      <th>height(cm)</th><br>      <th>weight(kg)</th><br>    </tr><br>    <tr><br>      <th>id</th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>1</th><br>      <td>吴果</td><br>      <td>20</td><br>      <td>男</td><br>      <td>165</td><br>      <td>50</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>李平</td><br>      <td>33</td><br>      <td>女</td><br>      <td>158</td><br>      <td>45</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>王和</td><br>      <td>21</td><br>      <td>男</td><br>      <td>179</td><br>      <td>75</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>刘言</td><br>      <td>27</td><br>      <td>男</td><br>      <td>180</td><br>      <td>80</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>王平</td><br>      <td>20</td><br>      <td>女</td><br>      <td>164</td><br>      <td>82</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>宁国柱</td><br>      <td>19</td><br>      <td>男</td><br>      <td>178</td><br>      <td>85</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>刘佳敏</td><br>      <td>25</td><br>      <td>女</td><br>      <td>183</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>张先</td><br>      <td>30</td><br>      <td>女</td><br>      <td>165</td><br>      <td>55</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>刘四七</td><br>      <td>27</td><br>      <td>女</td><br>      <td>170</td><br>      <td>61</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>关小弟</td><br>      <td>29</td><br>      <td>男</td><br>      <td>190</td><br>      <td>94</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="加载sqlite3的数据文件"><a href="#加载sqlite3的数据文件" class="headerlink" title="加载sqlite3的数据文件"></a>加载sqlite3的数据文件</h3><ul><li>pd.read_sql(sql,conn)</li></ul><h4 id="1-连接sqlite3的数据库"><a href="#1-连接sqlite3的数据库" class="headerlink" title="1.连接sqlite3的数据库"></a>1.连接sqlite3的数据库</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite_conn = sqlite3.connect(<span class="string">'data2/persons.db'</span>)</span><br><span class="line">print(<span class="string">'连接成功'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">连接成功</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件中，所有的表信息</span></span><br><span class="line">pd.read_sql(<span class="string">'select * from sqlite_master'</span>, sqlite_conn)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>type</th><br>      <th>name</th><br>      <th>tbl_name</th><br>      <th>rootpage</th><br>      <th>sql</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>table</td><br>      <td>person</td><br>      <td>person</td><br>      <td>2</td><br>      <td>CREATE TABLE person(id,name,sex,age)</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 db文件中person表的数据</span></span><br><span class="line">pd.read_sql(<span class="string">'select * from person'</span>, sqlite_conn)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>name</th><br>      <th>sex</th><br>      <th>age</th><br>    </tr><br>  </thead><br>  <tbody><br>  </tbody><br></table><br></div><h4 id="sqlites3的数据库特点"><a href="#sqlites3的数据库特点" class="headerlink" title="sqlites3的数据库特点"></a>sqlites3的数据库特点</h4><ul><li>sqlite3主要用于小型设备中，如手机、平板、手表等智能设备上，也可以用于前端浏览器存储数据</li><li>sqlite3 支持通用的sql语句</li><li>sqlite3 没有特定的数据类型，具体的数据类型是根据开发语言来指定</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert_sql = <span class="string">'insert into person(id, name, age, sex) values(%s, %s, %s, %s)'</span></span><br><span class="line">c = sqlite_conn.cursor()</span><br><span class="line"><span class="comment"># execute()函数中，不存在args参数</span></span><br><span class="line">c.execute(insert_sql % (<span class="number">2</span>, <span class="string">"'jack'"</span>, <span class="number">20</span>, <span class="string">"'女'"</span>))</span><br><span class="line">sqlite_conn.commit()</span><br><span class="line">print(<span class="string">'--insert ok--'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--insert ok--</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1 = pd.read_sql(<span class="string">'select * from person'</span>, sqlite_conn)</span><br><span class="line">p1</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>name</th><br>      <th>sex</th><br>      <th>age</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2</td><br>      <td>jack</td><br>      <td>女</td><br>      <td>20</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将第二行数据 的id修改为3, name改为 rose, sex改为 女, age 改为19</span></span><br><span class="line">p1.loc[<span class="number">1</span>] = [<span class="number">3</span>, <span class="string">'rose'</span>, <span class="string">'女'</span>, <span class="number">19</span>]</span><br><span class="line">p1</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>name</th><br>      <th>sex</th><br>      <th>age</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2</td><br>      <td>jack</td><br>      <td>女</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>3</td><br>      <td>rose</td><br>      <td>女</td><br>      <td>19</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将修改后的DataFrame保存到数据库中</span></span><br><span class="line"><span class="comment"># if_exists = &#123;'fail', 'replace', 'append'&#125;</span></span><br><span class="line"><span class="comment"># index=False 不存储索引</span></span><br><span class="line">p1.to_sql(<span class="string">'person'</span>, sqlite_conn, if_exists=<span class="string">'replace'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_sql(<span class="string">'select * from person'</span>, sqlite_conn)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>id</th><br>      <th>name</th><br>      <th>sex</th><br>      <th>age</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2</td><br>      <td>jack</td><br>      <td>女</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>3</td><br>      <td>rose</td><br>      <td>女</td><br>      <td>19</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="加载mysql数据库中数据"><a href="#加载mysql数据库中数据" class="headerlink" title="加载mysql数据库中数据"></a>加载mysql数据库中数据</h3><ul><li>sqlalchemy库中create_engine创建连接， 不能直接使用pymysql</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dialect[+driver]://user:password@host/dbname[?key=value..]</span></span><br><span class="line">conn = create_engine(<span class="string">"mysql+pymysql://root:xuhui19951203@localhost/stu"</span>,</span><br><span class="line">                     encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(<span class="string">'--连接MySQL数据库成功--'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--连接MySQL数据库成功--</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_sql(<span class="string">'select * from Student'</span>, conn)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>sn</th><br>      <th>name</th><br>      <th>age</th><br>      <th>sex</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>01</td><br>      <td>赵雷</td><br>      <td>1990-01-01</td><br>      <td>男</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>02</td><br>      <td>钱电</td><br>      <td>1990-12-21</td><br>      <td>男</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>03</td><br>      <td>孙风</td><br>      <td>1990-05-20</td><br>      <td>男</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>04</td><br>      <td>李云</td><br>      <td>1990-08-06</td><br>      <td>男</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>05</td><br>      <td>周梅</td><br>      <td>1991-12-01</td><br>      <td>女</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>06</td><br>      <td>吴兰</td><br>      <td>1992-03-01</td><br>      <td>女</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>07</td><br>      <td>郑竹</td><br>      <td>1989-08-17</td><br>      <td>女</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>08</td><br>      <td>王菊</td><br>      <td>1990-01-20</td><br>      <td>女</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="加载网络数据"><a href="#加载网络数据" class="headerlink" title="加载网络数据"></a>加载网络数据</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://raw.githubusercontent.com/datasets/investor-flow-of-funds-us/master/data/weekly.csv'</span></span><br><span class="line">weekly = pd.read_csv(url)</span><br><span class="line">weekly.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Date</th><br>      <th>Total Equity</th><br>      <th>Domestic Equity</th><br>      <th>World Equity</th><br>      <th>Hybrid</th><br>      <th>Total Bond</th><br>      <th>Taxable Bond</th><br>      <th>Municipal Bond</th><br>      <th>Total</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2012-12-05</td><br>      <td>-7426</td><br>      <td>-6060</td><br>      <td>-1367</td><br>      <td>-74</td><br>      <td>5317</td><br>      <td>4210</td><br>      <td>1107</td><br>      <td>-2183</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2012-12-12</td><br>      <td>-8783</td><br>      <td>-7520</td><br>      <td>-1263</td><br>      <td>123</td><br>      <td>1818</td><br>      <td>1598</td><br>      <td>219</td><br>      <td>-6842</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2012-12-19</td><br>      <td>-5496</td><br>      <td>-5470</td><br>      <td>-26</td><br>      <td>-73</td><br>      <td>103</td><br>      <td>3472</td><br>      <td>-3369</td><br>      <td>-5466</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2012-12-26</td><br>      <td>-4451</td><br>      <td>-4076</td><br>      <td>-375</td><br>      <td>550</td><br>      <td>2610</td><br>      <td>3333</td><br>      <td>-722</td><br>      <td>-1291</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>2013-01-02</td><br>      <td>-11156</td><br>      <td>-9622</td><br>      <td>-1533</td><br>      <td>-158</td><br>      <td>2383</td><br>      <td>2103</td><br>      <td>280</td><br>      <td>-8931</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weekly.shape</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(44, 9)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;加载文本数据&quot;&gt;&lt;a href=&quot;#加载文本数据&quot; class=&quot;headerlink&quot; title=&quot;加载文本数据&quot;&gt;&lt;/a&gt;加载文本数据&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pd.read_csv()&lt;/li&gt;
&lt;li&gt;pd.read_table()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>美国2012年大选政治献金数据分析</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%BE%8E%E5%9B%BD2012%E5%B9%B4%E5%A4%A7%E9%80%89%E6%94%BF%E6%B2%BB%E7%8C%AE%E9%87%91%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://www.xuhuiblog.cn/数据分析/美国2012年大选政治献金数据分析/</id>
    <published>2019-05-06T05:26:39.000Z</published>
    <updated>2019-05-17T12:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>导入包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame, Index</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><a id="more"></a><p>方便大家操作，将月份和参选人以及所在政党进行定义</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">months = &#123;<span class="string">'JAN'</span> : <span class="number">1</span>, <span class="string">'FEB'</span> : <span class="number">2</span>, <span class="string">'MAR'</span> : <span class="number">3</span>, <span class="string">'APR'</span> : <span class="number">4</span>, <span class="string">'MAY'</span> : <span class="number">5</span>, <span class="string">'JUN'</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="string">'JUL'</span> : <span class="number">7</span>, <span class="string">'AUG'</span> : <span class="number">8</span>, <span class="string">'SEP'</span> : <span class="number">9</span>, <span class="string">'OCT'</span>: <span class="number">10</span>, <span class="string">'NOV'</span>: <span class="number">11</span>, <span class="string">'DEC'</span> : <span class="number">12</span>&#125;</span><br><span class="line"><span class="comment"># 候选人</span></span><br><span class="line">of_interest = [<span class="string">'Obama, Barack'</span>, <span class="string">'Romney, Mitt'</span>, <span class="string">'Santorum, Rick'</span>, </span><br><span class="line">               <span class="string">'Paul, Ron'</span>, <span class="string">'Gingrich, Newt'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 候选人和所在政党的映射字典</span></span><br><span class="line">parties = &#123;</span><br><span class="line">  <span class="string">'Bachmann, Michelle'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Romney, Mitt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Obama, Barack'</span>: <span class="string">'Democrat'</span>,</span><br><span class="line">  <span class="string">"Roemer, Charles E. 'Buddy' III"</span>: <span class="string">'Reform'</span>,</span><br><span class="line">  <span class="string">'Pawlenty, Timothy'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Johnson, Gary Earl'</span>: <span class="string">'Libertarian'</span>,</span><br><span class="line">  <span class="string">'Paul, Ron'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Santorum, Rick'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Cain, Herman'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Gingrich, Newt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'McCotter, Thaddeus G'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Huntsman, Jon'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">  <span class="string">'Perry, Rick'</span>: <span class="string">'Republican'</span>           </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>读取文件</p><p>查看文件样式以及基本信息</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election = pd.read_csv(<span class="string">'美国2012年大选政治献金数据分析/usa_election.txt'</span>, low_memory=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cmte_id</th><br>      <th>cand_id</th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_city</th><br>      <th>contbr_st</th><br>      <th>contbr_zip</th><br>      <th>contbr_employer</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>      <th>contb_receipt_dt</th><br>      <th>receipt_desc</th><br>      <th>memo_cd</th><br>      <th>memo_text</th><br>      <th>form_tp</th><br>      <th>file_num</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>20-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>50.0</td><br>      <td>23-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>SMITH, LANIER</td><br>      <td>LANETT</td><br>      <td>AL</td><br>      <td>368633403</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>250.0</td><br>      <td>05-JUL-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>749073</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>BLEVINS, DARONDA</td><br>      <td>PIGGOTT</td><br>      <td>AR</td><br>      <td>724548253</td><br>      <td>NONE</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>01-AUG-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>749073</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>WARDENBURG, HAROLD</td><br>      <td>HOT SPRINGS NATION</td><br>      <td>AR</td><br>      <td>719016467</td><br>      <td>NONE</td><br>      <td>RETIRED</td><br>      <td>300.0</td><br>      <td>20-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>    </tr><br>  </tbody><br></table><br></div><p>【知识点】使用map函数+字典，新建一列各个候选人’cand_nm’ 所在党派party</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'cand_nm'</span>].unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;Bachmann, Michelle&apos;, &apos;Romney, Mitt&apos;, &apos;Obama, Barack&apos;,</span><br><span class="line">       &quot;Roemer, Charles E. &apos;Buddy&apos; III&quot;, &apos;Pawlenty, Timothy&apos;,</span><br><span class="line">       &apos;Johnson, Gary Earl&apos;, &apos;Paul, Ron&apos;, &apos;Santorum, Rick&apos;,</span><br><span class="line">       &apos;Cain, Herman&apos;, &apos;Gingrich, Newt&apos;, &apos;McCotter, Thaddeus G&apos;,</span><br><span class="line">       &apos;Huntsman, Jon&apos;, &apos;Perry, Rick&apos;], dtype=object)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'party'</span>] = election[<span class="string">'cand_nm'</span>].map(parties)</span><br><span class="line">election.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cmte_id</th><br>      <th>cand_id</th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_city</th><br>      <th>contbr_st</th><br>      <th>contbr_zip</th><br>      <th>contbr_employer</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>      <th>contb_receipt_dt</th><br>      <th>receipt_desc</th><br>      <th>memo_cd</th><br>      <th>memo_text</th><br>      <th>form_tp</th><br>      <th>file_num</th><br>      <th>party</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>20-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>50.0</td><br>      <td>23-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>SMITH, LANIER</td><br>      <td>LANETT</td><br>      <td>AL</td><br>      <td>368633403</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>250.0</td><br>      <td>05-JUL-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>749073</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>BLEVINS, DARONDA</td><br>      <td>PIGGOTT</td><br>      <td>AR</td><br>      <td>724548253</td><br>      <td>NONE</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>01-AUG-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>749073</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>WARDENBURG, HAROLD</td><br>      <td>HOT SPRINGS NATION</td><br>      <td>AR</td><br>      <td>719016467</td><br>      <td>NONE</td><br>      <td>RETIRED</td><br>      <td>300.0</td><br>      <td>20-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>      <td>Republican</td><br>    </tr><br>  </tbody><br></table><br></div><p>查看单独一行，是否加上了’party’一列</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.head(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cmte_id</th><br>      <th>cand_id</th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_city</th><br>      <th>contbr_st</th><br>      <th>contbr_zip</th><br>      <th>contbr_employer</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>      <th>contb_receipt_dt</th><br>      <th>receipt_desc</th><br>      <th>memo_cd</th><br>      <th>memo_text</th><br>      <th>form_tp</th><br>      <th>file_num</th><br>      <th>party</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>20-JUN-11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>      <td>Republican</td><br>    </tr><br>  </tbody><br></table><br></div><p>使用np.unique()函数查看colums：party这一列中有哪些元素</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'party'</span>].unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;Republican&apos;, &apos;Democrat&apos;, &apos;Reform&apos;, &apos;Libertarian&apos;], dtype=object)</span><br></pre></td></tr></table></figure></div><p>使用Series.value_counts()函数，统计party列中各个元素出现次数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'party'</span>].value_counts()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Democrat       292400</span><br><span class="line">Republican     237575</span><br><span class="line">Reform           5364</span><br><span class="line">Libertarian       702</span><br><span class="line">Name: party, dtype: int64</span><br></pre></td></tr></table></figure></div><p>【知识点】使用groupby()函数，查看各个党派收到的政治献金总数contb_receipt_amt</p><p>尝试将金额的单位修改为 ‘百万’</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.groupby(<span class="string">'party'</span>)[<span class="string">'contb_receipt_amt'</span>].sum() / <span class="number">1000000</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">party</span><br><span class="line">Democrat        81.057579</span><br><span class="line">Libertarian      0.413277</span><br><span class="line">Reform           0.339034</span><br><span class="line">Republican     119.225484</span><br><span class="line">Name: contb_receipt_amt, dtype: float64</span><br></pre></td></tr></table></figure></div><p>查看具体每天各个党派收到的政治献金总数contb_receipt_amt<br>使用groupby([多个分组参数])</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.groupby([<span class="string">'contb_receipt_dt'</span>, <span class="string">'party'</span>])[<span class="string">'contb_receipt_amt'</span>].sum()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">contb_receipt_dt  party      </span><br><span class="line">01-APR-11         Reform              50.00</span><br><span class="line">                  Republican       12635.00</span><br><span class="line">01-AUG-11         Democrat        175281.00</span><br><span class="line">                  Libertarian       1000.00</span><br><span class="line">                  Reform            1847.00</span><br><span class="line">                  Republican      234598.46</span><br><span class="line">01-DEC-11         Democrat        651532.82</span><br><span class="line">                  Libertarian        725.00</span><br><span class="line">                  Reform             875.00</span><br><span class="line">                  Republican      486405.96</span><br><span class="line">01-FEB-11         Republican         250.00</span><br><span class="line">01-JAN-11         Republican        8600.00</span><br><span class="line">01-JAN-12         Democrat         58098.80</span><br><span class="line">                  Reform             515.00</span><br><span class="line">                  Republican       75704.72</span><br><span class="line">01-JUL-11         Democrat        165961.00</span><br><span class="line">                  Libertarian       2000.00</span><br><span class="line">                  Reform             100.00</span><br><span class="line">                  Republican      115848.72</span><br><span class="line">01-JUN-11         Democrat        145459.00</span><br><span class="line">                  Libertarian        500.00</span><br><span class="line">                  Reform              50.00</span><br><span class="line">                  Republican      433109.20</span><br><span class="line">01-MAR-11         Republican        1000.00</span><br><span class="line">01-MAY-11         Democrat         82644.00</span><br><span class="line">                  Reform             480.00</span><br><span class="line">                  Republican       28663.87</span><br><span class="line">01-NOV-11         Democrat        122529.87</span><br><span class="line">                  Libertarian       3000.00</span><br><span class="line">                  Reform            1792.00</span><br><span class="line">                                    ...    </span><br><span class="line">30-OCT-11         Reform            3910.00</span><br><span class="line">                  Republican       43913.16</span><br><span class="line">30-SEP-11         Democrat       3373517.24</span><br><span class="line">                  Libertarian        550.00</span><br><span class="line">                  Reform            2050.00</span><br><span class="line">                  Republican     4886331.76</span><br><span class="line">31-AUG-11         Democrat        374387.44</span><br><span class="line">                  Libertarian      10750.00</span><br><span class="line">                  Reform             450.00</span><br><span class="line">                  Republican     1017735.02</span><br><span class="line">31-DEC-11         Democrat       3553072.57</span><br><span class="line">                  Reform             695.00</span><br><span class="line">                  Republican     1094376.72</span><br><span class="line">31-JAN-11         Republican        6000.00</span><br><span class="line">31-JAN-12         Democrat       1418410.31</span><br><span class="line">                  Reform             150.00</span><br><span class="line">                  Republican      869890.41</span><br><span class="line">31-JUL-11         Democrat         20305.00</span><br><span class="line">                  Reform             966.00</span><br><span class="line">                  Republican       12781.02</span><br><span class="line">31-MAR-11         Reform             200.00</span><br><span class="line">                  Republican       62475.00</span><br><span class="line">31-MAY-11         Democrat        351705.66</span><br><span class="line">                  Libertarian        250.00</span><br><span class="line">                  Reform             100.00</span><br><span class="line">                  Republican      301339.80</span><br><span class="line">31-OCT-11         Democrat        204996.87</span><br><span class="line">                  Libertarian       4250.00</span><br><span class="line">                  Reform            3105.00</span><br><span class="line">                  Republican      734601.83</span><br><span class="line">Name: contb_receipt_amt, Length: 1183, dtype: float64</span><br></pre></td></tr></table></figure></div><p>查看日期格式，并将其转换为Pandas的日期格式,通过函数加map方式进行转换</p><p>pd.to_datetime(series_obj)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cmte_id               object</span><br><span class="line">cand_id               object</span><br><span class="line">cand_nm               object</span><br><span class="line">contbr_nm             object</span><br><span class="line">contbr_city           object</span><br><span class="line">contbr_st             object</span><br><span class="line">contbr_zip            object</span><br><span class="line">contbr_employer       object</span><br><span class="line">contbr_occupation     object</span><br><span class="line">contb_receipt_amt    float64</span><br><span class="line">contb_receipt_dt      object</span><br><span class="line">receipt_desc          object</span><br><span class="line">memo_cd               object</span><br><span class="line">memo_text             object</span><br><span class="line">form_tp               object</span><br><span class="line">file_num               int64</span><br><span class="line">party                 object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'contb_receipt_dt'</span>].unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;20-JUN-11&apos;, &apos;23-JUN-11&apos;, &apos;05-JUL-11&apos;, &apos;01-AUG-11&apos;, &apos;21-JUN-11&apos;,</span><br><span class="line">       &apos;22-JUN-11&apos;, &apos;17-JUN-11&apos;, &apos;11-JUL-11&apos;, &apos;08-JUL-11&apos;, &apos;27-JUN-11&apos;,</span><br><span class="line">       &apos;13-JUN-11&apos;, &apos;16-JUN-11&apos;, &apos;18-JUL-11&apos;, &apos;05-AUG-11&apos;, &apos;01-JUL-11&apos;,</span><br><span class="line">       &apos;06-JUL-11&apos;, &apos;13-JUL-11&apos;, &apos;28-JUN-11&apos;, &apos;30-JUN-11&apos;, &apos;08-AUG-11&apos;,</span><br><span class="line">       &apos;15-AUG-11&apos;, &apos;16-AUG-11&apos;, &apos;18-AUG-11&apos;, &apos;24-JUN-11&apos;, &apos;11-OCT-11&apos;,</span><br><span class="line">       &apos;14-JUL-11&apos;, &apos;29-JUN-11&apos;, &apos;18-OCT-11&apos;, &apos;30-SEP-11&apos;, &apos;11-AUG-11&apos;,</span><br><span class="line">       &apos;02-AUG-11&apos;, &apos;14-JUN-11&apos;, &apos;23-AUG-11&apos;, &apos;07-JUL-11&apos;, &apos;25-JUL-11&apos;,</span><br><span class="line">       &apos;21-JUL-11&apos;, &apos;24-OCT-11&apos;, &apos;12-JUL-11&apos;, &apos;28-JUL-11&apos;, &apos;09-SEP-11&apos;,</span><br><span class="line">       &apos;10-NOV-11&apos;, &apos;12-SEP-11&apos;, &apos;04-OCT-11&apos;, &apos;05-DEC-11&apos;, &apos;31-OCT-11&apos;,</span><br><span class="line">       &apos;12-DEC-11&apos;, &apos;29-JUL-11&apos;, &apos;22-JUL-11&apos;, &apos;27-OCT-11&apos;, &apos;28-NOV-11&apos;,</span><br><span class="line">       &apos;26-AUG-11&apos;, &apos;26-SEP-11&apos;, &apos;27-JUL-11&apos;, &apos;28-APR-11&apos;, &apos;31-DEC-11&apos;,</span><br><span class="line">       &apos;29-DEC-11&apos;, &apos;22-NOV-11&apos;, &apos;28-JAN-12&apos;, &apos;29-NOV-11&apos;, &apos;21-AUG-11&apos;,</span><br><span class="line">       &apos;16-MAY-11&apos;, &apos;18-MAY-11&apos;, &apos;12-MAY-11&apos;, &apos;19-MAY-11&apos;, &apos;19-SEP-11&apos;,</span><br><span class="line">       &apos;16-APR-11&apos;, &apos;15-MAY-11&apos;, &apos;15-JUN-11&apos;, &apos;11-SEP-11&apos;, &apos;06-SEP-11&apos;,</span><br><span class="line">       &apos;15-OCT-11&apos;, &apos;20-NOV-11&apos;, &apos;15-DEC-11&apos;, &apos;27-DEC-11&apos;, &apos;02-DEC-11&apos;,</span><br><span class="line">       &apos;06-DEC-11&apos;, &apos;09-DEC-11&apos;, &apos;29-SEP-11&apos;, &apos;28-SEP-11&apos;, &apos;01-SEP-11&apos;,</span><br><span class="line">       &apos;15-SEP-11&apos;, &apos;09-AUG-11&apos;, &apos;16-SEP-11&apos;, &apos;14-SEP-11&apos;, &apos;03-MAY-11&apos;,</span><br><span class="line">       &apos;02-SEP-11&apos;, &apos;07-SEP-11&apos;, &apos;15-JUL-11&apos;, &apos;26-JUL-11&apos;, &apos;25-AUG-11&apos;,</span><br><span class="line">       &apos;02-MAY-11&apos;, &apos;23-JAN-12&apos;, &apos;09-JAN-12&apos;, &apos;11-JAN-12&apos;, &apos;25-JAN-12&apos;,</span><br><span class="line">       &apos;05-JAN-12&apos;, &apos;13-JAN-12&apos;, &apos;20-JAN-12&apos;, &apos;15-JAN-12&apos;, &apos;30-JAN-12&apos;,</span><br><span class="line">       &apos;16-JAN-12&apos;, &apos;04-JAN-12&apos;, &apos;26-JAN-12&apos;, &apos;27-JAN-12&apos;, &apos;10-JAN-12&apos;,</span><br><span class="line">       &apos;12-JAN-12&apos;, &apos;22-JAN-12&apos;, &apos;01-JAN-12&apos;, &apos;30-DEC-11&apos;, &apos;17-DEC-11&apos;,</span><br><span class="line">       &apos;08-NOV-11&apos;, &apos;25-OCT-11&apos;, &apos;17-NOV-11&apos;, &apos;07-NOV-11&apos;, &apos;13-OCT-11&apos;,</span><br><span class="line">       &apos;18-NOV-11&apos;, &apos;22-DEC-11&apos;, &apos;17-JAN-12&apos;, &apos;21-DEC-11&apos;, &apos;07-DEC-11&apos;,</span><br><span class="line">       &apos;29-OCT-11&apos;, &apos;10-OCT-11&apos;, &apos;17-AUG-11&apos;, &apos;24-MAY-11&apos;, &apos;06-JUN-11&apos;,</span><br><span class="line">       &apos;31-MAY-11&apos;, &apos;29-APR-11&apos;, &apos;13-APR-11&apos;, &apos;27-SEP-11&apos;, &apos;17-SEP-11&apos;,</span><br><span class="line">       &apos;30-AUG-11&apos;, &apos;20-SEP-11&apos;, &apos;29-AUG-11&apos;, &apos;11-JUN-11&apos;, &apos;23-MAY-11&apos;,</span><br><span class="line">       &apos;08-SEP-11&apos;, &apos;22-SEP-11&apos;, &apos;22-AUG-11&apos;, &apos;12-AUG-11&apos;, &apos;27-MAY-11&apos;,</span><br><span class="line">       &apos;19-APR-11&apos;, &apos;24-AUG-11&apos;, &apos;19-AUG-11&apos;, &apos;28-AUG-11&apos;, &apos;21-SEP-11&apos;,</span><br><span class="line">       &apos;10-AUG-11&apos;, &apos;20-JUL-11&apos;, &apos;21-NOV-11&apos;, &apos;02-OCT-11&apos;, &apos;19-OCT-11&apos;,</span><br><span class="line">       &apos;18-JAN-12&apos;, &apos;24-JAN-12&apos;, &apos;09-NOV-11&apos;, &apos;14-NOV-11&apos;, &apos;16-DEC-11&apos;,</span><br><span class="line">       &apos;28-OCT-11&apos;, &apos;02-NOV-11&apos;, &apos;25-NOV-11&apos;, &apos;23-DEC-11&apos;, &apos;17-OCT-11&apos;,</span><br><span class="line">       &apos;10-DEC-11&apos;, &apos;01-NOV-11&apos;, &apos;01-DEC-11&apos;, &apos;13-DEC-11&apos;, &apos;30-NOV-11&apos;,</span><br><span class="line">       &apos;20-OCT-11&apos;, &apos;16-NOV-11&apos;, &apos;12-OCT-11&apos;, &apos;15-NOV-11&apos;, &apos;14-DEC-11&apos;,</span><br><span class="line">       &apos;28-DEC-11&apos;, &apos;20-DEC-11&apos;, &apos;03-NOV-11&apos;, &apos;03-JAN-12&apos;, &apos;07-JAN-12&apos;,</span><br><span class="line">       &apos;31-JAN-12&apos;, &apos;19-JAN-12&apos;, &apos;13-SEP-11&apos;, &apos;01-JUN-11&apos;, &apos;11-APR-11&apos;,</span><br><span class="line">       &apos;07-JUN-11&apos;, &apos;02-JAN-12&apos;, &apos;08-JAN-12&apos;, &apos;29-JAN-12&apos;, &apos;08-DEC-11&apos;,</span><br><span class="line">       &apos;19-DEC-11&apos;, &apos;19-JUL-11&apos;, &apos;06-JAN-12&apos;, &apos;21-JAN-12&apos;, &apos;06-OCT-11&apos;,</span><br><span class="line">       &apos;06-NOV-11&apos;, &apos;19-NOV-11&apos;, &apos;27-NOV-11&apos;, &apos;16-OCT-11&apos;, &apos;23-NOV-11&apos;,</span><br><span class="line">       &apos;21-OCT-11&apos;, &apos;23-OCT-11&apos;, &apos;25-DEC-11&apos;, &apos;07-OCT-11&apos;, &apos;04-NOV-11&apos;,</span><br><span class="line">       &apos;05-NOV-11&apos;, &apos;30-OCT-11&apos;, &apos;14-OCT-11&apos;, &apos;04-DEC-11&apos;, &apos;01-OCT-11&apos;,</span><br><span class="line">       &apos;05-OCT-11&apos;, &apos;26-NOV-11&apos;, &apos;03-OCT-11&apos;, &apos;26-DEC-11&apos;, &apos;04-AUG-11&apos;,</span><br><span class="line">       &apos;23-SEP-11&apos;, &apos;31-AUG-11&apos;, &apos;03-AUG-11&apos;, &apos;16-JUL-11&apos;, &apos;14-AUG-11&apos;,</span><br><span class="line">       &apos;05-SEP-11&apos;, &apos;10-SEP-11&apos;, &apos;04-JUL-11&apos;, &apos;24-SEP-11&apos;, &apos;25-SEP-11&apos;,</span><br><span class="line">       &apos;13-MAY-11&apos;, &apos;26-APR-11&apos;, &apos;06-MAY-11&apos;, &apos;17-MAY-11&apos;, &apos;10-JUN-11&apos;,</span><br><span class="line">       &apos;15-APR-11&apos;, &apos;10-MAY-11&apos;, &apos;03-JUN-11&apos;, &apos;12-APR-11&apos;, &apos;05-MAY-11&apos;,</span><br><span class="line">       &apos;09-MAY-11&apos;, &apos;20-APR-11&apos;, &apos;25-APR-11&apos;, &apos;25-JUN-11&apos;, &apos;25-MAY-11&apos;,</span><br><span class="line">       &apos;12-JUN-11&apos;, &apos;07-MAY-11&apos;, &apos;04-MAY-11&apos;, &apos;14-APR-11&apos;, &apos;14-MAY-11&apos;,</span><br><span class="line">       &apos;20-MAY-11&apos;, &apos;11-MAY-11&apos;, &apos;18-JUN-11&apos;, &apos;24-JUL-11&apos;, &apos;14-JAN-12&apos;,</span><br><span class="line">       &apos;11-DEC-11&apos;, &apos;13-NOV-11&apos;, &apos;18-DEC-11&apos;, &apos;24-DEC-11&apos;, &apos;11-NOV-11&apos;,</span><br><span class="line">       &apos;26-OCT-11&apos;, &apos;03-DEC-11&apos;, &apos;08-OCT-11&apos;, &apos;24-NOV-11&apos;, &apos;12-NOV-11&apos;,</span><br><span class="line">       &apos;23-JUL-11&apos;, &apos;20-AUG-11&apos;, &apos;18-SEP-11&apos;, &apos;10-JUL-11&apos;, &apos;07-AUG-11&apos;,</span><br><span class="line">       &apos;13-AUG-11&apos;, &apos;22-APR-11&apos;, &apos;19-JUN-11&apos;, &apos;09-JUN-11&apos;, &apos;08-JUN-11&apos;,</span><br><span class="line">       &apos;26-MAY-11&apos;, &apos;27-APR-11&apos;, &apos;18-APR-11&apos;, &apos;17-APR-11&apos;, &apos;24-APR-11&apos;,</span><br><span class="line">       &apos;21-APR-11&apos;, &apos;04-JUN-11&apos;, &apos;22-MAY-11&apos;, &apos;26-JUN-11&apos;, &apos;28-MAY-11&apos;,</span><br><span class="line">       &apos;01-MAY-11&apos;, &apos;30-APR-11&apos;, &apos;02-JUN-11&apos;, &apos;30-MAY-11&apos;, &apos;29-MAY-11&apos;,</span><br><span class="line">       &apos;05-JUN-11&apos;, &apos;23-APR-11&apos;, &apos;06-AUG-11&apos;, &apos;27-AUG-11&apos;, &apos;21-MAY-11&apos;,</span><br><span class="line">       &apos;03-JUL-11&apos;, &apos;31-JUL-11&apos;, &apos;09-OCT-11&apos;, &apos;22-OCT-11&apos;, &apos;17-JUL-11&apos;,</span><br><span class="line">       &apos;30-JUL-11&apos;, &apos;02-JUL-11&apos;, &apos;08-MAY-11&apos;, &apos;04-SEP-11&apos;, &apos;09-JUL-11&apos;,</span><br><span class="line">       &apos;03-SEP-11&apos;, &apos;05-APR-11&apos;, &apos;04-APR-11&apos;, &apos;08-APR-11&apos;, &apos;10-APR-11&apos;,</span><br><span class="line">       &apos;06-APR-11&apos;, &apos;07-APR-11&apos;, &apos;09-APR-11&apos;, &apos;24-MAR-11&apos;, &apos;07-MAR-11&apos;,</span><br><span class="line">       &apos;05-MAR-11&apos;, &apos;16-MAR-11&apos;, &apos;04-MAR-11&apos;, &apos;15-MAR-11&apos;, &apos;17-MAR-11&apos;,</span><br><span class="line">       &apos;03-MAR-11&apos;, &apos;06-MAR-11&apos;, &apos;10-MAR-11&apos;, &apos;08-MAR-11&apos;, &apos;25-MAR-11&apos;,</span><br><span class="line">       &apos;22-MAR-11&apos;, &apos;12-MAR-11&apos;, &apos;13-MAR-11&apos;, &apos;09-MAR-11&apos;, &apos;11-MAR-11&apos;,</span><br><span class="line">       &apos;29-MAR-11&apos;, &apos;30-MAR-11&apos;, &apos;18-MAR-11&apos;, &apos;20-MAR-11&apos;, &apos;02-MAR-11&apos;,</span><br><span class="line">       &apos;21-MAR-11&apos;, &apos;31-MAR-11&apos;, &apos;03-APR-11&apos;, &apos;14-MAR-11&apos;, &apos;19-MAR-11&apos;,</span><br><span class="line">       &apos;28-MAR-11&apos;, &apos;23-MAR-11&apos;, &apos;02-APR-11&apos;, &apos;26-MAR-11&apos;, &apos;01-APR-11&apos;,</span><br><span class="line">       &apos;09-FEB-11&apos;, &apos;28-FEB-11&apos;, &apos;07-FEB-11&apos;, &apos;27-MAR-11&apos;, &apos;22-FEB-11&apos;,</span><br><span class="line">       &apos;14-JAN-11&apos;, &apos;17-JAN-11&apos;, &apos;17-FEB-11&apos;, &apos;31-JAN-11&apos;, &apos;12-JAN-11&apos;,</span><br><span class="line">       &apos;27-JAN-11&apos;, &apos;29-JAN-11&apos;, &apos;15-JAN-11&apos;, &apos;20-JAN-11&apos;, &apos;21-JAN-11&apos;,</span><br><span class="line">       &apos;11-FEB-11&apos;, &apos;16-FEB-11&apos;, &apos;28-JAN-11&apos;, &apos;18-FEB-11&apos;, &apos;23-FEB-11&apos;,</span><br><span class="line">       &apos;01-FEB-11&apos;, &apos;03-FEB-11&apos;, &apos;04-FEB-11&apos;, &apos;08-FEB-11&apos;, &apos;13-JAN-11&apos;,</span><br><span class="line">       &apos;16-JAN-11&apos;, &apos;12-FEB-11&apos;, &apos;13-FEB-11&apos;, &apos;04-JAN-11&apos;, &apos;10-FEB-11&apos;,</span><br><span class="line">       &apos;24-FEB-11&apos;, &apos;22-JAN-11&apos;, &apos;24-JAN-11&apos;, &apos;26-JAN-11&apos;, &apos;01-JAN-11&apos;,</span><br><span class="line">       &apos;03-JAN-11&apos;, &apos;01-MAR-11&apos;, &apos;15-FEB-11&apos;, &apos;14-FEB-11&apos;, &apos;21-FEB-11&apos;,</span><br><span class="line">       &apos;18-JAN-11&apos;], dtype=object)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_datetime</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="comment"># item -&gt; str:  20-JUN-11</span></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(item, <span class="string">'%d-%b-%y'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">election[<span class="string">'contb_receipt_dt'</span>] = election[<span class="string">'contb_receipt_dt'</span>].map(to_datetime)</span><br><span class="line">election.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cmte_id                      object</span><br><span class="line">cand_id                      object</span><br><span class="line">cand_nm                      object</span><br><span class="line">contbr_nm                    object</span><br><span class="line">contbr_city                  object</span><br><span class="line">contbr_st                    object</span><br><span class="line">contbr_zip                   object</span><br><span class="line">contbr_employer              object</span><br><span class="line">contbr_occupation            object</span><br><span class="line">contb_receipt_amt           float64</span><br><span class="line">contb_receipt_dt     datetime64[ns]</span><br><span class="line">receipt_desc                 object</span><br><span class="line">memo_cd                      object</span><br><span class="line">memo_text                    object</span><br><span class="line">form_tp                      object</span><br><span class="line">file_num                      int64</span><br><span class="line">party                        object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><p>查看是否转换成功</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">election.head(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cmte_id</th><br>      <th>cand_id</th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_city</th><br>      <th>contbr_st</th><br>      <th>contbr_zip</th><br>      <th>contbr_employer</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>      <th>contb_receipt_dt</th><br>      <th>receipt_desc</th><br>      <th>memo_cd</th><br>      <th>memo_text</th><br>      <th>form_tp</th><br>      <th>file_num</th><br>      <th>party</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>C00410118</td><br>      <td>P20002978</td><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>MOBILE</td><br>      <td>AL</td><br>      <td>366010290</td><br>      <td>RETIRED</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>      <td>2011-06-20</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>736166</td><br>      <td>Republican</td><br>    </tr><br>  </tbody><br></table><br></div><p>将时间转换为时间数据类型，根据时间进行排序</p><ul><li>sort_values()按数值排序</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es = election.sort_values(<span class="string">'contb_receipt_dt'</span>)</span><br><span class="line">es.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cmte_id</th><br>      <th>cand_id</th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_city</th><br>      <th>contbr_st</th><br>      <th>contbr_zip</th><br>      <th>contbr_employer</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>      <th>contb_receipt_dt</th><br>      <th>receipt_desc</th><br>      <th>memo_cd</th><br>      <th>memo_text</th><br>      <th>form_tp</th><br>      <th>file_num</th><br>      <th>party</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>478480</th><br>      <td>C00496067</td><br>      <td>P00003608</td><br>      <td>Cain, Herman</td><br>      <td>MAREK, JOHN</td><br>      <td>WAUKESHA</td><br>      <td>WI</td><br>      <td>531899772</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>2400.0</td><br>      <td>2011-01-01</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>755790</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>475327</th><br>      <td>C00496067</td><br>      <td>P00003608</td><br>      <td>Cain, Herman</td><br>      <td>STOLTENBERG, WAYNE</td><br>      <td>WESTLAKE</td><br>      <td>TX</td><br>      <td>762629076</td><br>      <td>CINCO RESOURCES</td><br>      <td>CFO</td><br>      <td>5200.0</td><br>      <td>2011-01-01</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>755790</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>475328</th><br>      <td>C00496067</td><br>      <td>P00003608</td><br>      <td>Cain, Herman</td><br>      <td>TRIBBLE, JAMES</td><br>      <td>HOUSTON</td><br>      <td>TX</td><br>      <td>770795026</td><br>      <td>NONE</td><br>      <td>RETIRED</td><br>      <td>1000.0</td><br>      <td>2011-01-01</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>755790</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>478481</th><br>      <td>C00496067</td><br>      <td>P00003608</td><br>      <td>Cain, Herman</td><br>      <td>SIDNEY, SCOTT</td><br>      <td>CEDARBURG</td><br>      <td>WI</td><br>      <td>530122317</td><br>      <td>SELF EMPLOYED</td><br>      <td>CONTRACTOR</td><br>      <td>2400.0</td><br>      <td>2011-01-03</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>755790</td><br>      <td>Republican</td><br>    </tr><br>    <tr><br>      <th>475329</th><br>      <td>C00496067</td><br>      <td>P00003608</td><br>      <td>Cain, Herman</td><br>      <td>DAVIS, JEREMY S MR.</td><br>      <td>HOUSTON</td><br>      <td>TX</td><br>      <td>770252267</td><br>      <td>INTL PETROLEUM ASSOC OF AMERICA</td><br>      <td>INVESTOR</td><br>      <td>2400.0</td><br>      <td>2011-01-03</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>SA17A</td><br>      <td>755790</td><br>      <td>Republican</td><br>    </tr><br>  </tbody><br></table><br></div><p>对转换后的数据，查看每天各政党所收政治献金数目。  </p><p>考察知识点：groupby（多个字段）</p><p>groupby([‘contb_receipt_dt’, ‘party’])</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es_1 = es.groupby([<span class="string">'contb_receipt_dt'</span>, <span class="string">'party'</span>])[<span class="string">'contb_receipt_amt'</span>].sum()</span><br><span class="line">es_1</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">contb_receipt_dt  party     </span><br><span class="line">2011-01-01        Republican       8600.00</span><br><span class="line">2011-01-03        Republican       4800.00</span><br><span class="line">2011-01-04        Republican       5000.00</span><br><span class="line">2011-01-12        Republican       4150.00</span><br><span class="line">2011-01-13        Republican       4000.00</span><br><span class="line">2011-01-14        Republican       6000.00</span><br><span class="line">2011-01-15        Republican        500.00</span><br><span class="line">2011-01-16        Republican        750.00</span><br><span class="line">2011-01-17        Republican        500.00</span><br><span class="line">2011-01-18        Republican       4800.00</span><br><span class="line">2011-01-20        Republican       2650.00</span><br><span class="line">2011-01-21        Republican        250.00</span><br><span class="line">2011-01-22        Republican        250.00</span><br><span class="line">2011-01-24        Republican       2400.00</span><br><span class="line">2011-01-26        Republican       5400.00</span><br><span class="line">2011-01-27        Republican       2650.00</span><br><span class="line">2011-01-28        Republican        650.00</span><br><span class="line">2011-01-29        Republican        750.00</span><br><span class="line">2011-01-31        Republican       6000.00</span><br><span class="line">2011-02-01        Republican        250.00</span><br><span class="line">2011-02-03        Republican       3250.00</span><br><span class="line">2011-02-04        Republican       1000.00</span><br><span class="line">2011-02-07        Republican       9300.00</span><br><span class="line">2011-02-08        Republican       3000.00</span><br><span class="line">2011-02-09        Republican       6550.00</span><br><span class="line">2011-02-10        Republican        250.00</span><br><span class="line">2011-02-11        Republican        250.00</span><br><span class="line">2011-02-12        Republican        250.00</span><br><span class="line">2011-02-13        Republican        250.00</span><br><span class="line">2011-02-14        Republican       2500.00</span><br><span class="line">                                   ...    </span><br><span class="line">2012-01-22        Democrat        67194.23</span><br><span class="line">                  Reform            450.00</span><br><span class="line">                  Republican     507168.71</span><br><span class="line">2012-01-23        Democrat       337307.07</span><br><span class="line">                  Reform            225.00</span><br><span class="line">                  Republican     645477.15</span><br><span class="line">2012-01-24        Democrat       458909.23</span><br><span class="line">                  Reform            500.00</span><br><span class="line">                  Republican     462233.66</span><br><span class="line">2012-01-25        Democrat       438949.32</span><br><span class="line">                  Reform            282.00</span><br><span class="line">                  Republican     416931.39</span><br><span class="line">2012-01-26        Democrat       450268.94</span><br><span class="line">                  Reform             25.00</span><br><span class="line">                  Republican     256406.86</span><br><span class="line">2012-01-27        Democrat       305785.47</span><br><span class="line">                  Reform           3176.37</span><br><span class="line">                  Republican     368441.82</span><br><span class="line">2012-01-28        Democrat       235492.85</span><br><span class="line">                  Reform            175.00</span><br><span class="line">                  Republican      82775.80</span><br><span class="line">2012-01-29        Democrat        93177.00</span><br><span class="line">                  Reform            200.00</span><br><span class="line">                  Republican      75220.02</span><br><span class="line">2012-01-30        Democrat       435921.72</span><br><span class="line">                  Reform            130.00</span><br><span class="line">                  Republican     255204.80</span><br><span class="line">2012-01-31        Democrat      1418410.31</span><br><span class="line">                  Reform            150.00</span><br><span class="line">                  Republican     869890.41</span><br><span class="line">Name: contb_receipt_amt, Length: 1183, dtype: float64</span><br></pre></td></tr></table></figure></div><p>【知识点】使用unstack()将上面所得数据中的party从二级索引变成列索引,unstack(level=-1)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es_1.unstack(fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>party</th><br>      <th>Democrat</th><br>      <th>Libertarian</th><br>      <th>Reform</th><br>      <th>Republican</th><br>    </tr><br>    <tr><br>      <th>contb_receipt_dt</th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2011-01-01</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>8600.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-03</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>4800.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-04</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-12</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>4150.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-13</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>4000.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-14</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>6000.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-15</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>500.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-16</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>750.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-17</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>500.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-18</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>4800.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-20</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>2650.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-21</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-22</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-24</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>2400.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-26</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>5400.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-27</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>2650.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-28</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>650.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-29</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>750.00</td><br>    </tr><br>    <tr><br>      <th>2011-01-31</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>6000.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-01</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-03</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>3250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-04</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>1000.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-07</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>9300.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-08</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>3000.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-09</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>6550.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-10</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-11</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-12</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-13</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>250.00</td><br>    </tr><br>    <tr><br>      <th>2011-02-14</th><br>      <td>0.00</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>2500.00</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>2012-01-02</th><br>      <td>89743.60</td><br>      <td>0.0</td><br>      <td>2437.13</td><br>      <td>114037.13</td><br>    </tr><br>    <tr><br>      <th>2012-01-03</th><br>      <td>87406.97</td><br>      <td>0.0</td><br>      <td>4006.32</td><br>      <td>155803.62</td><br>    </tr><br>    <tr><br>      <th>2012-01-04</th><br>      <td>166547.24</td><br>      <td>0.0</td><br>      <td>3445.80</td><br>      <td>577733.61</td><br>    </tr><br>    <tr><br>      <th>2012-01-05</th><br>      <td>198224.86</td><br>      <td>0.0</td><br>      <td>3925.48</td><br>      <td>451065.98</td><br>    </tr><br>    <tr><br>      <th>2012-01-06</th><br>      <td>138822.95</td><br>      <td>0.0</td><br>      <td>12676.24</td><br>      <td>262798.46</td><br>    </tr><br>    <tr><br>      <th>2012-01-07</th><br>      <td>91161.12</td><br>      <td>0.0</td><br>      <td>4201.12</td><br>      <td>148145.58</td><br>    </tr><br>    <tr><br>      <th>2012-01-08</th><br>      <td>81758.00</td><br>      <td>0.0</td><br>      <td>3457.52</td><br>      <td>84342.84</td><br>    </tr><br>    <tr><br>      <th>2012-01-09</th><br>      <td>206996.99</td><br>      <td>0.0</td><br>      <td>1950.00</td><br>      <td>501931.44</td><br>    </tr><br>    <tr><br>      <th>2012-01-10</th><br>      <td>191988.12</td><br>      <td>0.0</td><br>      <td>2195.00</td><br>      <td>487901.67</td><br>    </tr><br>    <tr><br>      <th>2012-01-11</th><br>      <td>185823.52</td><br>      <td>0.0</td><br>      <td>945.00</td><br>      <td>452916.99</td><br>    </tr><br>    <tr><br>      <th>2012-01-12</th><br>      <td>467212.53</td><br>      <td>0.0</td><br>      <td>625.00</td><br>      <td>348327.39</td><br>    </tr><br>    <tr><br>      <th>2012-01-13</th><br>      <td>374570.48</td><br>      <td>0.0</td><br>      <td>351.00</td><br>      <td>463368.26</td><br>    </tr><br>    <tr><br>      <th>2012-01-14</th><br>      <td>81687.80</td><br>      <td>0.0</td><br>      <td>200.00</td><br>      <td>608470.68</td><br>    </tr><br>    <tr><br>      <th>2012-01-15</th><br>      <td>72983.50</td><br>      <td>0.0</td><br>      <td>400.00</td><br>      <td>322194.08</td><br>    </tr><br>    <tr><br>      <th>2012-01-16</th><br>      <td>117163.21</td><br>      <td>0.0</td><br>      <td>400.00</td><br>      <td>367791.70</td><br>    </tr><br>    <tr><br>      <th>2012-01-17</th><br>      <td>298246.61</td><br>      <td>0.0</td><br>      <td>40.00</td><br>      <td>625365.77</td><br>    </tr><br>    <tr><br>      <th>2012-01-18</th><br>      <td>219002.47</td><br>      <td>0.0</td><br>      <td>0.00</td><br>      <td>888681.17</td><br>    </tr><br>    <tr><br>      <th>2012-01-19</th><br>      <td>275532.88</td><br>      <td>0.0</td><br>      <td>65.00</td><br>      <td>1066250.23</td><br>    </tr><br>    <tr><br>      <th>2012-01-20</th><br>      <td>245166.57</td><br>      <td>0.0</td><br>      <td>386.00</td><br>      <td>401298.03</td><br>    </tr><br>    <tr><br>      <th>2012-01-21</th><br>      <td>18513.50</td><br>      <td>0.0</td><br>      <td>280.00</td><br>      <td>374261.81</td><br>    </tr><br>    <tr><br>      <th>2012-01-22</th><br>      <td>67194.23</td><br>      <td>0.0</td><br>      <td>450.00</td><br>      <td>507168.71</td><br>    </tr><br>    <tr><br>      <th>2012-01-23</th><br>      <td>337307.07</td><br>      <td>0.0</td><br>      <td>225.00</td><br>      <td>645477.15</td><br>    </tr><br>    <tr><br>      <th>2012-01-24</th><br>      <td>458909.23</td><br>      <td>0.0</td><br>      <td>500.00</td><br>      <td>462233.66</td><br>    </tr><br>    <tr><br>      <th>2012-01-25</th><br>      <td>438949.32</td><br>      <td>0.0</td><br>      <td>282.00</td><br>      <td>416931.39</td><br>    </tr><br>    <tr><br>      <th>2012-01-26</th><br>      <td>450268.94</td><br>      <td>0.0</td><br>      <td>25.00</td><br>      <td>256406.86</td><br>    </tr><br>    <tr><br>      <th>2012-01-27</th><br>      <td>305785.47</td><br>      <td>0.0</td><br>      <td>3176.37</td><br>      <td>368441.82</td><br>    </tr><br>    <tr><br>      <th>2012-01-28</th><br>      <td>235492.85</td><br>      <td>0.0</td><br>      <td>175.00</td><br>      <td>82775.80</td><br>    </tr><br>    <tr><br>      <th>2012-01-29</th><br>      <td>93177.00</td><br>      <td>0.0</td><br>      <td>200.00</td><br>      <td>75220.02</td><br>    </tr><br>    <tr><br>      <th>2012-01-30</th><br>      <td>435921.72</td><br>      <td>0.0</td><br>      <td>130.00</td><br>      <td>255204.80</td><br>    </tr><br>    <tr><br>      <th>2012-01-31</th><br>      <td>1418410.31</td><br>      <td>0.0</td><br>      <td>150.00</td><br>      <td>869890.41</td><br>    </tr><br>  </tbody><br></table><br><p>376 rows × 4 columns</p><br></div><p>使用上面获取的数据<br>画出各党派累计政治献金,cumsum()累加函数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame的plot()画线型图，每一列是一条线</span></span><br><span class="line"><span class="comment"># 它的行索引标签是x坐标轴的刻度</span></span><br><span class="line">es_1.unstack(fill_value=<span class="number">0</span>).cumsum(axis=<span class="number">0</span>).plot()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x11d7d4e10&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/美国2012年大选政治献金数据分析/output_35_1.png" alt="png"></p><p>把时间作为列，党派作为行来观察,unstack() ‘contb_receipt’</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es_1.unstack(level=<span class="number">0</span>, fill_value=<span class="number">0</span>) <span class="comment"># 填充Nan值为0</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th>contb_receipt_dt</th><br>      <th>2011-01-01 00:00:00</th><br>      <th>2011-01-03 00:00:00</th><br>      <th>2011-01-04 00:00:00</th><br>      <th>2011-01-12 00:00:00</th><br>      <th>2011-01-13 00:00:00</th><br>      <th>2011-01-14 00:00:00</th><br>      <th>2011-01-15 00:00:00</th><br>      <th>2011-01-16 00:00:00</th><br>      <th>2011-01-17 00:00:00</th><br>      <th>2011-01-18 00:00:00</th><br>      <th>…</th><br>      <th>2012-01-22 00:00:00</th><br>      <th>2012-01-23 00:00:00</th><br>      <th>2012-01-24 00:00:00</th><br>      <th>2012-01-25 00:00:00</th><br>      <th>2012-01-26 00:00:00</th><br>      <th>2012-01-27 00:00:00</th><br>      <th>2012-01-28 00:00:00</th><br>      <th>2012-01-29 00:00:00</th><br>      <th>2012-01-30 00:00:00</th><br>      <th>2012-01-31 00:00:00</th><br>    </tr><br>    <tr><br>      <th>party</th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>Democrat</th><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>…</td><br>      <td>67194.23</td><br>      <td>337307.07</td><br>      <td>458909.23</td><br>      <td>438949.32</td><br>      <td>450268.94</td><br>      <td>305785.47</td><br>      <td>235492.85</td><br>      <td>93177.00</td><br>      <td>435921.72</td><br>      <td>1418410.31</td><br>    </tr><br>    <tr><br>      <th>Libertarian</th><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>…</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>      <td>0.00</td><br>    </tr><br>    <tr><br>      <th>Reform</th><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>0.0</td><br>      <td>…</td><br>      <td>450.00</td><br>      <td>225.00</td><br>      <td>500.00</td><br>      <td>282.00</td><br>      <td>25.00</td><br>      <td>3176.37</td><br>      <td>175.00</td><br>      <td>200.00</td><br>      <td>130.00</td><br>      <td>150.00</td><br>    </tr><br>    <tr><br>      <th>Republican</th><br>      <td>8600.0</td><br>      <td>4800.0</td><br>      <td>5000.0</td><br>      <td>4150.0</td><br>      <td>4000.0</td><br>      <td>6000.0</td><br>      <td>500.0</td><br>      <td>750.0</td><br>      <td>500.0</td><br>      <td>4800.0</td><br>      <td>…</td><br>      <td>507168.71</td><br>      <td>645477.15</td><br>      <td>462233.66</td><br>      <td>416931.39</td><br>      <td>256406.86</td><br>      <td>368441.82</td><br>      <td>82775.80</td><br>      <td>75220.02</td><br>      <td>255204.80</td><br>      <td>869890.41</td><br>    </tr><br>  </tbody><br></table><br><p>4 rows × 376 columns</p><br></div><p>使用stack()把party变成二级行索引,注意所有的值都不能为nan，需要填充为0</p><p>查看候选人姓名cand_nm和政治献金捐献者contbr_nm的职业contbr_occupation，以及捐献情况。能看出各个候选人主要的支持者分布情况 </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">es2 = election[[<span class="string">'cand_nm'</span>, <span class="string">'contbr_nm'</span>,</span><br><span class="line">                <span class="string">'contbr_occupation'</span>, <span class="string">'contb_receipt_amt'</span>]]</span><br><span class="line">es2.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>Bachmann, Michelle</td><br>      <td>HARVEY, WILLIAM</td><br>      <td>RETIRED</td><br>      <td>50.0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>Bachmann, Michelle</td><br>      <td>SMITH, LANIER</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>250.0</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>Bachmann, Michelle</td><br>      <td>BLEVINS, DARONDA</td><br>      <td>RETIRED</td><br>      <td>250.0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>Bachmann, Michelle</td><br>      <td>WARDENBURG, HAROLD</td><br>      <td>RETIRED</td><br>      <td>300.0</td><br>    </tr><br>  </tbody><br></table><br></div><p>查看老兵”职业”主要支持谁：DISABLED VETERAN<br>考察Series索引</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es2[es2[<span class="string">'contbr_occupation'</span>] == <span class="string">'DISABLED VETERAN'</span>][<span class="string">'cand_nm'</span>].unique()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([&apos;Obama, Barack&apos;, &apos;Paul, Ron&apos;, &apos;Santorum, Rick&apos;, &apos;Cain, Herman&apos;],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure></div><p>把索引变成列,Series.reset_index()</p><p>找出各个候选人’cand_nm’的捐赠者’contbr_nm’中，捐赠金额最大的人的职业’contbr_occupation’以及捐献额 ‘contb_receipt_amt’ </p><p>通过query(“查询条件来查找捐献人职业”)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es3 = es2.groupby(<span class="string">'cand_nm'</span>)[<span class="string">'contb_receipt_amt'</span>].max()</span><br><span class="line">es3</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cand_nm</span><br><span class="line">Bachmann, Michelle                   3022.00</span><br><span class="line">Cain, Herman                        10000.00</span><br><span class="line">Gingrich, Newt                       5100.00</span><br><span class="line">Huntsman, Jon                        5000.00</span><br><span class="line">Johnson, Gary Earl                   2500.00</span><br><span class="line">McCotter, Thaddeus G                 4000.00</span><br><span class="line">Obama, Barack                     1944042.43</span><br><span class="line">Paul, Ron                            5000.00</span><br><span class="line">Pawlenty, Timothy                   10000.00</span><br><span class="line">Perry, Rick                         10000.00</span><br><span class="line">Roemer, Charles E. &apos;Buddy&apos; III        200.00</span><br><span class="line">Romney, Mitt                        12700.00</span><br><span class="line">Santorum, Rick                       5000.00</span><br><span class="line">Name: contb_receipt_amt, dtype: float64</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">es2.query(<span class="string">'cand_nm == "Bachmann, Michelle" &amp; contb_receipt_amt==3022.00'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>514665</th><br>      <td>Bachmann, Michelle</td><br>      <td>LIBERAL, NICOL</td><br>      <td>GOVERNMENT MEMBER</td><br>      <td>3022.0</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> es3.index:</span><br><span class="line">    print(item, es3[item])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Bachmann, Michelle 3022.0</span><br><span class="line">Cain, Herman 10000.0</span><br><span class="line">Gingrich, Newt 5100.0</span><br><span class="line">Huntsman, Jon 5000.0</span><br><span class="line">Johnson, Gary Earl 2500.0</span><br><span class="line">McCotter, Thaddeus G 4000.0</span><br><span class="line">Obama, Barack 1944042.43</span><br><span class="line">Paul, Ron 5000.0</span><br><span class="line">Pawlenty, Timothy 10000.0</span><br><span class="line">Perry, Rick 10000.0</span><br><span class="line">Roemer, Charles E. &apos;Buddy&apos; III 200.0</span><br><span class="line">Romney, Mitt 12700.0</span><br><span class="line">Santorum, Rick 5000.0</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'cand_nm == "&#123;&#125;" &amp; contb_receipt_amt== &#123;&#125;'</span></span><br><span class="line">result = DataFrame(columns=es2.columns)  <span class="comment"># 创建空的DataFrame</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> es3.index:</span><br><span class="line">    r = es2.query(sql.format(index, es3[index]))</span><br><span class="line">    result = result.append(r)</span><br><span class="line">    </span><br><span class="line">result</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>514665</th><br>      <td>Bachmann, Michelle</td><br>      <td>LIBERAL, NICOL</td><br>      <td>GOVERNMENT MEMBER</td><br>      <td>3022.00</td><br>    </tr><br>    <tr><br>      <th>478807</th><br>      <td>Cain, Herman</td><br>      <td>HILDE, AL</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>488731</th><br>      <td>Gingrich, Newt</td><br>      <td>POPE, MARK C. MR. III</td><br>      <td>RETIRED</td><br>      <td>5100.00</td><br>    </tr><br>    <tr><br>      <th>518904</th><br>      <td>Huntsman, Jon</td><br>      <td>KAYNE, RICHARD A. MR.</td><br>      <td>INVESTMENT MANAGEMENT</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>518946</th><br>      <td>Huntsman, Jon</td><br>      <td>TRAINA, TREVOR MR.</td><br>      <td>SELF-EMPLOYED</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>519065</th><br>      <td>Huntsman, Jon</td><br>      <td>SORENSEN, VERLA MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>519829</th><br>      <td>Huntsman, Jon</td><br>      <td>TEXTOR, JOHN C. MR.</td><br>      <td>CEO</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>520028</th><br>      <td>Huntsman, Jon</td><br>      <td>RAUNER, BRUCE VINCENT MR.</td><br>      <td>CHAIRMAN</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>520031</th><br>      <td>Huntsman, Jon</td><br>      <td>RAUNER, DIANA MRS.</td><br>      <td>PRESIDENT</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>520559</th><br>      <td>Huntsman, Jon</td><br>      <td>JACOBS, BENJAMIN</td><br>      <td>EXECUTIVE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>520756</th><br>      <td>Huntsman, Jon</td><br>      <td>JOSEPH, FAYE MS.</td><br>      <td>WRITER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521150</th><br>      <td>Huntsman, Jon</td><br>      <td>ASHNER, MICHAEL L. MR.</td><br>      <td>C.E.O.</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521155</th><br>      <td>Huntsman, Jon</td><br>      <td>CHU, CHINN</td><br>      <td>FINANCE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521161</th><br>      <td>Huntsman, Jon</td><br>      <td>FORD, WILLIAM E. MR. III</td><br>      <td>C.E.O. &amp; INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521201</th><br>      <td>Huntsman, Jon</td><br>      <td>LIEBERMAN, NANCY A. MRS.</td><br>      <td>LAWYER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521243</th><br>      <td>Huntsman, Jon</td><br>      <td>BISTRICER, JACK MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521271</th><br>      <td>Huntsman, Jon</td><br>      <td>NEUBAUER, LAWRENCE A. MR.</td><br>      <td>PARTNER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521282</th><br>      <td>Huntsman, Jon</td><br>      <td>VIRTUE, JAMES EDWARD MR.</td><br>      <td>INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521487</th><br>      <td>Huntsman, Jon</td><br>      <td>PANOS, EDWARD F.</td><br>      <td>VENTURE CAPITALIST</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521521</th><br>      <td>Huntsman, Jon</td><br>      <td>MCCLENDON, AUBREY K. MR.</td><br>      <td>C.E.O.</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521582</th><br>      <td>Huntsman, Jon</td><br>      <td>FIELD, DAVID J. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521652</th><br>      <td>Huntsman, Jon</td><br>      <td>GLEASON, ROBERT A.</td><br>      <td>INSURANCE BROKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521871</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, DANIEL H. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521874</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, SHIRLEY W. MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521877</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, STUART M. MR.</td><br>      <td>REAL ESTATE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521886</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, HARLAN MR.</td><br>      <td>INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521889</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, KATHERINE RAYMOND MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521936</th><br>      <td>Huntsman, Jon</td><br>      <td>HOWARD, CHARLES E. MR. III</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521947</th><br>      <td>Huntsman, Jon</td><br>      <td>ORGAIN BELL &amp; TUCKER L.L.P.</td><br>      <td>NaN</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>521955</th><br>      <td>Huntsman, Jon</td><br>      <td>REGER, GARY MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>176127</th><br>      <td>Obama, Barack</td><br>      <td>OBAMA VICTORY FUND 2012 - UNITEMIZED</td><br>      <td>NaN</td><br>      <td>1944042.43</td><br>    </tr><br>    <tr><br>      <th>373256</th><br>      <td>Paul, Ron</td><br>      <td>MAC DONALD, RONALD P.</td><br>      <td>LAW</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>357214</th><br>      <td>Pawlenty, Timothy</td><br>      <td>RESSLER, ANTONY P. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>357467</th><br>      <td>Pawlenty, Timothy</td><br>      <td>JOHNSON, RONALD MR.</td><br>      <td>C.E.O.</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>358179</th><br>      <td>Pawlenty, Timothy</td><br>      <td>WEISS, M. ELIZABETH MRS.</td><br>      <td>INVESTMENT MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>358207</th><br>      <td>Pawlenty, Timothy</td><br>      <td>ANDRESEN, MATTHEW F. MR.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>358226</th><br>      <td>Pawlenty, Timothy</td><br>      <td>CANNING, JOHN A. MR. JR.</td><br>      <td>CHAIRMAN</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>358537</th><br>      <td>Pawlenty, Timothy</td><br>      <td>NICHOLSON, JAMES B. MR.</td><br>      <td>PRESIDENT &amp; C.E.O.</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>358867</th><br>      <td>Pawlenty, Timothy</td><br>      <td>BAKER, DOUGLAS M. MR. JR.</td><br>      <td>CEO</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359005</th><br>      <td>Pawlenty, Timothy</td><br>      <td>DAVIS, MARTIN E. MR.</td><br>      <td>GENERAL MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359041</th><br>      <td>Pawlenty, Timothy</td><br>      <td>DEVRIES, TIMOTHY C. MR.</td><br>      <td>PRIVATE EQUITY</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359299</th><br>      <td>Pawlenty, Timothy</td><br>      <td>RIXMANN, BRADLEY KENT MR.</td><br>      <td>CEO</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359619</th><br>      <td>Pawlenty, Timothy</td><br>      <td>GRIFFITH, JOHN DAVID MR.</td><br>      <td>REAL ESTATE</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359633</th><br>      <td>Pawlenty, Timothy</td><br>      <td>CUMMINS, ROBERT P. MR.</td><br>      <td>MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>359998</th><br>      <td>Pawlenty, Timothy</td><br>      <td>HUBBARD, R. D. MR.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>360689</th><br>      <td>Pawlenty, Timothy</td><br>      <td>QUESTROM, KELLI MRS.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>527700</th><br>      <td>Perry, Rick</td><br>      <td>MORAN, JOHN D. MR. JR.</td><br>      <td>PRESIDENT</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>353119</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>JONES, JERRY N.</td><br>      <td>ATTORNEY</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353205</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>YANTIS, GLORIA J.</td><br>      <td>RETIRED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353365</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>BRASUELL, AL</td><br>      <td>NaN</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353444</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>FULGHAM, EDWIN C.</td><br>      <td>RETIRED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353469</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>CRAWFORD, DANIEL A.</td><br>      <td>PEDIATRIC DENTIST</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353577</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>ROBICHEAUX, ERIC</td><br>      <td>INSURANCE AGENT</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353581</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>ASSEFF, CHARLES E.</td><br>      <td>CPA</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353691</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>WOOD, FERNIE JR.</td><br>      <td>NaN</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353743</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>GARRET, F. RANDALL</td><br>      <td>ATTORNEY</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>353808</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>STROUD, A M JR</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>354715</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>THOMPSON, THERESE A</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>35412</th><br>      <td>Romney, Mitt</td><br>      <td>NORPAC</td><br>      <td>NaN</td><br>      <td>12700.00</td><br>    </tr><br>    <tr><br>      <th>450926</th><br>      <td>Santorum, Rick</td><br>      <td>ACTRIGHT</td><br>      <td>NaN</td><br>      <td>5000.00</td><br>    </tr><br>  </tbody><br></table><br><p>140 rows × 4 columns</p><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>cand_nm</th><br>      <th>contbr_nm</th><br>      <th>contbr_occupation</th><br>      <th>contb_receipt_amt</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>Bachmann, Michelle</td><br>      <td>LIBERAL, NICOL</td><br>      <td>GOVERNMENT MEMBER</td><br>      <td>3022.00</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>Cain, Herman</td><br>      <td>HILDE, AL</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>Gingrich, Newt</td><br>      <td>POPE, MARK C. MR. III</td><br>      <td>RETIRED</td><br>      <td>5100.00</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>Huntsman, Jon</td><br>      <td>KAYNE, RICHARD A. MR.</td><br>      <td>INVESTMENT MANAGEMENT</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>Huntsman, Jon</td><br>      <td>TRAINA, TREVOR MR.</td><br>      <td>SELF-EMPLOYED</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>Huntsman, Jon</td><br>      <td>SORENSEN, VERLA MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>Huntsman, Jon</td><br>      <td>TEXTOR, JOHN C. MR.</td><br>      <td>CEO</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>Huntsman, Jon</td><br>      <td>RAUNER, BRUCE VINCENT MR.</td><br>      <td>CHAIRMAN</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>Huntsman, Jon</td><br>      <td>RAUNER, DIANA MRS.</td><br>      <td>PRESIDENT</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>Huntsman, Jon</td><br>      <td>JACOBS, BENJAMIN</td><br>      <td>EXECUTIVE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>Huntsman, Jon</td><br>      <td>JOSEPH, FAYE MS.</td><br>      <td>WRITER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>Huntsman, Jon</td><br>      <td>ASHNER, MICHAEL L. MR.</td><br>      <td>C.E.O.</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>Huntsman, Jon</td><br>      <td>CHU, CHINN</td><br>      <td>FINANCE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>Huntsman, Jon</td><br>      <td>FORD, WILLIAM E. MR. III</td><br>      <td>C.E.O. &amp; INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>Huntsman, Jon</td><br>      <td>LIEBERMAN, NANCY A. MRS.</td><br>      <td>LAWYER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>Huntsman, Jon</td><br>      <td>BISTRICER, JACK MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>Huntsman, Jon</td><br>      <td>NEUBAUER, LAWRENCE A. MR.</td><br>      <td>PARTNER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>Huntsman, Jon</td><br>      <td>VIRTUE, JAMES EDWARD MR.</td><br>      <td>INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>Huntsman, Jon</td><br>      <td>PANOS, EDWARD F.</td><br>      <td>VENTURE CAPITALIST</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>Huntsman, Jon</td><br>      <td>MCCLENDON, AUBREY K. MR.</td><br>      <td>C.E.O.</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>Huntsman, Jon</td><br>      <td>FIELD, DAVID J. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>Huntsman, Jon</td><br>      <td>GLEASON, ROBERT A.</td><br>      <td>INSURANCE BROKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, DANIEL H. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, SHIRLEY W. MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, STUART M. MR.</td><br>      <td>REAL ESTATE</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, HARLAN MR.</td><br>      <td>INVESTOR</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>Huntsman, Jon</td><br>      <td>CROW, KATHERINE RAYMOND MRS.</td><br>      <td>HOMEMAKER</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>Huntsman, Jon</td><br>      <td>HOWARD, CHARLES E. MR. III</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>Huntsman, Jon</td><br>      <td>ORGAIN BELL &amp; TUCKER L.L.P.</td><br>      <td>NaN</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>Huntsman, Jon</td><br>      <td>REGER, GARY MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>110</th><br>      <td>Obama, Barack</td><br>      <td>OBAMA VICTORY FUND 2012 - UNITEMIZED</td><br>      <td>NaN</td><br>      <td>1944042.43</td><br>    </tr><br>    <tr><br>      <th>111</th><br>      <td>Paul, Ron</td><br>      <td>MAC DONALD, RONALD P.</td><br>      <td>LAW</td><br>      <td>5000.00</td><br>    </tr><br>    <tr><br>      <th>112</th><br>      <td>Pawlenty, Timothy</td><br>      <td>RESSLER, ANTONY P. MR.</td><br>      <td>INFORMATION REQUESTED PER BEST EFFORTS</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>113</th><br>      <td>Pawlenty, Timothy</td><br>      <td>JOHNSON, RONALD MR.</td><br>      <td>C.E.O.</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>114</th><br>      <td>Pawlenty, Timothy</td><br>      <td>WEISS, M. ELIZABETH MRS.</td><br>      <td>INVESTMENT MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>115</th><br>      <td>Pawlenty, Timothy</td><br>      <td>ANDRESEN, MATTHEW F. MR.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>116</th><br>      <td>Pawlenty, Timothy</td><br>      <td>CANNING, JOHN A. MR. JR.</td><br>      <td>CHAIRMAN</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>117</th><br>      <td>Pawlenty, Timothy</td><br>      <td>NICHOLSON, JAMES B. MR.</td><br>      <td>PRESIDENT &amp; C.E.O.</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>118</th><br>      <td>Pawlenty, Timothy</td><br>      <td>BAKER, DOUGLAS M. MR. JR.</td><br>      <td>CEO</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>119</th><br>      <td>Pawlenty, Timothy</td><br>      <td>DAVIS, MARTIN E. MR.</td><br>      <td>GENERAL MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>120</th><br>      <td>Pawlenty, Timothy</td><br>      <td>DEVRIES, TIMOTHY C. MR.</td><br>      <td>PRIVATE EQUITY</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>121</th><br>      <td>Pawlenty, Timothy</td><br>      <td>RIXMANN, BRADLEY KENT MR.</td><br>      <td>CEO</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>122</th><br>      <td>Pawlenty, Timothy</td><br>      <td>GRIFFITH, JOHN DAVID MR.</td><br>      <td>REAL ESTATE</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>123</th><br>      <td>Pawlenty, Timothy</td><br>      <td>CUMMINS, ROBERT P. MR.</td><br>      <td>MANAGER</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>124</th><br>      <td>Pawlenty, Timothy</td><br>      <td>HUBBARD, R. D. MR.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>125</th><br>      <td>Pawlenty, Timothy</td><br>      <td>QUESTROM, KELLI MRS.</td><br>      <td>RETIRED</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>126</th><br>      <td>Perry, Rick</td><br>      <td>MORAN, JOHN D. MR. JR.</td><br>      <td>PRESIDENT</td><br>      <td>10000.00</td><br>    </tr><br>    <tr><br>      <th>127</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>JONES, JERRY N.</td><br>      <td>ATTORNEY</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>128</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>YANTIS, GLORIA J.</td><br>      <td>RETIRED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>129</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>BRASUELL, AL</td><br>      <td>NaN</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>130</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>FULGHAM, EDWIN C.</td><br>      <td>RETIRED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>131</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>CRAWFORD, DANIEL A.</td><br>      <td>PEDIATRIC DENTIST</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>132</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>ROBICHEAUX, ERIC</td><br>      <td>INSURANCE AGENT</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>133</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>ASSEFF, CHARLES E.</td><br>      <td>CPA</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>134</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>WOOD, FERNIE JR.</td><br>      <td>NaN</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>135</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>GARRET, F. RANDALL</td><br>      <td>ATTORNEY</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>136</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>STROUD, A M JR</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>137</th><br>      <td>Roemer, Charles E. ‘Buddy’ III</td><br>      <td>THOMPSON, THERESE A</td><br>      <td>INFORMATION REQUESTED</td><br>      <td>200.00</td><br>    </tr><br>    <tr><br>      <th>138</th><br>      <td>Romney, Mitt</td><br>      <td>NORPAC</td><br>      <td>NaN</td><br>      <td>12700.00</td><br>    </tr><br>    <tr><br>      <th>139</th><br>      <td>Santorum, Rick</td><br>      <td>ACTRIGHT</td><br>      <td>NaN</td><br>      <td>5000.00</td><br>    </tr><br>  </tbody><br></table><br><p>140 rows × 4 columns</p><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导入包&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Series, DataFrame, Index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>美国股票数据分析案例</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%BE%8E%E5%9B%BD%E8%82%A1%E7%A5%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.xuhuiblog.cn/数据分析/美国股票数据分析案例/</id>
    <published>2019-05-05T11:58:41.000Z</published>
    <updated>2019-05-17T12:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure></div><a id="more"></a><p>读取数据</p><ul><li>AAPL.csv</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aapl = pd.read_csv(<span class="string">'美国股票数据分析案例/AAPL.csv'</span>)</span><br><span class="line">aapl.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Date</th><br>      <th>Open</th><br>      <th>High</th><br>      <th>Low</th><br>      <th>Close</th><br>      <th>Adj Close</th><br>      <th>Volume</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>1980-12-12</td><br>      <td>0.513393</td><br>      <td>0.515625</td><br>      <td>0.513393</td><br>      <td>0.513393</td><br>      <td>0.421597</td><br>      <td>117258400</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1980-12-15</td><br>      <td>0.488839</td><br>      <td>0.488839</td><br>      <td>0.486607</td><br>      <td>0.486607</td><br>      <td>0.399601</td><br>      <td>43971200</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>1980-12-16</td><br>      <td>0.453125</td><br>      <td>0.453125</td><br>      <td>0.450893</td><br>      <td>0.450893</td><br>      <td>0.370272</td><br>      <td>26432000</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>1980-12-17</td><br>      <td>0.462054</td><br>      <td>0.464286</td><br>      <td>0.462054</td><br>      <td>0.462054</td><br>      <td>0.379437</td><br>      <td>21610400</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>1980-12-18</td><br>      <td>0.475446</td><br>      <td>0.477679</td><br>      <td>0.475446</td><br>      <td>0.475446</td><br>      <td>0.390436</td><br>      <td>18362400</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapl.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date          object</span><br><span class="line">Open         float64</span><br><span class="line">High         float64</span><br><span class="line">Low          float64</span><br><span class="line">Close        float64</span><br><span class="line">Adj Close    float64</span><br><span class="line">Volume         int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><p>将’Date’这行数据转成时间数据类型</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aapl[<span class="string">'Date'</span>] = aapl[<span class="string">'Date'</span>].map(<span class="keyword">lambda</span> item: datetime.strptime(item, <span class="string">'%Y-%m-%d'</span>))</span><br><span class="line">aapl.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date         datetime64[ns]</span><br><span class="line">Open                float64</span><br><span class="line">High                float64</span><br><span class="line">Low                 float64</span><br><span class="line">Close               float64</span><br><span class="line">Adj Close           float64</span><br><span class="line">Volume                int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapl.head()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Date</th><br>      <th>Open</th><br>      <th>High</th><br>      <th>Low</th><br>      <th>Close</th><br>      <th>Adj Close</th><br>      <th>Volume</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>1980-12-12</td><br>      <td>0.513393</td><br>      <td>0.515625</td><br>      <td>0.513393</td><br>      <td>0.513393</td><br>      <td>0.421597</td><br>      <td>117258400</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1980-12-15</td><br>      <td>0.488839</td><br>      <td>0.488839</td><br>      <td>0.486607</td><br>      <td>0.486607</td><br>      <td>0.399601</td><br>      <td>43971200</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>1980-12-16</td><br>      <td>0.453125</td><br>      <td>0.453125</td><br>      <td>0.450893</td><br>      <td>0.450893</td><br>      <td>0.370272</td><br>      <td>26432000</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>1980-12-17</td><br>      <td>0.462054</td><br>      <td>0.464286</td><br>      <td>0.462054</td><br>      <td>0.462054</td><br>      <td>0.379437</td><br>      <td>21610400</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>1980-12-18</td><br>      <td>0.475446</td><br>      <td>0.477679</td><br>      <td>0.475446</td><br>      <td>0.475446</td><br>      <td>0.390436</td><br>      <td>18362400</td><br>    </tr><br>  </tbody><br></table><br></div><p>将’Date’设置为行索引</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aapl.set_index(<span class="string">'Date'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">aapl</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Open</th><br>      <th>High</th><br>      <th>Low</th><br>      <th>Close</th><br>      <th>Adj Close</th><br>      <th>Volume</th><br>    </tr><br>    <tr><br>      <th>Date</th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>1980-12-12</th><br>      <td>0.513393</td><br>      <td>0.515625</td><br>      <td>0.513393</td><br>      <td>0.513393</td><br>      <td>0.421597</td><br>      <td>117258400</td><br>    </tr><br>    <tr><br>      <th>1980-12-15</th><br>      <td>0.488839</td><br>      <td>0.488839</td><br>      <td>0.486607</td><br>      <td>0.486607</td><br>      <td>0.399601</td><br>      <td>43971200</td><br>    </tr><br>    <tr><br>      <th>1980-12-16</th><br>      <td>0.453125</td><br>      <td>0.453125</td><br>      <td>0.450893</td><br>      <td>0.450893</td><br>      <td>0.370272</td><br>      <td>26432000</td><br>    </tr><br>    <tr><br>      <th>1980-12-17</th><br>      <td>0.462054</td><br>      <td>0.464286</td><br>      <td>0.462054</td><br>      <td>0.462054</td><br>      <td>0.379437</td><br>      <td>21610400</td><br>    </tr><br>    <tr><br>      <th>1980-12-18</th><br>      <td>0.475446</td><br>      <td>0.477679</td><br>      <td>0.475446</td><br>      <td>0.475446</td><br>      <td>0.390436</td><br>      <td>18362400</td><br>    </tr><br>    <tr><br>      <th>1980-12-19</th><br>      <td>0.504464</td><br>      <td>0.506696</td><br>      <td>0.504464</td><br>      <td>0.504464</td><br>      <td>0.414265</td><br>      <td>12157600</td><br>    </tr><br>    <tr><br>      <th>1980-12-22</th><br>      <td>0.529018</td><br>      <td>0.531250</td><br>      <td>0.529018</td><br>      <td>0.529018</td><br>      <td>0.434428</td><br>      <td>9340800</td><br>    </tr><br>    <tr><br>      <th>1980-12-23</th><br>      <td>0.551339</td><br>      <td>0.553571</td><br>      <td>0.551339</td><br>      <td>0.551339</td><br>      <td>0.452758</td><br>      <td>11737600</td><br>    </tr><br>    <tr><br>      <th>1980-12-24</th><br>      <td>0.580357</td><br>      <td>0.582589</td><br>      <td>0.580357</td><br>      <td>0.580357</td><br>      <td>0.476588</td><br>      <td>12000800</td><br>    </tr><br>    <tr><br>      <th>1980-12-26</th><br>      <td>0.633929</td><br>      <td>0.636161</td><br>      <td>0.633929</td><br>      <td>0.633929</td><br>      <td>0.520581</td><br>      <td>13893600</td><br>    </tr><br>    <tr><br>      <th>1980-12-29</th><br>      <td>0.642857</td><br>      <td>0.645089</td><br>      <td>0.642857</td><br>      <td>0.642857</td><br>      <td>0.527913</td><br>      <td>23290400</td><br>    </tr><br>    <tr><br>      <th>1980-12-30</th><br>      <td>0.629464</td><br>      <td>0.629464</td><br>      <td>0.627232</td><br>      <td>0.627232</td><br>      <td>0.515082</td><br>      <td>17220000</td><br>    </tr><br>    <tr><br>      <th>1980-12-31</th><br>      <td>0.611607</td><br>      <td>0.611607</td><br>      <td>0.609375</td><br>      <td>0.609375</td><br>      <td>0.500417</td><br>      <td>8937600</td><br>    </tr><br>    <tr><br>      <th>1981-01-02</th><br>      <td>0.616071</td><br>      <td>0.620536</td><br>      <td>0.616071</td><br>      <td>0.616071</td><br>      <td>0.505916</td><br>      <td>5415200</td><br>    </tr><br>    <tr><br>      <th>1981-01-05</th><br>      <td>0.604911</td><br>      <td>0.604911</td><br>      <td>0.602679</td><br>      <td>0.602679</td><br>      <td>0.494918</td><br>      <td>8932000</td><br>    </tr><br>    <tr><br>      <th>1981-01-06</th><br>      <td>0.578125</td><br>      <td>0.578125</td><br>      <td>0.575893</td><br>      <td>0.575893</td><br>      <td>0.472922</td><br>      <td>11289600</td><br>    </tr><br>    <tr><br>      <th>1981-01-07</th><br>      <td>0.553571</td><br>      <td>0.553571</td><br>      <td>0.551339</td><br>      <td>0.551339</td><br>      <td>0.452758</td><br>      <td>13921600</td><br>    </tr><br>    <tr><br>      <th>1981-01-08</th><br>      <td>0.542411</td><br>      <td>0.542411</td><br>      <td>0.540179</td><br>      <td>0.540179</td><br>      <td>0.443594</td><br>      <td>9956800</td><br>    </tr><br>    <tr><br>      <th>1981-01-09</th><br>      <td>0.569196</td><br>      <td>0.571429</td><br>      <td>0.569196</td><br>      <td>0.569196</td><br>      <td>0.467423</td><br>      <td>5376000</td><br>    </tr><br>    <tr><br>      <th>1981-01-12</th><br>      <td>0.569196</td><br>      <td>0.569196</td><br>      <td>0.564732</td><br>      <td>0.564732</td><br>      <td>0.463757</td><br>      <td>5924800</td><br>    </tr><br>    <tr><br>      <th>1981-01-13</th><br>      <td>0.546875</td><br>      <td>0.546875</td><br>      <td>0.544643</td><br>      <td>0.544643</td><br>      <td>0.447260</td><br>      <td>5762400</td><br>    </tr><br>    <tr><br>      <th>1981-01-14</th><br>      <td>0.546875</td><br>      <td>0.549107</td><br>      <td>0.546875</td><br>      <td>0.546875</td><br>      <td>0.449092</td><br>      <td>3572800</td><br>    </tr><br>    <tr><br>      <th>1981-01-15</th><br>      <td>0.558036</td><br>      <td>0.562500</td><br>      <td>0.558036</td><br>      <td>0.558036</td><br>      <td>0.458258</td><br>      <td>3516800</td><br>    </tr><br>    <tr><br>      <th>1981-01-16</th><br>      <td>0.555804</td><br>      <td>0.555804</td><br>      <td>0.553571</td><br>      <td>0.553571</td><br>      <td>0.454591</td><br>      <td>3348800</td><br>    </tr><br>    <tr><br>      <th>1981-01-19</th><br>      <td>0.587054</td><br>      <td>0.589286</td><br>      <td>0.587054</td><br>      <td>0.587054</td><br>      <td>0.482087</td><br>      <td>10393600</td><br>    </tr><br>    <tr><br>      <th>1981-01-20</th><br>      <td>0.571429</td><br>      <td>0.571429</td><br>      <td>0.569196</td><br>      <td>0.569196</td><br>      <td>0.467423</td><br>      <td>7520800</td><br>    </tr><br>    <tr><br>      <th>1981-01-21</th><br>      <td>0.580357</td><br>      <td>0.584821</td><br>      <td>0.580357</td><br>      <td>0.580357</td><br>      <td>0.476588</td><br>      <td>3976000</td><br>    </tr><br>    <tr><br>      <th>1981-01-22</th><br>      <td>0.587054</td><br>      <td>0.591518</td><br>      <td>0.587054</td><br>      <td>0.587054</td><br>      <td>0.482087</td><br>      <td>8887200</td><br>    </tr><br>    <tr><br>      <th>1981-01-23</th><br>      <td>0.587054</td><br>      <td>0.589286</td><br>      <td>0.584821</td><br>      <td>0.584821</td><br>      <td>0.480254</td><br>      <td>2805600</td><br>    </tr><br>    <tr><br>      <th>1981-01-26</th><br>      <td>0.578125</td><br>      <td>0.578125</td><br>      <td>0.575893</td><br>      <td>0.575893</td><br>      <td>0.472922</td><br>      <td>6160000</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>2017-09-12</th><br>      <td>162.610001</td><br>      <td>163.960007</td><br>      <td>158.770004</td><br>      <td>160.860001</td><br>      <td>160.860001</td><br>      <td>71714000</td><br>    </tr><br>    <tr><br>      <th>2017-09-13</th><br>      <td>159.869995</td><br>      <td>159.960007</td><br>      <td>157.910004</td><br>      <td>159.649994</td><br>      <td>159.649994</td><br>      <td>44907400</td><br>    </tr><br>    <tr><br>      <th>2017-09-14</th><br>      <td>158.990005</td><br>      <td>159.399994</td><br>      <td>158.089996</td><br>      <td>158.279999</td><br>      <td>158.279999</td><br>      <td>23760700</td><br>    </tr><br>    <tr><br>      <th>2017-09-15</th><br>      <td>158.470001</td><br>      <td>160.970001</td><br>      <td>158.000000</td><br>      <td>159.880005</td><br>      <td>159.880005</td><br>      <td>49114600</td><br>    </tr><br>    <tr><br>      <th>2017-09-18</th><br>      <td>160.110001</td><br>      <td>160.500000</td><br>      <td>158.000000</td><br>      <td>158.669998</td><br>      <td>158.669998</td><br>      <td>28269400</td><br>    </tr><br>    <tr><br>      <th>2017-09-19</th><br>      <td>159.509995</td><br>      <td>159.770004</td><br>      <td>158.440002</td><br>      <td>158.729996</td><br>      <td>158.729996</td><br>      <td>20810600</td><br>    </tr><br>    <tr><br>      <th>2017-09-20</th><br>      <td>157.899994</td><br>      <td>158.259995</td><br>      <td>153.830002</td><br>      <td>156.070007</td><br>      <td>156.070007</td><br>      <td>52951400</td><br>    </tr><br>    <tr><br>      <th>2017-09-21</th><br>      <td>155.800003</td><br>      <td>155.800003</td><br>      <td>152.750000</td><br>      <td>153.389999</td><br>      <td>153.389999</td><br>      <td>37511700</td><br>    </tr><br>    <tr><br>      <th>2017-09-22</th><br>      <td>151.539993</td><br>      <td>152.270004</td><br>      <td>150.559998</td><br>      <td>151.889999</td><br>      <td>151.889999</td><br>      <td>46645400</td><br>    </tr><br>    <tr><br>      <th>2017-09-25</th><br>      <td>149.990005</td><br>      <td>151.830002</td><br>      <td>149.160004</td><br>      <td>150.550003</td><br>      <td>150.550003</td><br>      <td>44387300</td><br>    </tr><br>    <tr><br>      <th>2017-09-26</th><br>      <td>151.779999</td><br>      <td>153.919998</td><br>      <td>151.690002</td><br>      <td>153.139999</td><br>      <td>153.139999</td><br>      <td>36660000</td><br>    </tr><br>    <tr><br>      <th>2017-09-27</th><br>      <td>153.800003</td><br>      <td>154.720001</td><br>      <td>153.539993</td><br>      <td>154.229996</td><br>      <td>154.229996</td><br>      <td>25504200</td><br>    </tr><br>    <tr><br>      <th>2017-09-28</th><br>      <td>153.889999</td><br>      <td>154.279999</td><br>      <td>152.699997</td><br>      <td>153.279999</td><br>      <td>153.279999</td><br>      <td>22005500</td><br>    </tr><br>    <tr><br>      <th>2017-09-29</th><br>      <td>153.210007</td><br>      <td>154.130005</td><br>      <td>152.000000</td><br>      <td>154.119995</td><br>      <td>154.119995</td><br>      <td>26299800</td><br>    </tr><br>    <tr><br>      <th>2017-10-02</th><br>      <td>154.259995</td><br>      <td>154.449997</td><br>      <td>152.720001</td><br>      <td>153.809998</td><br>      <td>153.809998</td><br>      <td>18698800</td><br>    </tr><br>    <tr><br>      <th>2017-10-03</th><br>      <td>154.009995</td><br>      <td>155.089996</td><br>      <td>153.910004</td><br>      <td>154.479996</td><br>      <td>154.479996</td><br>      <td>16230300</td><br>    </tr><br>    <tr><br>      <th>2017-10-04</th><br>      <td>153.630005</td><br>      <td>153.860001</td><br>      <td>152.460007</td><br>      <td>153.479996</td><br>      <td>153.479996</td><br>      <td>20163800</td><br>    </tr><br>    <tr><br>      <th>2017-10-05</th><br>      <td>154.179993</td><br>      <td>155.440002</td><br>      <td>154.050003</td><br>      <td>155.389999</td><br>      <td>155.389999</td><br>      <td>21283800</td><br>    </tr><br>    <tr><br>      <th>2017-10-06</th><br>      <td>154.970001</td><br>      <td>155.490005</td><br>      <td>154.559998</td><br>      <td>155.300003</td><br>      <td>155.300003</td><br>      <td>17407600</td><br>    </tr><br>    <tr><br>      <th>2017-10-09</th><br>      <td>155.809998</td><br>      <td>156.729996</td><br>      <td>155.490005</td><br>      <td>155.839996</td><br>      <td>155.839996</td><br>      <td>16262900</td><br>    </tr><br>    <tr><br>      <th>2017-10-10</th><br>      <td>156.059998</td><br>      <td>158.000000</td><br>      <td>155.100006</td><br>      <td>155.899994</td><br>      <td>155.899994</td><br>      <td>15617000</td><br>    </tr><br>    <tr><br>      <th>2017-10-11</th><br>      <td>155.970001</td><br>      <td>156.979996</td><br>      <td>155.750000</td><br>      <td>156.550003</td><br>      <td>156.550003</td><br>      <td>16905600</td><br>    </tr><br>    <tr><br>      <th>2017-10-12</th><br>      <td>156.350006</td><br>      <td>157.369995</td><br>      <td>155.729996</td><br>      <td>156.000000</td><br>      <td>156.000000</td><br>      <td>16125100</td><br>    </tr><br>    <tr><br>      <th>2017-10-13</th><br>      <td>156.729996</td><br>      <td>157.279999</td><br>      <td>156.410004</td><br>      <td>156.990005</td><br>      <td>156.990005</td><br>      <td>16394200</td><br>    </tr><br>    <tr><br>      <th>2017-10-16</th><br>      <td>157.899994</td><br>      <td>160.000000</td><br>      <td>157.649994</td><br>      <td>159.880005</td><br>      <td>159.880005</td><br>      <td>24121500</td><br>    </tr><br>    <tr><br>      <th>2017-10-17</th><br>      <td>159.779999</td><br>      <td>160.869995</td><br>      <td>159.229996</td><br>      <td>160.470001</td><br>      <td>160.470001</td><br>      <td>18997300</td><br>    </tr><br>    <tr><br>      <th>2017-10-18</th><br>      <td>160.419998</td><br>      <td>160.710007</td><br>      <td>159.600006</td><br>      <td>159.759995</td><br>      <td>159.759995</td><br>      <td>16374200</td><br>    </tr><br>    <tr><br>      <th>2017-10-19</th><br>      <td>156.750000</td><br>      <td>157.080002</td><br>      <td>155.020004</td><br>      <td>155.979996</td><br>      <td>155.979996</td><br>      <td>42584200</td><br>    </tr><br>    <tr><br>      <th>2017-10-20</th><br>      <td>156.610001</td><br>      <td>157.750000</td><br>      <td>155.960007</td><br>      <td>156.250000</td><br>      <td>156.250000</td><br>      <td>23974100</td><br>    </tr><br>    <tr><br>      <th>2017-10-23</th><br>      <td>156.889999</td><br>      <td>157.690002</td><br>      <td>155.500000</td><br>      <td>156.169998</td><br>      <td>156.169998</td><br>      <td>21867200</td><br>    </tr><br>  </tbody><br></table><br><p>9296 rows × 6 columns</p><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画出普通的线性图</span></span><br><span class="line"><span class="comment"># x坐标是行索引标签</span></span><br><span class="line"><span class="comment"># y坐标是每一行的数值</span></span><br><span class="line">aapl[<span class="string">'Adj Close'</span>].plot()  <span class="comment"># Series的线性图</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3af8ee4470&gt;</span><br></pre></td></tr></table></figure></div><p><img src="/数据分析/美国股票数据分析案例/output_11_1.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Series, DataFrame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>logging模块介绍</title>
    <link href="https://www.xuhuiblog.cn/%E7%88%AC%E8%99%AB/logging%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.xuhuiblog.cn/爬虫/logging模块介绍/</id>
    <published>2019-05-05T06:50:53.000Z</published>
    <updated>2019-05-08T00:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="logging日志"><a href="#logging日志" class="headerlink" title="logging日志"></a>logging日志</h3><p>日志信息是软件开发过程中进行调试的一种非常有用的方式，特别是在大型软件开发过程需要很多相关人员进行协作的情况下。开发人员通过在代码中加入一些特定的能够记录软件运行过程中的各种事件信息能够有利于甄别代码中存在的问题。这些信息可能包括时间，描述信息以及错误或者异常发生时候的特定上下文信息。</p><a id="more"></a><p>  最原始的 debug 方法是通过在代码中嵌入 print  语句，通过输出一些相关的信息来定位程序的问题。但这种方法有一定的缺陷，正常的程序输出和 debug  信息混合在一起，给分析带来一定困难，当程序调试结束不再需要 debug 输出的时候，通常没有很简单的方法将 print  的信息屏蔽掉或者定位到文件。python 中自带的 logging 模块可以比较方便的解决这些问题，它提供日志功能，将 logger 的  level 分为六个级别，可以通过 Logger.setLevel(lvl) 来设置。默认的级别为 warning。</p><h4 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h4><table><thead><tr><th>Level</th><th>值</th><th>使用情形</th></tr></thead><tbody><tr><td>NOTSET</td><td>0</td><td>日志记录,一般仅仅用来记录运行状况</td></tr><tr><td>DEBUG</td><td>10</td><td>详细的信息，在追踪问题的时候使用</td></tr><tr><td>INFO</td><td>20</td><td>正常的信息</td></tr><tr><td>WARNING</td><td>30</td><td>一些不可预见的问题发生，或者将要发生，如磁盘空间低等，但不影响程序的运行</td></tr><tr><td>ERROR</td><td>40</td><td>由于某些严重的问题，程序中的一些功能受到影响</td></tr><tr><td>CRITICAL</td><td>50</td><td>严重的错误，或者程序本身不能够继续运行</td></tr></tbody></table><h4 id="logging-lib-包含的-4-个主要对象"><a href="#logging-lib-包含的-4-个主要对象" class="headerlink" title="logging lib 包含的 4 个主要对象"></a>logging lib 包含的 4 个主要对象</h4><ul><li>logger:logger 是程序信息输出的接口。它分散在不同的代码中使得程序可以在运行的时候记录相应的信息，并根据设置的日志级别或  filter 来决定哪些信息需要输出并将这些信息分发到其关联的 handler。常用的方法有  Logger.setLevel()，Logger.addHandler() ，Logger.removeHandler()  ，Logger.addFilter() ，Logger.debug(), Logger.info(), Logger.warning(),  Logger.error()，getLogger() 等。logger 支持层次继承关系，子 logger 的名称通常是父  logger.name 的方式。如果不创建 logger 的实例，则使用默认的 root logger，通过  logging.getLogger() 或者 logging.getLogger(“”) 得到 root logger 实例。</li><li>Handler:Handler 用来处理信息的输出，可以将信息输出到控制台，文件或者网络。可以通过  Logger.addHandler() 来给 logger 对象添加 handler，常用的 handler 有 StreamHandler 和  FileHandler 类。StreamHandler 发送错误信息到流，而 FileHandler 类用于向文件输出日志信息，这两个  handler 定义在 logging 的核心模块中。其他的 hander 定义在 logging.handles 模块中，如：HTTPHandler,SocketHandler。</li><li>Formatter:Formatter 则决定了 log 信息的格式 , 格式使用类似于 %(&lt; dictionary key  &gt;)s 的形式来定义，如’%(asctime)s - %(levelname)s - %(message)s’，支持的 key 可以在  python 自带的文档 LogRecord attributes 中查看。</li><li>Filter:Filter 用来决定哪些信息需要输出。可以被 handler 和 logger 使用，支持层次关系，比如如果设置了  filter 为名称为 A.B 的 logger，则该 logger 和其子 logger 的信息会被输出，如 A.B,A.B.C.</li></ul><h4 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h4><p>logger是一个树结构，默认有个根root，其他logger都是其上的枝桠，比如创建一个name=’A.B’的logger，其实际结构就是 :</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    root((root))</span><br><span class="line">    A((A))</span><br><span class="line">    B((B))</span><br><span class="line">    root--&gt;A</span><br><span class="line">    A--&gt;B</span><br></pre></td></tr></table></figure></div><p>再创建一个name=’A.C.D’的logger，结构变为：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    root((root))</span><br><span class="line">    A((A))</span><br><span class="line">    B((B))</span><br><span class="line">    C((C))</span><br><span class="line">    D((D))</span><br><span class="line">    root--&gt;A</span><br><span class="line">    A--&gt;B</span><br><span class="line">    A--&gt;C</span><br><span class="line">    C--&gt;D</span><br></pre></td></tr></table></figure></div><p>下面的代码片段简要说明了logger、Handler、Formatter、Filter之间的关系及使用：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOG1=logging.getLogger(<span class="string">'b.c'</span>) </span><br><span class="line">filehandler = logging.FileHandler(<span class="string">'test.log'</span>,<span class="string">'a'</span>) </span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(name)s %(asctime)s %(levelname)s %(message)s'</span>) </span><br><span class="line">filehandler.setFormatter(formatter) </span><br><span class="line">filter=logging.Filter(<span class="string">'b'</span>) </span><br><span class="line">filehandler.addFilter(filter) </span><br><span class="line">LOG1.addHandler(filehandler)</span><br></pre></td></tr></table></figure></div><h4 id="日志简单配置示例"><a href="#日志简单配置示例" class="headerlink" title="日志简单配置示例"></a>日志简单配置示例</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logging.basicConfig()  <span class="comment"># basicConfig是logging提供的简单的配置方法，不用basicConfig则需要手动添加handler</span></span><br><span class="line"></span><br><span class="line">logger.setLevel(logging.INFO)  <span class="comment"># 输出所有大于等于INFO级别的log</span></span><br><span class="line">logger.info(<span class="string">'I am &lt;info&gt; message.'</span>)</span><br><span class="line">logger.debug(<span class="string">'I am &lt;debug&gt; message.'</span>)  <span class="comment"># 不输出</span></span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO:test:I am &lt;info&gt; message.</span><br></pre></td></tr></table></figure></div><p>要注意的是： root 的默认级别是 WARNING！， 而且logger实际输出时的level是取决于EffectiveLevel，即从该级往上走，遇到的第一个level不为0的logger的level，也就是说如果你创建了logger，而没有为其设置level，那它默认是NOTSET，程序会往上层找，直到root，而root级别是WARNING，所以可能会导致没有输出日志。</p><h4 id="handler日志输出目的地"><a href="#handler日志输出目的地" class="headerlink" title="handler日志输出目的地"></a>handler日志输出目的地</h4><p>我们写日志一个很重要的问题就是把日志输出到什么地方去，我们可能希望某些日志在console打印出来，可能希望有更详细的日志输出到log文件里去。怎么控制这些输出就需要用handler了。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logger.addHandler(logging.StreamHandler())  <span class="comment"># 添加StreamHandler</span></span><br><span class="line">logger.setLevel(logging.INFO)  <span class="comment"># 输出所有大于INFO级别的log</span></span><br><span class="line">logger.info(<span class="string">'I am &lt;info&gt; message.'</span>)</span><br><span class="line">logger.debug(<span class="string">'I am &lt;debug&gt; message.'</span>)  <span class="comment"># 不输出</span></span><br></pre></td></tr></table></figure></div><p>我们把上面的例子稍微改动了一下，可以看到输出如下，输出到了console里。在pycharm中都是显示在输出窗口中。只不过缺少了INFO:的级别类型</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am &lt;info&gt; message.</span><br></pre></td></tr></table></figure></div><p>这就是logging提供的最基本的一个handler，其他各种handler都是从这个handler继承发展来的。理论上可以把日志输出到各种流中，stderr、文件、socket等都可以。当然logging已经将各种流handler封装好了。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logger.addHandler(logging.StreamHandler())</span><br><span class="line">logger.addHandler(logging.FileHandler(<span class="string">'test.log'</span>))  <span class="comment"># 再添一个FileHandler</span></span><br><span class="line">logger.setLevel(logging.INFO)  <span class="comment"># 输出所有大于INFO级别的log</span></span><br><span class="line">logger.info(<span class="string">'I am &lt;info&gt; message.'</span>)</span><br><span class="line">logger.debug(<span class="string">'I am &lt;debug&gt; message.'</span>)  <span class="comment"># 不输出</span></span><br></pre></td></tr></table></figure></div><p>可以看到，info不仅仅输出到了console中，还在当前文件夹下创建了一个test.log文件并输出到了该文件中。在logging.handlers中还封装了一堆更高级的handlers，可以了解下，尤其是RotatingFileHandler和TimedRotatingFileHandler，可以把你的日志按一定规则分割成多份。你也可以自己封装handler哦，网上有人这么干的。</p><p>上面我们看到了logger的级别，可以控制这个logger要输出什么级别的log。但这里我们发现可以在logger里添加handler，控制输出log到哪里，明显发现，其实我们想要在不同的handler里输出不同级别的日志。</p><p>比如我们想要在console里输出warning以上的日志，在log文件里输出debug以上的日志，该怎么办呢？</p><p>handler也是有级别的。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logger.setLevel(logging.INFO)  <span class="comment"># 输出所有大于INFO级别的log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加StreamHandler，并设置级别为WARNING</span></span><br><span class="line">stream_hdl = logging.StreamHandler()</span><br><span class="line">stream_hdl.setLevel(logging.WARNING)</span><br><span class="line">logger.addHandler(stream_hdl)</span><br><span class="line"><span class="comment"># 添加FileHandler，并设置级别为DEBUG</span></span><br><span class="line">file_hdl = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">file_hdl.setLevel(logging.DEBUG)</span><br><span class="line">logger.addHandler(file_hdl)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'I am &lt;info&gt; message.'</span>)</span><br><span class="line">logger.debug(<span class="string">'I am &lt;debug&gt; message.'</span>)  <span class="comment"># 不输出</span></span><br></pre></td></tr></table></figure></div><p>logger实例的log()函数，例如info()和debug()函数先针对logger实例的级别进行过滤，不超过logger实例级别的log()函数，不会被加载到logger实例中。</p><p>在这段代码中logger实例的等级为INFO，所以info()和debug()函数只有info函数会被记录到logger实例中。</p><p>logger实例中记录的log()函数再被StreamHandler和FileHandler根据各自的级别进行筛选。</p><p>这段代码中StreamHandler级别为WARNING，而FileHandler的级别为DEBUG，所以记录在logger实例中的info()函数只在FileHandler中输出，也就是只有在test.log函数中输出。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am &lt;info&gt; message.</span><br></pre></td></tr></table></figure></div><h4 id="formatter-输出日志的格式"><a href="#formatter-输出日志的格式" class="headerlink" title="formatter : 输出日志的格式"></a>formatter : 输出日志的格式</h4><p>细心的话可以发现，我们后来自己添加的handler输出的log是没有格式的，就仅仅是输出而已。但basicConfig()输出的log是有格式的（虽然很丑）。</p><p>不同在于basicConfig()中的handler是带有formatter的。我们要添加formatter就需要用到logging中的另一个类Formatter</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 输出所有大于INFO级别的log</span></span><br><span class="line">fmt = logging.Formatter(<span class="string">'%(name)s - %(levelname)s - %(asctime)s - %(message)s'</span>)</span><br><span class="line"><span class="comment"># 添加StreamHandler，并设置级别为WARNING</span></span><br><span class="line">stream_hdl = logging.StreamHandler()</span><br><span class="line">stream_hdl.setLevel(logging.DEBUG)</span><br><span class="line">stream_hdl.setFormatter(fmt)</span><br><span class="line">logger.addHandler(stream_hdl)</span><br><span class="line"><span class="comment"># 添加FileHandler，并设置级别为DEBUG</span></span><br><span class="line">file_hdl = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">file_hdl.setLevel(logging.DEBUG)</span><br><span class="line">file_hdl.setFormatter(fmt)</span><br><span class="line">logger.addHandler(file_hdl)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'I am &lt;info&gt; message.'</span>)</span><br><span class="line">logger.debug(<span class="string">'I am &lt;debug&gt; message.'</span>)  <span class="comment"># 不输出</span></span><br></pre></td></tr></table></figure></div><p>是不是漂亮多了，logging的formatter可以输出的不止这几个信息，还有很多：</p><p>%(name)s ——logger实例的名称<br>%(levelno)s ——等级编号，为(DEBUG, INFO, WARNING, ERROR, CRITICAL)对应的编号<br>%(levelname)s ——等级名称，为 (“DEBUG”, “INFO”, “WARNING”, “ERROR”, “CRITICAL”)中的一个<br>%(pathname)s ——触发log的文件的全路径<br>%(filename)s ——触发log的文件的文件名<br>%(module)s ——触发log的模块名<br>%(lineno)d ——触发log的代码行数<br>%(funcName)s ——函数名<br>%(created)f ——log记录的创建时间<br>%(asctime)s ——log记录的文本时间<br>%(msecs)d ——创建时间对应的毫秒级时间戳<br>%(relativeCreated)d ——应用启动到当前记录被加载之间的时间差<br>%(thread)d ——线程id<br>%(threadName)s ——线程名称<br>%(process)d ——进程id<br>%(message)s ——日志记录的消息显示</p><h3 id="日志调试示例"><a href="#日志调试示例" class="headerlink" title="日志调试示例"></a>日志调试示例</h3><p>logging.conf 日志配置文件，可以使用上面手动配置的方式实现等效效果。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[loggers] </span><br><span class="line">keys=root,simpleExample </span><br><span class="line"></span><br><span class="line">[handlers] </span><br><span class="line">keys=consoleHandler </span><br><span class="line"></span><br><span class="line">[formatters] </span><br><span class="line">keys=simpleFormatter </span><br><span class="line"></span><br><span class="line">[logger_root] </span><br><span class="line">level=DEBUG </span><br><span class="line">handlers=consoleHandler </span><br><span class="line"></span><br><span class="line">[logger_simpleExample] </span><br><span class="line">level=DEBUG </span><br><span class="line">handlers=consoleHandler </span><br><span class="line">qualname=simpleExample </span><br><span class="line">propagate=0 </span><br><span class="line"></span><br><span class="line">[handler_consoleHandler] </span><br><span class="line">class=&quot;StreamHandler&quot; </span><br><span class="line">level=DEBUG </span><br><span class="line">formatter=simpleFormatter </span><br><span class="line">args=(sys.stdout,) </span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter] </span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname) - %(message)s </span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure></div><h4 id="配置文件简要说明"><a href="#配置文件简要说明" class="headerlink" title="配置文件简要说明"></a>配置文件简要说明</h4><p>1）配置文件中一定要包含loggers、handlers、formatters这些section，它们通过keys这个option来指定该配置文件中已经定义好的loggers、handlers和formatters，多个值之间用逗号分隔；另外loggers这个section中的keys一定要包含root这个值；</p><p>2）loggers、handlers、formatters中所指定的日志器、处理器和格式器都需要在下面以单独的section进行定义。seciton的命名规则为[logger_loggerName]、[formatter_formatterName]、[handler_handlerName]</p><p>3）定义logger的section必须指定level和handlers这两个option，level的可取值为DEBUG、INFO、WARNING、ERROR、CRITICAL、NOTSET，其中NOTSET表示所有级别的日志消息都要记录，包括用户定义级别；handlers的值是以逗号分隔的handler名字列表，这里出现的handler必须出现在[handlers]这个section中，并且相应的handler必须在配置文件中有对应的section定义；</p><p>4）对于非root  logger来说，除了level和handlers这两个option之外，还需要一些额外的option，其中qualname是必须提供的option，它表示在logger层级中的名字，在应用代码中通过这个名字得到logger；propagate是可选项，其默认是为1，表示消息将会传递给高层次logger的handler，通常我们需要指定其值为0，这个可以看下下面的例子；另外，对于非root  logger的level如果设置为NOTSET，系统将会查找高层次的logger来决定此logger的有效level。</p><p>5）定义handler的section中必须指定class和args这两个option，level和formatter为可选option；class表示用于创建handler的类名，args表示传递给class所指定的handler类初始化方法参数，它必须是一个元组（tuple）的形式，即便只有一个参数值也需要是一个元组的形式；level与logger中的level一样，而formatter指定的是该处理器所使用的格式器，这里指定的格式器名称必须出现在formatters这个section中，且在配置文件中必须要有这个formatter的section定义；如果不指定formatter则该handler将会以消息本身作为日志消息进行记录，而不添加额外的时间、日志器名称等信息；</p><p>6）定义formatter的sectioin中的option都是可选的，其中包括format用于指定格式字符串，默认为消息字符串本身；datefmt用于指定asctime的时间格式，默认为’%Y-%m-%d  %H:%M:%S’；class用于指定格式器类名，默认为logging.Formatter；</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> thread </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> logging </span><br><span class="line"><span class="keyword">import</span> logging.config </span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>) <span class="comment">#载入配置文件</span></span><br><span class="line"><span class="comment"># create logger </span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>) </span><br><span class="line"><span class="comment"># Define a function for the thread </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">( threadName, delay)</span>:</span> </span><br><span class="line">    logger.debug(<span class="string">'thread 1 call print_time function body'</span>) </span><br><span class="line">    count = <span class="number">0</span> </span><br><span class="line">    logger.debug(<span class="string">'count:%s'</span>,count)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;logging日志&quot;&gt;&lt;a href=&quot;#logging日志&quot; class=&quot;headerlink&quot; title=&quot;logging日志&quot;&gt;&lt;/a&gt;logging日志&lt;/h3&gt;&lt;p&gt;日志信息是软件开发过程中进行调试的一种非常有用的方式，特别是在大型软件开发过程需要很多相关人员进行协作的情况下。开发人员通过在代码中加入一些特定的能够记录软件运行过程中的各种事件信息能够有利于甄别代码中存在的问题。这些信息可能包括时间，描述信息以及错误或者异常发生时候的特定上下文信息。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://www.xuhuiblog.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.xuhuiblog.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas的数据处理</title>
    <link href="https://www.xuhuiblog.cn/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://www.xuhuiblog.cn/数据分析/Pandas的数据处理/</id>
    <published>2019-05-05T06:06:29.000Z</published>
    <updated>2019-05-17T12:23:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="删除重复行数据"><a href="#删除重复行数据" class="headerlink" title="删除重复行数据"></a>删除重复行数据</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建日志表</span></span><br><span class="line"><span class="comment"># 列： 日志编号、日志等级、日志名称、日志的消息</span></span><br><span class="line"><span class="comment"># 行： 日志的日期, 2018-10-10</span></span><br><span class="line">logs = DataFrame(&#123;</span><br><span class="line">    <span class="string">'ID'</span>: np.arange(<span class="number">1</span>, <span class="number">11</span>, step=<span class="number">1</span>),</span><br><span class="line">    <span class="string">'LevelName'</span>: np.random.choice([<span class="string">'INFO'</span>,<span class="string">'ERROR'</span>, <span class="string">'WARNNING'</span>, <span class="string">'CRITICAL'</span>],</span><br><span class="line">                                 size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'Name'</span>: np.random.choice([<span class="string">'django'</span>, <span class="string">'flask'</span>, <span class="string">'scrapy'</span>], size=<span class="number">10</span>),</span><br><span class="line">    <span class="string">'Message'</span>: np.random.choice([<span class="string">'登录'</span>, <span class="string">'下订单'</span>, <span class="string">'支付'</span>, <span class="string">'积分'</span>,</span><br><span class="line">                                 <span class="string">'秒杀'</span>, <span class="string">'验证码'</span>], size=<span class="number">10</span>)</span><br><span class="line">&#125;,index=[ <span class="string">'2019-04-%s'</span> % str(day).rjust(<span class="number">2</span>, <span class="string">'0'</span>) <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])</span><br><span class="line">logs</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logs.loc[<span class="string">'2019-04-11'</span>] = logs.loc[<span class="string">'2019-04-10'</span>]</span><br><span class="line">logs</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>    <tr><br>      <th>2019-04-11</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找重复行数据</span></span><br><span class="line"><span class="comment"># keep = &#123; 'last',  'first'&#125;  </span></span><br><span class="line"><span class="comment"># last表示最后一个重复行不是重复的， first 表示第一个重复行不是重复的，即保留哪一个</span></span><br><span class="line">logs.duplicated(keep=<span class="string">'last'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2019-04-01    False</span><br><span class="line">2019-04-02    False</span><br><span class="line">2019-04-03    False</span><br><span class="line">2019-04-04    False</span><br><span class="line">2019-04-05    False</span><br><span class="line">2019-04-06    False</span><br><span class="line">2019-04-07    False</span><br><span class="line">2019-04-08    False</span><br><span class="line">2019-04-09    False</span><br><span class="line">2019-04-10     True</span><br><span class="line">2019-04-11    False</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取哪些行值为True的行数据</span></span><br><span class="line">logs.loc[logs.duplicated(keep=<span class="string">'last'</span>)]</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logs.drop(logs[logs.duplicated(keep=<span class="string">'last'</span>)].index,</span><br><span class="line">          axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-11</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速删除重复行数据</span></span><br><span class="line"><span class="comment"># inplace =True 在原有的数据上进行修改， 如果=False，表示返回修改后的复本</span></span><br><span class="line">logs.drop_duplicates(keep=<span class="string">'first'</span>, inplace=<span class="literal">True</span>) <span class="comment"># 默认情况保留重复行的第一行</span></span><br><span class="line">logs</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 LevelName, ID 列</span></span><br><span class="line"><span class="comment"># 删除 2019-04-05, 2019-04-08 行</span></span><br><span class="line"><span class="comment"># logs.drop(index='2019-04-05', columns='LevelName')</span></span><br><span class="line"><span class="comment"># logs.drop(index=['2019-04-05', '2019-04-08'],</span></span><br><span class="line"><span class="comment">#           columns=['ID', 'LevelName'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logs.drop(index=['2019-04-05', '2019-04-08'])</span></span><br><span class="line"><span class="comment"># logs.drop(columns=['ID', 'LevelName'])</span></span><br><span class="line"><span class="comment"># logs.drop(['ID', 'LevelName'], axis=1)</span></span><br><span class="line">logs.drop([<span class="string">'2019-04-05'</span>, <span class="string">'2019-04-08'</span>], axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h3><ul><li>replace(olds, news) 将olds的数据替换成news的数据</li><li>map() 根据指定的列映射出相应的数据，如根据成绩，列出等级</li><li>rename() 重命名</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logs</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据中所有ERROR修改成 "错误", INFO改成 '正常'</span></span><br><span class="line">logs.replace(to_replace=<span class="string">'ERROR'</span>, value=<span class="string">'错误'</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>错误</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logs.replace(&#123;</span><br><span class="line">    <span class="string">'ERROR'</span>: <span class="string">'错误'</span>,</span><br><span class="line">    <span class="string">'INFO'</span>: <span class="string">'正常'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>正常</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>正常</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>错误</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logs.replace([<span class="string">'ERROR'</span>,<span class="string">'INFO'</span>], [<span class="string">'错误'</span>, <span class="string">'正常'</span>])</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>正常</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>正常</td><br>      <td>django</td><br>      <td>积分</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>错误</td><br>      <td>django</td><br>      <td>下订单</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>    </tr><br>  </tbody><br></table><br></div><p>创建新的一列 version列， 根据 Name字段，指定不同列值映射不同的版本，详情如下：<br>scrapy -&gt; 1.1<br>django -&gt; 2.0<br>flask  -&gt; 1.2</p><p>要求使用map()函数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取Name列值的Series,</span></span><br><span class="line"><span class="comment"># 再通过Series对象的map()函数，将每一行对应的数值映射成对应的值</span></span><br><span class="line">logs[<span class="string">'version'</span>] = logs[<span class="string">'Name'</span>].map(&#123;</span><br><span class="line">    <span class="string">'scrapy'</span>: <span class="number">1.1</span>,</span><br><span class="line">    <span class="string">'django'</span>: <span class="number">2.0</span>,</span><br><span class="line">    <span class="string">'flask'</span>: <span class="number">1.2</span></span><br><span class="line">&#125;)</span><br><span class="line">logs</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>      <th>version</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2019-04-01</th><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>2019-04-02</th><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2019-04-03</th><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>2019-04-04</th><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2019-04-05</th><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2019-04-06</th><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2019-04-07</th><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2019-04-08</th><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>2019-04-09</th><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>2019-04-10</th><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>      <td>2.0</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将行索引转成一列，列名为Date</span></span><br><span class="line"><span class="comment"># drop=True, 表示重新生成行索引标签</span></span><br><span class="line">logs_2 = logs.reset_index().rename(columns=&#123;<span class="string">'index'</span>: <span class="string">'Date'</span>&#125;)</span><br><span class="line">logs_2</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Date</th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>      <th>version</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2019-04-01</td><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2019-04-02</td><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2019-04-03</td><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2019-04-04</td><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>2019-04-05</td><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>2019-04-06</td><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>2019-04-07</td><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>2019-04-08</td><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>2019-04-09</td><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>2019-04-10</td><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>      <td>2.0</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Date的类型</span></span><br><span class="line">logs_2[<span class="string">'Date'</span>].dtype</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtype(&apos;O&apos;)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logs_2.dtypes <span class="comment"># 查看所有列的类型</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date          object</span><br><span class="line">ID             int64</span><br><span class="line">LevelName     object</span><br><span class="line">Name          object</span><br><span class="line">Message       object</span><br><span class="line">version      float64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改version的数据类型 float64 为 string 类型</span></span><br><span class="line"><span class="comment"># map()中指定类型转换的函数，将version的每一行的数据经过转换函数转成指定的类型</span></span><br><span class="line">logs_2[<span class="string">'version'</span>] = logs_2[<span class="string">'version'</span>].map(str)</span><br><span class="line">logs_2.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date         object</span><br><span class="line">ID            int64</span><br><span class="line">LevelName    object</span><br><span class="line">Name         object</span><br><span class="line">Message      object</span><br><span class="line">version      object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Date列的类型string为datetime类型</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_dt</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="comment"># item是每一行的数值，类型是str</span></span><br><span class="line">    <span class="comment"># item: 2019-04-01</span></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(item, <span class="string">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logs_2[<span class="string">'Date'</span>] = logs_2[<span class="string">'Date'</span>].map(convert_dt)</span><br><span class="line">logs_2.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date         datetime64[ns]</span><br><span class="line">ID                    int64</span><br><span class="line">LevelName            object</span><br><span class="line">Name                 object</span><br><span class="line">Message              object</span><br><span class="line">version              object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将Date列的数据转成 月和日的字符串</span></span><br><span class="line">logs_2[<span class="string">'Date'</span>] = logs_2[<span class="string">'Date'</span>].map(<span class="keyword">lambda</span> item:item.strftime(<span class="string">'%m-%d'</span>))</span><br><span class="line">logs_2</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Date</th><br>      <th>ID</th><br>      <th>LevelName</th><br>      <th>Name</th><br>      <th>Message</th><br>      <th>version</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>04-01</td><br>      <td>1</td><br>      <td>INFO</td><br>      <td>scrapy</td><br>      <td>验证码</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>04-02</td><br>      <td>2</td><br>      <td>INFO</td><br>      <td>django</td><br>      <td>积分</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>04-03</td><br>      <td>3</td><br>      <td>WARNNING</td><br>      <td>flask</td><br>      <td>支付</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>04-04</td><br>      <td>4</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>秒杀</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>04-05</td><br>      <td>5</td><br>      <td>CRITICAL</td><br>      <td>django</td><br>      <td>验证码</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>04-06</td><br>      <td>6</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>04-07</td><br>      <td>7</td><br>      <td>ERROR</td><br>      <td>django</td><br>      <td>下订单</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>04-08</td><br>      <td>8</td><br>      <td>CRITICAL</td><br>      <td>scrapy</td><br>      <td>支付</td><br>      <td>1.1</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>04-09</td><br>      <td>9</td><br>      <td>CRITICAL</td><br>      <td>flask</td><br>      <td>秒杀</td><br>      <td>1.2</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>04-10</td><br>      <td>10</td><br>      <td>WARNNING</td><br>      <td>django</td><br>      <td>登录</td><br>      <td>2.0</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建五位同学的三个课程的成绩表</span></span><br><span class="line"><span class="comment"># 五位同学的姓名分别是A, B, C, D, E</span></span><br><span class="line"><span class="comment"># 三门课程分别是 Python, Java, H5</span></span><br><span class="line">scores = DataFrame(np.random.randint(<span class="number">40</span>, <span class="number">100</span>, size=(<span class="number">5</span>, <span class="number">3</span>)),</span><br><span class="line">                  index=list(<span class="string">'ABCDE'</span>),</span><br><span class="line">                  columns=[<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'H5'</span>])</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一个 level列，根据Python列值，生成不同的等级，详情如下：</span></span><br><span class="line"><span class="comment"># &gt;=90            -&gt; A</span></span><br><span class="line"><span class="comment"># &lt; 90 and  &gt;= 75 -&gt; B</span></span><br><span class="line"><span class="comment"># &lt; 75 and &gt;=60   -&gt; C</span></span><br><span class="line"><span class="comment"># &lt; 60            -&gt; D</span></span><br><span class="line"><span class="comment"># 三目运算， Java/C-&gt;  item&gt;=90?'A': item&gt;=75?'B': item&gt;=60?'C':'D'</span></span><br><span class="line">level_convert = <span class="keyword">lambda</span> item: <span class="string">'A'</span> <span class="keyword">if</span> item &gt;=<span class="number">90</span> <span class="keyword">else</span> <span class="string">'B'</span> <span class="keyword">if</span> item &gt;=<span class="number">75</span> <span class="keyword">else</span> <span class="string">'C'</span> <span class="keyword">if</span> item&gt;=<span class="number">60</span> <span class="keyword">else</span> <span class="string">'D'</span></span><br><span class="line"></span><br><span class="line">scores[<span class="string">'level'</span>] = scores[<span class="string">'Python'</span>].map(level_convert)</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>      <th>level</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>      <td>B</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>      <td>C</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除level列</span></span><br><span class="line">scores.drop(columns=<span class="string">'level'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="扩展使用-transform"><a href="#扩展使用-transform" class="headerlink" title="扩展使用 transform()"></a>扩展使用 transform()</h3><ul><li>功能，同map()函数，将某一行的值转成别一个行值</li><li>不同的是，map()函数支持dict映射， 而transform()函数不支持dict映射</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scores[<span class="string">'level'</span>] = scores[<span class="string">'Python'</span>].transform(level_convert)</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>      <th>level</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>      <td>B</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>      <td>C</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>      <td>C</td><br>    </tr><br>  </tbody><br></table><br></div><p>思考： 如果拿出三个课程（三列），如何进行映射？</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># transform可以针对多列进行映射，但必须同分组函数一块使用</span></span><br><span class="line"><span class="comment"># 计算三门课程的总成绩，并生成总成绩列</span></span><br><span class="line">scores[<span class="string">'total'</span>] = scores.sum(axis=<span class="number">1</span>)</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>      <th>level</th><br>      <th>total</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>      <td>C</td><br>      <td>192</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>      <td>B</td><br>      <td>240</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>      <td>C</td><br>      <td>201</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>      <td>C</td><br>      <td>167</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>      <td>C</td><br>      <td>175</td><br>    </tr><br>  </tbody><br></table><br></div><p>练习：<br>新增两列，分别为张三、李四的成绩状态，如果分数低于90，则为”failed”，如果分数高于120，则为”excellent”，其他则为”pass”<br>【提示】使用函数作为map的参数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scores2 = DataFrame(&#123;</span><br><span class="line">    <span class="string">'张三'</span>: [<span class="number">50</span>, <span class="number">99</span>, <span class="number">130</span>],</span><br><span class="line">    <span class="string">'李四'</span>: [<span class="number">75</span>, <span class="number">150</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">'王五'</span>: [<span class="number">90</span>, <span class="number">79</span>, <span class="number">110</span>]</span><br><span class="line">&#125;, index=[<span class="string">'Python'</span>, <span class="string">'Flask'</span>, <span class="string">'Scrapy'</span>])</span><br><span class="line">scores2</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br>    </style><br>    <table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>张三</th><br>      <th>李四</th><br>      <th>王五</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>Python</th><br>      <td>50</td><br>      <td>75</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>Flask</th><br>      <td>99</td><br>      <td>150</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>Scrapy</th><br>      <td>130</td><br>      <td>100</td><br>      <td>110</td><br>    </tr><br>  </tbody><br></table><br>    </div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">level_func = <span class="keyword">lambda</span> item: <span class="string">'failed'</span> <span class="keyword">if</span> item &lt;<span class="number">90</span>  <span class="keyword">else</span> <span class="string">'excellent'</span> <span class="keyword">if</span> item &gt; <span class="number">120</span> <span class="keyword">else</span> <span class="string">'pass'</span></span><br><span class="line">scores2[<span class="string">'level_z'</span>] = scores2[<span class="string">'张三'</span>].map(level_func)</span><br><span class="line">scores2[<span class="string">'level_l'</span>] = scores2[<span class="string">'李四'</span>].map(level_func)</span><br><span class="line">scores2</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>张三</th><br>      <th>李四</th><br>      <th>王五</th><br>      <th>level_z</th><br>      <th>level_l</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>Python</th><br>      <td>50</td><br>      <td>75</td><br>      <td>90</td><br>      <td>failed</td><br>      <td>failed</td><br>    </tr><br>    <tr><br>      <th>Flask</th><br>      <td>99</td><br>      <td>150</td><br>      <td>79</td><br>      <td>pass</td><br>      <td>excellent</td><br>    </tr><br>    <tr><br>      <th>Scrapy</th><br>      <td>130</td><br>      <td>100</td><br>      <td>110</td><br>      <td>excellent</td><br>      <td>pass</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame(scores2.unstack()).unstack()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead tr th {<br>    text-align: left;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr><br>      <th></th><br>      <th colspan="3" halign="left">0</th><br>    </tr><br>    <tr><br>      <th></th><br>      <th>Python</th><br>      <th>Flask</th><br>      <th>Scrapy</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>张三</th><br>      <td>50</td><br>      <td>99</td><br>      <td>130</td><br>    </tr><br>    <tr><br>      <th>李四</th><br>      <td>75</td><br>      <td>150</td><br>      <td>100</td><br>    </tr><br>    <tr><br>      <th>王五</th><br>      <td>90</td><br>      <td>79</td><br>      <td>110</td><br>    </tr><br>    <tr><br>      <th>level_z</th><br>      <td>failed</td><br>      <td>pass</td><br>      <td>excellent</td><br>    </tr><br>    <tr><br>      <th>level_l</th><br>      <td>failed</td><br>      <td>excellent</td><br>      <td>pass</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores2.transpose()</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Flask</th><br>      <th>Scrapy</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>张三</th><br>      <td>50</td><br>      <td>99</td><br>      <td>130</td><br>    </tr><br>    <tr><br>      <th>李四</th><br>      <td>75</td><br>      <td>150</td><br>      <td>100</td><br>    </tr><br>    <tr><br>      <th>王五</th><br>      <td>90</td><br>      <td>79</td><br>      <td>110</td><br>    </tr><br>    <tr><br>      <th>level_z</th><br>      <td>failed</td><br>      <td>pass</td><br>      <td>excellent</td><br>    </tr><br>    <tr><br>      <th>level_l</th><br>      <td>failed</td><br>      <td>excellent</td><br>      <td>pass</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="rename-替换索引标签"><a href="#rename-替换索引标签" class="headerlink" title="rename()替换索引标签"></a>rename()替换索引标签</h3><ul><li>行索引标签，index</li><li>列索引标签，columns</li><li>多层索引标签，level属性</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scores.drop([<span class="string">'level'</span>, <span class="string">'total'</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改A的行标签为disen，B标签为jack</span></span><br><span class="line">scores.rename(index=&#123;</span><br><span class="line">    <span class="string">'A'</span>: <span class="string">'disen'</span>,</span><br><span class="line">    <span class="string">'B'</span>: <span class="string">'jack'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>disen</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>jack</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Python为Py3，H5为HTML5</span></span><br><span class="line">scores.rename(columns=&#123;</span><br><span class="line">    <span class="string">'Python'</span>: <span class="string">'Py3'</span>,</span><br><span class="line">    <span class="string">'H5'</span>: <span class="string">'HTML5'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Py3</th><br>      <th>Java</th><br>      <th>HTML5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s2 = pd.concat((scores,scores), axis=<span class="number">1</span>, keys=(<span class="string">'上学期'</span>, <span class="string">'下学期'</span>))</span><br><span class="line">s2</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead tr th {<br>    text-align: left;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr><br>      <th></th><br>      <th colspan="3" halign="left">上学期</th><br>      <th colspan="3" halign="left">下学期</th><br>    </tr><br>    <tr><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改s2表中的上学期为”期中“，下学期为”期末“</span></span><br><span class="line">s2.rename(&#123;</span><br><span class="line">    <span class="string">'上学期'</span>: <span class="string">'期中'</span>,</span><br><span class="line">    <span class="string">'下学期'</span>: <span class="string">'期末'</span></span><br><span class="line">&#125;, axis=<span class="number">1</span>, level=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead tr th {<br>    text-align: left;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr><br>      <th></th><br>      <th colspan="3" halign="left">期中</th><br>      <th colspan="3" halign="left">期末</th><br>    </tr><br>    <tr><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><h3 id="异常值检测和过滤"><a href="#异常值检测和过滤" class="headerlink" title="异常值检测和过滤"></a>异常值检测和过滤</h3><ul><li>describe()</li><li>any()和std()</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.describe()  <span class="comment"># 统计每一列的数据分布</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>count</th><br>      <td>5.000000</td><br>      <td>5.000000</td><br>      <td>5.00000</td><br>    </tr><br>    <tr><br>      <th>mean</th><br>      <td>68.800000</td><br>      <td>65.000000</td><br>      <td>61.20000</td><br>    </tr><br>    <tr><br>      <th>std</th><br>      <td>9.418068</td><br>      <td>20.904545</td><br>      <td>19.30544</td><br>    </tr><br>    <tr><br>      <th>min</th><br>      <td>61.000000</td><br>      <td>44.000000</td><br>      <td>43.00000</td><br>    </tr><br>    <tr><br>      <th>25%</th><br>      <td>64.000000</td><br>      <td>53.000000</td><br>      <td>44.00000</td><br>    </tr><br>    <tr><br>      <th>50%</th><br>      <td>66.000000</td><br>      <td>56.000000</td><br>      <td>56.00000</td><br>    </tr><br>    <tr><br>      <th>75%</th><br>      <td>68.000000</td><br>      <td>76.000000</td><br>      <td>79.00000</td><br>    </tr><br>    <tr><br>      <th>max</th><br>      <td>85.000000</td><br>      <td>96.000000</td><br>      <td>84.00000</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.std(axis=<span class="number">1</span>) <span class="comment"># 查看每行数据的标准差，即没人的各科成绩的分布情况</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A    20.000000</span><br><span class="line">B     4.582576</span><br><span class="line">C    26.514147</span><br><span class="line">D    12.503333</span><br><span class="line">E     6.806859</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>44</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定百分比显示的段</span></span><br><span class="line">scores.describe(percentiles=[<span class="number">0.45</span>, <span class="number">0.65</span>, <span class="number">0.85</span>])  <span class="comment"># 默认0.5是必须存在的</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>count</th><br>      <td>5.000000</td><br>      <td>5.000000</td><br>      <td>5.00000</td><br>    </tr><br>    <tr><br>      <th>mean</th><br>      <td>68.800000</td><br>      <td>65.000000</td><br>      <td>61.20000</td><br>    </tr><br>    <tr><br>      <th>std</th><br>      <td>9.418068</td><br>      <td>20.904545</td><br>      <td>19.30544</td><br>    </tr><br>    <tr><br>      <th>min</th><br>      <td>61.000000</td><br>      <td>44.000000</td><br>      <td>43.00000</td><br>    </tr><br>    <tr><br>      <th>45%</th><br>      <td>65.600000</td><br>      <td>55.400000</td><br>      <td>53.60000</td><br>    </tr><br>    <tr><br>      <th>50%</th><br>      <td>66.000000</td><br>      <td>56.000000</td><br>      <td>56.00000</td><br>    </tr><br>    <tr><br>      <th>65%</th><br>      <td>67.200000</td><br>      <td>68.000000</td><br>      <td>69.80000</td><br>    </tr><br>    <tr><br>      <th>85%</th><br>      <td>74.800000</td><br>      <td>84.000000</td><br>      <td>81.00000</td><br>    </tr><br>    <tr><br>      <th>max</th><br>      <td>85.000000</td><br>      <td>96.000000</td><br>      <td>84.00000</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python    int64</span><br><span class="line">Java      int64</span><br><span class="line">H5        int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scores.loc[<span class="string">'A'</span>, <span class="string">'Java'</span>] = <span class="literal">None</span></span><br><span class="line">scores</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>Java</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>A</th><br>      <td>64</td><br>      <td>NaN</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>B</th><br>      <td>85</td><br>      <td>76.0</td><br>      <td>79</td><br>    </tr><br>    <tr><br>      <th>C</th><br>      <td>61</td><br>      <td>96.0</td><br>      <td>44</td><br>    </tr><br>    <tr><br>      <th>D</th><br>      <td>68</td><br>      <td>56.0</td><br>      <td>43</td><br>    </tr><br>    <tr><br>      <th>E</th><br>      <td>66</td><br>      <td>53.0</td><br>      <td>56</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.dtypes</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python      int64</span><br><span class="line">Java      float64</span><br><span class="line">H5          int64</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.describe(include=np.int64)  <span class="comment"># 指定统计计算的数据类型</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>Python</th><br>      <th>H5</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>count</th><br>      <td>5.000000</td><br>      <td>5.00000</td><br>    </tr><br>    <tr><br>      <th>mean</th><br>      <td>68.800000</td><br>      <td>61.20000</td><br>    </tr><br>    <tr><br>      <th>std</th><br>      <td>9.418068</td><br>      <td>19.30544</td><br>    </tr><br>    <tr><br>      <th>min</th><br>      <td>61.000000</td><br>      <td>43.00000</td><br>    </tr><br>    <tr><br>      <th>25%</th><br>      <td>64.000000</td><br>      <td>44.00000</td><br>    </tr><br>    <tr><br>      <th>50%</th><br>      <td>66.000000</td><br>      <td>56.00000</td><br>    </tr><br>    <tr><br>      <th>75%</th><br>      <td>68.000000</td><br>      <td>79.00000</td><br>    </tr><br>    <tr><br>      <th>max</th><br>      <td>85.000000</td><br>      <td>84.00000</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.any(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A    True</span><br><span class="line">B    True</span><br><span class="line">C    True</span><br><span class="line">D    True</span><br><span class="line">E    True</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure></div><p>练习：新建一个形状10000*3的标准正态分布的DataFrame(np.random.randn),去掉所有满足以下条件的行：其中任一元素的绝对值大于3倍标准差</p><p><strong>以100条数据示例</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = DataFrame(np.random.randn(<span class="number">100</span>, <span class="number">3</span>), columns=(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>))</span><br><span class="line">d</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-1.164291</td><br>      <td>0.797137</td><br>      <td>-0.251975</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>0.201639</td><br>      <td>-1.886578</td><br>      <td>-1.352991</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>-0.956560</td><br>      <td>0.253978</td><br>      <td>0.190281</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.106657</td><br>      <td>0.791620</td><br>      <td>-0.805228</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.964321</td><br>      <td>0.545341</td><br>      <td>-2.175794</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>0.044096</td><br>      <td>-0.235177</td><br>      <td>0.492157</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>-0.500263</td><br>      <td>-1.430520</td><br>      <td>1.048750</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>-0.293912</td><br>      <td>0.896059</td><br>      <td>-0.109282</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>0.464239</td><br>      <td>-0.281743</td><br>      <td>-0.712988</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>-0.370665</td><br>      <td>2.277106</td><br>      <td>-1.424837</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>0.154458</td><br>      <td>0.059086</td><br>      <td>-0.115698</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>-0.265803</td><br>      <td>0.160085</td><br>      <td>-0.170685</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>-0.730650</td><br>      <td>-0.109982</td><br>      <td>-0.463942</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>0.201926</td><br>      <td>1.263386</td><br>      <td>0.629739</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>-2.177481</td><br>      <td>-0.188986</td><br>      <td>1.411646</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>-1.228296</td><br>      <td>0.980455</td><br>      <td>-1.354884</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>-0.664823</td><br>      <td>0.268899</td><br>      <td>1.012338</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>-0.190291</td><br>      <td>-1.078339</td><br>      <td>-0.456569</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>-0.108290</td><br>      <td>-0.070409</td><br>      <td>0.803164</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>0.887057</td><br>      <td>-1.473393</td><br>      <td>-1.126295</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>1.057284</td><br>      <td>0.010266</td><br>      <td>1.677125</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>0.467551</td><br>      <td>0.610109</td><br>      <td>2.110309</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>-1.536377</td><br>      <td>1.084455</td><br>      <td>-0.134929</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>-0.335276</td><br>      <td>1.242639</td><br>      <td>-0.912711</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>1.579240</td><br>      <td>-0.077694</td><br>      <td>0.960719</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>2.334651</td><br>      <td>1.118378</td><br>      <td>-0.584885</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>-0.878469</td><br>      <td>0.575112</td><br>      <td>0.753077</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>-0.886514</td><br>      <td>-1.596037</td><br>      <td>-0.579165</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>1.419417</td><br>      <td>-2.660823</td><br>      <td>-1.545299</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>-0.460868</td><br>      <td>-0.773910</td><br>      <td>0.617897</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>70</th><br>      <td>0.324589</td><br>      <td>-1.538287</td><br>      <td>1.675682</td><br>    </tr><br>    <tr><br>      <th>71</th><br>      <td>-0.584616</td><br>      <td>-0.489804</td><br>      <td>0.885449</td><br>    </tr><br>    <tr><br>      <th>72</th><br>      <td>-0.158786</td><br>      <td>0.432890</td><br>      <td>-1.351910</td><br>    </tr><br>    <tr><br>      <th>73</th><br>      <td>-0.677642</td><br>      <td>0.284412</td><br>      <td>1.542141</td><br>    </tr><br>    <tr><br>      <th>74</th><br>      <td>1.197553</td><br>      <td>-1.480051</td><br>      <td>0.707695</td><br>    </tr><br>    <tr><br>      <th>75</th><br>      <td>0.866642</td><br>      <td>-2.166048</td><br>      <td>2.007399</td><br>    </tr><br>    <tr><br>      <th>76</th><br>      <td>1.342749</td><br>      <td>-0.948632</td><br>      <td>0.017686</td><br>    </tr><br>    <tr><br>      <th>77</th><br>      <td>1.211767</td><br>      <td>1.790328</td><br>      <td>-0.384149</td><br>    </tr><br>    <tr><br>      <th>78</th><br>      <td>-1.196269</td><br>      <td>0.066043</td><br>      <td>-1.108524</td><br>    </tr><br>    <tr><br>      <th>79</th><br>      <td>0.257693</td><br>      <td>0.941103</td><br>      <td>-0.352873</td><br>    </tr><br>    <tr><br>      <th>80</th><br>      <td>0.085246</td><br>      <td>-0.644327</td><br>      <td>0.171741</td><br>    </tr><br>    <tr><br>      <th>81</th><br>      <td>0.952371</td><br>      <td>-0.411009</td><br>      <td>-1.553032</td><br>    </tr><br>    <tr><br>      <th>82</th><br>      <td>-0.575233</td><br>      <td>1.195594</td><br>      <td>-0.838789</td><br>    </tr><br>    <tr><br>      <th>83</th><br>      <td>-0.666920</td><br>      <td>-0.361069</td><br>      <td>0.384706</td><br>    </tr><br>    <tr><br>      <th>84</th><br>      <td>-0.766464</td><br>      <td>1.255243</td><br>      <td>0.399759</td><br>    </tr><br>    <tr><br>      <th>85</th><br>      <td>-2.505601</td><br>      <td>-0.940245</td><br>      <td>-0.250290</td><br>    </tr><br>    <tr><br>      <th>86</th><br>      <td>0.136244</td><br>      <td>-0.984630</td><br>      <td>0.148026</td><br>    </tr><br>    <tr><br>      <th>87</th><br>      <td>-0.639923</td><br>      <td>-0.485517</td><br>      <td>-0.117722</td><br>    </tr><br>    <tr><br>      <th>88</th><br>      <td>-1.004030</td><br>      <td>-1.865177</td><br>      <td>-0.342262</td><br>    </tr><br>    <tr><br>      <th>89</th><br>      <td>1.718531</td><br>      <td>-0.419141</td><br>      <td>-1.190334</td><br>    </tr><br>    <tr><br>      <th>90</th><br>      <td>-1.586579</td><br>      <td>-0.452029</td><br>      <td>-1.717858</td><br>    </tr><br>    <tr><br>      <th>91</th><br>      <td>0.619875</td><br>      <td>-0.913514</td><br>      <td>-0.642626</td><br>    </tr><br>    <tr><br>      <th>92</th><br>      <td>0.463219</td><br>      <td>-0.272244</td><br>      <td>0.166245</td><br>    </tr><br>    <tr><br>      <th>93</th><br>      <td>-1.267858</td><br>      <td>-1.868737</td><br>      <td>0.174040</td><br>    </tr><br>    <tr><br>      <th>94</th><br>      <td>-0.346080</td><br>      <td>0.715584</td><br>      <td>1.688834</td><br>    </tr><br>    <tr><br>      <th>95</th><br>      <td>-0.554673</td><br>      <td>0.806156</td><br>      <td>-0.757331</td><br>    </tr><br>    <tr><br>      <th>96</th><br>      <td>-0.349220</td><br>      <td>-0.274901</td><br>      <td>-1.190019</td><br>    </tr><br>    <tr><br>      <th>97</th><br>      <td>1.204126</td><br>      <td>-0.134090</td><br>      <td>-2.924324</td><br>    </tr><br>    <tr><br>      <th>98</th><br>      <td>-0.017631</td><br>      <td>0.360200</td><br>      <td>-0.189692</td><br>    </tr><br>    <tr><br>      <th>99</th><br>      <td>1.257691</td><br>      <td>0.037950</td><br>      <td>0.198003</td><br>    </tr><br>  </tbody><br></table><br><p>100 rows × 3 columns</p><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用DataFrame的关系运算函数 gt(other, axis=0)</span></span><br><span class="line"><span class="comment"># 从d中删除某一行中每一个元素的值大于这一行的所有数值标准差的3倍的行</span></span><br><span class="line">d.drop(index=d[d.gt(<span class="number">3</span>*d.std(axis=<span class="number">1</span>), axis=<span class="number">0</span>).any(axis=<span class="number">1</span>)].index)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-1.164291</td><br>      <td>0.797137</td><br>      <td>-0.251975</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>0.201639</td><br>      <td>-1.886578</td><br>      <td>-1.352991</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>-0.956560</td><br>      <td>0.253978</td><br>      <td>0.190281</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.106657</td><br>      <td>0.791620</td><br>      <td>-0.805228</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.964321</td><br>      <td>0.545341</td><br>      <td>-2.175794</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>0.044096</td><br>      <td>-0.235177</td><br>      <td>0.492157</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>-0.500263</td><br>      <td>-1.430520</td><br>      <td>1.048750</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>-0.293912</td><br>      <td>0.896059</td><br>      <td>-0.109282</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>0.464239</td><br>      <td>-0.281743</td><br>      <td>-0.712988</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>-0.370665</td><br>      <td>2.277106</td><br>      <td>-1.424837</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>0.154458</td><br>      <td>0.059086</td><br>      <td>-0.115698</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>-0.265803</td><br>      <td>0.160085</td><br>      <td>-0.170685</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>-0.730650</td><br>      <td>-0.109982</td><br>      <td>-0.463942</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>0.201926</td><br>      <td>1.263386</td><br>      <td>0.629739</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>-2.177481</td><br>      <td>-0.188986</td><br>      <td>1.411646</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>-1.228296</td><br>      <td>0.980455</td><br>      <td>-1.354884</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>-0.664823</td><br>      <td>0.268899</td><br>      <td>1.012338</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>-0.190291</td><br>      <td>-1.078339</td><br>      <td>-0.456569</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>-0.108290</td><br>      <td>-0.070409</td><br>      <td>0.803164</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>0.887057</td><br>      <td>-1.473393</td><br>      <td>-1.126295</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>1.057284</td><br>      <td>0.010266</td><br>      <td>1.677125</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>0.467551</td><br>      <td>0.610109</td><br>      <td>2.110309</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>-1.536377</td><br>      <td>1.084455</td><br>      <td>-0.134929</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>-0.335276</td><br>      <td>1.242639</td><br>      <td>-0.912711</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>1.579240</td><br>      <td>-0.077694</td><br>      <td>0.960719</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>2.334651</td><br>      <td>1.118378</td><br>      <td>-0.584885</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>-0.878469</td><br>      <td>0.575112</td><br>      <td>0.753077</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>-0.886514</td><br>      <td>-1.596037</td><br>      <td>-0.579165</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>1.419417</td><br>      <td>-2.660823</td><br>      <td>-1.545299</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>-0.460868</td><br>      <td>-0.773910</td><br>      <td>0.617897</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>70</th><br>      <td>0.324589</td><br>      <td>-1.538287</td><br>      <td>1.675682</td><br>    </tr><br>    <tr><br>      <th>71</th><br>      <td>-0.584616</td><br>      <td>-0.489804</td><br>      <td>0.885449</td><br>    </tr><br>    <tr><br>      <th>72</th><br>      <td>-0.158786</td><br>      <td>0.432890</td><br>      <td>-1.351910</td><br>    </tr><br>    <tr><br>      <th>73</th><br>      <td>-0.677642</td><br>      <td>0.284412</td><br>      <td>1.542141</td><br>    </tr><br>    <tr><br>      <th>74</th><br>      <td>1.197553</td><br>      <td>-1.480051</td><br>      <td>0.707695</td><br>    </tr><br>    <tr><br>      <th>75</th><br>      <td>0.866642</td><br>      <td>-2.166048</td><br>      <td>2.007399</td><br>    </tr><br>    <tr><br>      <th>76</th><br>      <td>1.342749</td><br>      <td>-0.948632</td><br>      <td>0.017686</td><br>    </tr><br>    <tr><br>      <th>77</th><br>      <td>1.211767</td><br>      <td>1.790328</td><br>      <td>-0.384149</td><br>    </tr><br>    <tr><br>      <th>78</th><br>      <td>-1.196269</td><br>      <td>0.066043</td><br>      <td>-1.108524</td><br>    </tr><br>    <tr><br>      <th>79</th><br>      <td>0.257693</td><br>      <td>0.941103</td><br>      <td>-0.352873</td><br>    </tr><br>    <tr><br>      <th>80</th><br>      <td>0.085246</td><br>      <td>-0.644327</td><br>      <td>0.171741</td><br>    </tr><br>    <tr><br>      <th>81</th><br>      <td>0.952371</td><br>      <td>-0.411009</td><br>      <td>-1.553032</td><br>    </tr><br>    <tr><br>      <th>82</th><br>      <td>-0.575233</td><br>      <td>1.195594</td><br>      <td>-0.838789</td><br>    </tr><br>    <tr><br>      <th>83</th><br>      <td>-0.666920</td><br>      <td>-0.361069</td><br>      <td>0.384706</td><br>    </tr><br>    <tr><br>      <th>84</th><br>      <td>-0.766464</td><br>      <td>1.255243</td><br>      <td>0.399759</td><br>    </tr><br>    <tr><br>      <th>85</th><br>      <td>-2.505601</td><br>      <td>-0.940245</td><br>      <td>-0.250290</td><br>    </tr><br>    <tr><br>      <th>86</th><br>      <td>0.136244</td><br>      <td>-0.984630</td><br>      <td>0.148026</td><br>    </tr><br>    <tr><br>      <th>87</th><br>      <td>-0.639923</td><br>      <td>-0.485517</td><br>      <td>-0.117722</td><br>    </tr><br>    <tr><br>      <th>88</th><br>      <td>-1.004030</td><br>      <td>-1.865177</td><br>      <td>-0.342262</td><br>    </tr><br>    <tr><br>      <th>89</th><br>      <td>1.718531</td><br>      <td>-0.419141</td><br>      <td>-1.190334</td><br>    </tr><br>    <tr><br>      <th>90</th><br>      <td>-1.586579</td><br>      <td>-0.452029</td><br>      <td>-1.717858</td><br>    </tr><br>    <tr><br>      <th>91</th><br>      <td>0.619875</td><br>      <td>-0.913514</td><br>      <td>-0.642626</td><br>    </tr><br>    <tr><br>      <th>92</th><br>      <td>0.463219</td><br>      <td>-0.272244</td><br>      <td>0.166245</td><br>    </tr><br>    <tr><br>      <th>93</th><br>      <td>-1.267858</td><br>      <td>-1.868737</td><br>      <td>0.174040</td><br>    </tr><br>    <tr><br>      <th>94</th><br>      <td>-0.346080</td><br>      <td>0.715584</td><br>      <td>1.688834</td><br>    </tr><br>    <tr><br>      <th>95</th><br>      <td>-0.554673</td><br>      <td>0.806156</td><br>      <td>-0.757331</td><br>    </tr><br>    <tr><br>      <th>96</th><br>      <td>-0.349220</td><br>      <td>-0.274901</td><br>      <td>-1.190019</td><br>    </tr><br>    <tr><br>      <th>97</th><br>      <td>1.204126</td><br>      <td>-0.134090</td><br>      <td>-2.924324</td><br>    </tr><br>    <tr><br>      <th>98</th><br>      <td>-0.017631</td><br>      <td>0.360200</td><br>      <td>-0.189692</td><br>    </tr><br>    <tr><br>      <th>99</th><br>      <td>1.257691</td><br>      <td>0.037950</td><br>      <td>0.198003</td><br>    </tr><br>  </tbody><br></table><br><p>94 rows × 3 columns</p><br></div><h3 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h3><ul><li>df.take() 按索引位置提取行或列的数据</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis=0 按行索引</span></span><br><span class="line">d.take([<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>], axis=<span class="number">0</span>) <span class="comment"># 获取指定索引的数据</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-1.164291</td><br>      <td>0.797137</td><br>      <td>-0.251975</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.106657</td><br>      <td>0.791620</td><br>      <td>-0.805228</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.964321</td><br>      <td>0.545341</td><br>      <td>-2.175794</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis=1 按列索引</span></span><br><span class="line">d.take([<span class="number">2</span>, <span class="number">0</span>], axis=<span class="number">1</span>)  <span class="comment"># 使用的是列的索引</span></span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>C</th><br>      <th>A</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-0.251975</td><br>      <td>-1.164291</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>-1.352991</td><br>      <td>0.201639</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>0.190281</td><br>      <td>-0.956560</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.805228</td><br>      <td>-0.106657</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>-2.175794</td><br>      <td>0.964321</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>0.492157</td><br>      <td>0.044096</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>1.048750</td><br>      <td>-0.500263</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>-0.109282</td><br>      <td>-0.293912</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>-0.712988</td><br>      <td>0.464239</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>-1.424837</td><br>      <td>-0.370665</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>-0.115698</td><br>      <td>0.154458</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>-0.170685</td><br>      <td>-0.265803</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>-0.463942</td><br>      <td>-0.730650</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>0.629739</td><br>      <td>0.201926</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>1.411646</td><br>      <td>-2.177481</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>-1.354884</td><br>      <td>-1.228296</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>1.012338</td><br>      <td>-0.664823</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>-0.456569</td><br>      <td>-0.190291</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>0.803164</td><br>      <td>-0.108290</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>-1.126295</td><br>      <td>0.887057</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>1.677125</td><br>      <td>1.057284</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>2.110309</td><br>      <td>0.467551</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>-0.134929</td><br>      <td>-1.536377</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>-0.912711</td><br>      <td>-0.335276</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>0.960719</td><br>      <td>1.579240</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>-0.584885</td><br>      <td>2.334651</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>0.753077</td><br>      <td>-0.878469</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>-0.579165</td><br>      <td>-0.886514</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>-1.545299</td><br>      <td>1.419417</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>0.617897</td><br>      <td>-0.460868</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>70</th><br>      <td>1.675682</td><br>      <td>0.324589</td><br>    </tr><br>    <tr><br>      <th>71</th><br>      <td>0.885449</td><br>      <td>-0.584616</td><br>    </tr><br>    <tr><br>      <th>72</th><br>      <td>-1.351910</td><br>      <td>-0.158786</td><br>    </tr><br>    <tr><br>      <th>73</th><br>      <td>1.542141</td><br>      <td>-0.677642</td><br>    </tr><br>    <tr><br>      <th>74</th><br>      <td>0.707695</td><br>      <td>1.197553</td><br>    </tr><br>    <tr><br>      <th>75</th><br>      <td>2.007399</td><br>      <td>0.866642</td><br>    </tr><br>    <tr><br>      <th>76</th><br>      <td>0.017686</td><br>      <td>1.342749</td><br>    </tr><br>    <tr><br>      <th>77</th><br>      <td>-0.384149</td><br>      <td>1.211767</td><br>    </tr><br>    <tr><br>      <th>78</th><br>      <td>-1.108524</td><br>      <td>-1.196269</td><br>    </tr><br>    <tr><br>      <th>79</th><br>      <td>-0.352873</td><br>      <td>0.257693</td><br>    </tr><br>    <tr><br>      <th>80</th><br>      <td>0.171741</td><br>      <td>0.085246</td><br>    </tr><br>    <tr><br>      <th>81</th><br>      <td>-1.553032</td><br>      <td>0.952371</td><br>    </tr><br>    <tr><br>      <th>82</th><br>      <td>-0.838789</td><br>      <td>-0.575233</td><br>    </tr><br>    <tr><br>      <th>83</th><br>      <td>0.384706</td><br>      <td>-0.666920</td><br>    </tr><br>    <tr><br>      <th>84</th><br>      <td>0.399759</td><br>      <td>-0.766464</td><br>    </tr><br>    <tr><br>      <th>85</th><br>      <td>-0.250290</td><br>      <td>-2.505601</td><br>    </tr><br>    <tr><br>      <th>86</th><br>      <td>0.148026</td><br>      <td>0.136244</td><br>    </tr><br>    <tr><br>      <th>87</th><br>      <td>-0.117722</td><br>      <td>-0.639923</td><br>    </tr><br>    <tr><br>      <th>88</th><br>      <td>-0.342262</td><br>      <td>-1.004030</td><br>    </tr><br>    <tr><br>      <th>89</th><br>      <td>-1.190334</td><br>      <td>1.718531</td><br>    </tr><br>    <tr><br>      <th>90</th><br>      <td>-1.717858</td><br>      <td>-1.586579</td><br>    </tr><br>    <tr><br>      <th>91</th><br>      <td>-0.642626</td><br>      <td>0.619875</td><br>    </tr><br>    <tr><br>      <th>92</th><br>      <td>0.166245</td><br>      <td>0.463219</td><br>    </tr><br>    <tr><br>      <th>93</th><br>      <td>0.174040</td><br>      <td>-1.267858</td><br>    </tr><br>    <tr><br>      <th>94</th><br>      <td>1.688834</td><br>      <td>-0.346080</td><br>    </tr><br>    <tr><br>      <th>95</th><br>      <td>-0.757331</td><br>      <td>-0.554673</td><br>    </tr><br>    <tr><br>      <th>96</th><br>      <td>-1.190019</td><br>      <td>-0.349220</td><br>    </tr><br>    <tr><br>      <th>97</th><br>      <td>-2.924324</td><br>      <td>1.204126</td><br>    </tr><br>    <tr><br>      <th>98</th><br>      <td>-0.189692</td><br>      <td>-0.017631</td><br>    </tr><br>    <tr><br>      <th>99</th><br>      <td>0.198003</td><br>      <td>1.257691</td><br>    </tr><br>  </tbody><br></table><br><p>100 rows × 2 columns</p><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.permutation(d)  <span class="comment"># 行索引随机排列</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">array([[-1.53637673,  1.08445526, -0.13492947],</span><br><span class="line">       [-0.10665737,  0.79161967, -0.80522752],</span><br><span class="line">       [-0.67764199,  0.28441236,  1.542141  ],</span><br><span class="line">       [ 1.34274858, -0.94863236,  0.0176861 ],</span><br><span class="line">       [ 0.88705681, -1.47339335, -1.12629525],</span><br><span class="line">       [ 0.08524615, -0.64432748,  0.17174129],</span><br><span class="line">       [-1.07621935, -1.52843328, -0.51188344],</span><br><span class="line">       [ 1.19755344, -1.48005054,  0.70769501],</span><br><span class="line">       [-0.66482255,  0.26889936,  1.01233848],</span><br><span class="line">       [ 0.25271899,  0.16765991,  0.20635153],</span><br><span class="line">       [-0.58461607, -0.48980375,  0.88544903],</span><br><span class="line">       [ 2.33465136,  1.11837819, -0.58488493],</span><br><span class="line">       [-0.87846901,  0.57511178,  0.75307679],</span><br><span class="line">       [ 2.92324165,  0.23942027,  0.28790037],</span><br><span class="line">       [ 0.46321869, -0.2722443 ,  0.16624544],</span><br><span class="line">       [ 1.57924003, -0.07769439,  0.9607191 ],</span><br><span class="line">       [ 0.14866542,  1.55298961,  0.97487729],</span><br><span class="line">       [-1.58657871, -0.45202914, -1.71785795],</span><br><span class="line">       [ 0.75153559,  0.35419736,  0.88669576],</span><br><span class="line">       [-0.25898061, -0.17926159, -0.20883057],</span><br><span class="line">       [ 0.76417317, -1.56947926,  0.21653596],</span><br><span class="line">       [-0.19029146, -1.07833877, -0.45656882],</span><br><span class="line">       [ 0.27379659, -1.25839717, -0.20598106],</span><br><span class="line">       [-0.40163904, -0.33021426, -1.13700141],</span><br><span class="line">       [-0.31895677, -3.1063322 ,  0.47571046],</span><br><span class="line">       [-0.37066453,  2.27710577, -1.42483707],</span><br><span class="line">       [-1.17863968, -1.86884747, -0.56859643],</span><br><span class="line">       [ 1.7185307 , -0.41914124, -1.1903335 ],</span><br><span class="line">       [ 0.46423907, -0.28174321, -0.71298846],</span><br><span class="line">       [ 0.66578421,  0.49131552,  0.73192933],</span><br><span class="line">       [ 0.25769286,  0.94110296, -0.35287332],</span><br><span class="line">       [-1.26785792, -1.86873657,  0.17404006],</span><br><span class="line">       [ 0.04409576, -0.23517703,  0.49215674],</span><br><span class="line">       [-0.29570943,  0.40474328, -0.23005976],</span><br><span class="line">       [-2.50560146, -0.94024531, -0.25029039],</span><br><span class="line">       [ 1.05728399,  0.01026643,  1.677125  ],</span><br><span class="line">       [ 0.3245894 , -1.53828668,  1.67568232],</span><br><span class="line">       [ 0.87221377,  1.19484678,  0.18824794],</span><br><span class="line">       [-0.63992255, -0.48551672, -0.11772157],</span><br><span class="line">       [-0.46086836, -0.77391013,  0.61789665],</span><br><span class="line">       [-1.19626944,  0.06604291, -1.10852433],</span><br><span class="line">       [ 1.20412601, -0.13408964, -2.92432368],</span><br><span class="line">       [-1.0040302 , -1.86517743, -0.34226164],</span><br><span class="line">       [ 0.74529943, -1.43741424,  0.76660628],</span><br><span class="line">       [-1.17297346, -1.00213529, -1.00705225],</span><br><span class="line">       [-0.04418469,  0.70220937,  1.34609585],</span><br><span class="line">       [ 0.61987487, -0.91351381, -0.64262553],</span><br><span class="line">       [-0.34921995, -0.27490071, -1.19001899],</span><br><span class="line">       [-0.48349277, -2.21230522,  0.75348734],</span><br><span class="line">       [-0.66177152,  1.39698582, -0.70344233],</span><br><span class="line">       [ 0.46755078,  0.61010902,  2.11030856],</span><br><span class="line">       [-0.03656433, -0.32166214, -0.53643193],</span><br><span class="line">       [ 1.21176722,  1.79032819, -0.38414932],</span><br><span class="line">       [ 1.41941704, -2.66082277, -1.54529942],</span><br><span class="line">       [-0.33527593,  1.24263909, -0.91271137],</span><br><span class="line">       [ 0.8821974 , -0.792584  , -0.4603104 ],</span><br><span class="line">       [-0.8144514 , -2.5224221 , -0.74103789],</span><br><span class="line">       [-0.95655992,  0.25397797,  0.19028136],</span><br><span class="line">       [-2.17748081, -0.18898619,  1.41164612],</span><br><span class="line">       [-0.57523277,  1.19559379, -0.83878902],</span><br><span class="line">       [ 1.03460475, -0.71565665, -0.11342188],</span><br><span class="line">       [-1.2282959 ,  0.98045534, -1.35488367],</span><br><span class="line">       [-0.55467295,  0.80615552, -0.75733098],</span><br><span class="line">       [-0.23822131,  0.37780076,  0.34689632],</span><br><span class="line">       [-0.34608   ,  0.71558374,  1.68883422],</span><br><span class="line">       [ 1.21525054, -0.33618904,  1.32922366],</span><br><span class="line">       [-0.50037052,  2.29273735,  0.20962005],</span><br><span class="line">       [ 2.86203218, -0.85041155, -1.28144286],</span><br><span class="line">       [-0.01763088,  0.36019972, -0.1896925 ],</span><br><span class="line">       [-0.66692035, -0.36106907,  0.38470566],</span><br><span class="line">       [ 0.8666419 , -2.16604795,  2.00739915],</span><br><span class="line">       [ 0.96432056,  0.5453409 , -2.17579431],</span><br><span class="line">       [ 0.67369366,  0.08077827,  2.5005612 ],</span><br><span class="line">       [-1.16429123,  0.79713727, -0.25197537],</span><br><span class="line">       [-0.2939124 ,  0.89605861, -0.10928228],</span><br><span class="line">       [ 0.20163915, -1.88657785, -1.35299109],</span><br><span class="line">       [ 1.40667152,  0.8492366 ,  0.59121519],</span><br><span class="line">       [ 1.25769127,  0.03794971,  0.19800272],</span><br><span class="line">       [-1.58991563, -0.13940638,  1.57186172],</span><br><span class="line">       [ 0.15445805,  0.05908573, -0.11569776],</span><br><span class="line">       [ 0.95237121, -0.41100879, -1.5530315 ],</span><br><span class="line">       [-0.54598302,  0.75780254,  1.46904955],</span><br><span class="line">       [-0.10828954, -0.07040856,  0.80316361],</span><br><span class="line">       [-0.50026256, -1.43052028,  1.04875044],</span><br><span class="line">       [ 0.36532874,  0.31554344,  0.80914269],</span><br><span class="line">       [-0.46564749,  1.67776276,  1.20278925],</span><br><span class="line">       [-0.15878616,  0.43289021, -1.35191002],</span><br><span class="line">       [ 0.69994909,  1.27138114,  1.43294663],</span><br><span class="line">       [ 0.15374554, -0.0955892 ,  0.30035091],</span><br><span class="line">       [-0.26580255,  0.16008549, -0.17068522],</span><br><span class="line">       [ 0.17722122, -0.41482462,  0.27209482],</span><br><span class="line">       [ 0.13624352, -0.98462975,  0.14802624],</span><br><span class="line">       [ 0.3062014 ,  0.23298596,  0.5700139 ],</span><br><span class="line">       [-0.73064952, -0.10998176, -0.4639415 ],</span><br><span class="line">       [-0.28404186, -0.75203351, -0.04664054],</span><br><span class="line">       [-1.72127943, -0.42792277, -0.429139  ],</span><br><span class="line">       [ 1.02690415,  1.27322693, -0.02700592],</span><br><span class="line">       [-0.88651406, -1.5960373 , -0.57916499],</span><br><span class="line">       [ 0.20192568,  1.26338595,  0.62973911],</span><br><span class="line">       [-0.76646432,  1.25524314,  0.39975903]])</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.take(np.random.permutation(d.index))</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>66</th><br>      <td>0.952371</td><br>      <td>-0.411009</td><br>      <td>-1.553032</td><br>    </tr><br>    <tr><br>      <th>84</th><br>      <td>-0.584616</td><br>      <td>-0.489804</td><br>      <td>0.885449</td><br>    </tr><br>    <tr><br>      <th>94</th><br>      <td>0.464239</td><br>      <td>-0.281743</td><br>      <td>-0.712988</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>-1.589916</td><br>      <td>-0.139406</td><br>      <td>1.571862</td><br>    </tr><br>    <tr><br>      <th>39</th><br>      <td>0.467551</td><br>      <td>0.610109</td><br>      <td>2.110309</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>-0.265803</td><br>      <td>0.160085</td><br>      <td>-0.170685</td><br>    </tr><br>    <tr><br>      <th>35</th><br>      <td>2.862032</td><br>      <td>-0.850412</td><br>      <td>-1.281443</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.664823</td><br>      <td>0.268899</td><br>      <td>1.012338</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>-0.346080</td><br>      <td>0.715584</td><br>      <td>1.688834</td><br>    </tr><br>    <tr><br>      <th>44</th><br>      <td>-0.036564</td><br>      <td>-0.321662</td><br>      <td>-0.536432</td><br>    </tr><br>    <tr><br>      <th>63</th><br>      <td>-0.370665</td><br>      <td>2.277106</td><br>      <td>-1.424837</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>-0.878469</td><br>      <td>0.575112</td><br>      <td>0.753077</td><br>    </tr><br>    <tr><br>      <th>37</th><br>      <td>0.201926</td><br>      <td>1.263386</td><br>      <td>0.629739</td><br>    </tr><br>    <tr><br>      <th>88</th><br>      <td>0.252719</td><br>      <td>0.167660</td><br>      <td>0.206352</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>-0.293912</td><br>      <td>0.896059</td><br>      <td>-0.109282</td><br>    </tr><br>    <tr><br>      <th>56</th><br>      <td>-0.677642</td><br>      <td>0.284412</td><br>      <td>1.542141</td><br>    </tr><br>    <tr><br>      <th>68</th><br>      <td>-0.106657</td><br>      <td>0.791620</td><br>      <td>-0.805228</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>0.764173</td><br>      <td>-1.569479</td><br>      <td>0.216536</td><br>    </tr><br>    <tr><br>      <th>92</th><br>      <td>-0.554673</td><br>      <td>0.806156</td><br>      <td>-0.757331</td><br>    </tr><br>    <tr><br>      <th>95</th><br>      <td>-0.108290</td><br>      <td>-0.070409</td><br>      <td>0.803164</td><br>    </tr><br>    <tr><br>      <th>0</th><br>      <td>0.136244</td><br>      <td>-0.984630</td><br>      <td>0.148026</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>0.882197</td><br>      <td>-0.792584</td><br>      <td>-0.460310</td><br>    </tr><br>    <tr><br>      <th>59</th><br>      <td>1.406672</td><br>      <td>0.849237</td><br>      <td>0.591215</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>0.365329</td><br>      <td>0.315543</td><br>      <td>0.809143</td><br>    </tr><br>    <tr><br>      <th>61</th><br>      <td>0.324589</td><br>      <td>-1.538287</td><br>      <td>1.675682</td><br>    </tr><br>    <tr><br>      <th>36</th><br>      <td>-0.814451</td><br>      <td>-2.522422</td><br>      <td>-0.741038</td><br>    </tr><br>    <tr><br>      <th>70</th><br>      <td>1.579240</td><br>      <td>-0.077694</td><br>      <td>0.960719</td><br>    </tr><br>    <tr><br>      <th>80</th><br>      <td>1.211767</td><br>      <td>1.790328</td><br>      <td>-0.384149</td><br>    </tr><br>    <tr><br>      <th>86</th><br>      <td>1.057284</td><br>      <td>0.010266</td><br>      <td>1.677125</td><br>    </tr><br>    <tr><br>      <th>42</th><br>      <td>-1.076219</td><br>      <td>-1.528433</td><br>      <td>-0.511883</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>78</th><br>      <td>0.148665</td><br>      <td>1.552990</td><br>      <td>0.974877</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>-0.766464</td><br>      <td>1.255243</td><br>      <td>0.399759</td><br>    </tr><br>    <tr><br>      <th>30</th><br>      <td>-0.190291</td><br>      <td>-1.078339</td><br>      <td>-0.456569</td><br>    </tr><br>    <tr><br>      <th>93</th><br>      <td>0.745299</td><br>      <td>-1.437414</td><br>      <td>0.766606</td><br>    </tr><br>    <tr><br>      <th>79</th><br>      <td>0.866642</td><br>      <td>-2.166048</td><br>      <td>2.007399</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>0.257693</td><br>      <td>0.941103</td><br>      <td>-0.352873</td><br>    </tr><br>    <tr><br>      <th>96</th><br>      <td>1.257691</td><br>      <td>0.037950</td><br>      <td>0.198003</td><br>    </tr><br>    <tr><br>      <th>50</th><br>      <td>0.085246</td><br>      <td>-0.644327</td><br>      <td>0.171741</td><br>    </tr><br>    <tr><br>      <th>57</th><br>      <td>1.026904</td><br>      <td>1.273227</td><br>      <td>-0.027006</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>-0.956560</td><br>      <td>0.253978</td><br>      <td>0.190281</td><br>    </tr><br>    <tr><br>      <th>90</th><br>      <td>-0.483493</td><br>      <td>-2.212305</td><br>      <td>0.753487</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>0.665784</td><br>      <td>0.491316</td><br>      <td>0.731929</td><br>    </tr><br>    <tr><br>      <th>47</th><br>      <td>2.923242</td><br>      <td>0.239420</td><br>      <td>0.287900</td><br>    </tr><br>    <tr><br>      <th>55</th><br>      <td>1.718531</td><br>      <td>-0.419141</td><br>      <td>-1.190334</td><br>    </tr><br>    <tr><br>      <th>64</th><br>      <td>-0.460868</td><br>      <td>-0.773910</td><br>      <td>0.617897</td><br>    </tr><br>    <tr><br>      <th>89</th><br>      <td>-0.666920</td><br>      <td>-0.361069</td><br>      <td>0.384706</td><br>    </tr><br>    <tr><br>      <th>81</th><br>      <td>-1.164291</td><br>      <td>0.797137</td><br>      <td>-0.251975</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>0.177221</td><br>      <td>-0.414825</td><br>      <td>0.272095</td><br>    </tr><br>    <tr><br>      <th>32</th><br>      <td>-0.335276</td><br>      <td>1.242639</td><br>      <td>-0.912711</td><br>    </tr><br>    <tr><br>      <th>45</th><br>      <td>0.273797</td><br>      <td>-1.258397</td><br>      <td>-0.205981</td><br>    </tr><br>    <tr><br>      <th>41</th><br>      <td>-0.639923</td><br>      <td>-0.485517</td><br>      <td>-0.117722</td><br>    </tr><br>    <tr><br>      <th>33</th><br>      <td>0.673694</td><br>      <td>0.080778</td><br>      <td>2.500561</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>-0.158786</td><br>      <td>0.432890</td><br>      <td>-1.351910</td><br>    </tr><br>    <tr><br>      <th>40</th><br>      <td>-0.017631</td><br>      <td>0.360200</td><br>      <td>-0.189692</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>1.419417</td><br>      <td>-2.660823</td><br>      <td>-1.545299</td><br>    </tr><br>    <tr><br>      <th>72</th><br>      <td>0.463219</td><br>      <td>-0.272244</td><br>      <td>0.166245</td><br>    </tr><br>    <tr><br>      <th>85</th><br>      <td>1.204126</td><br>      <td>-0.134090</td><br>      <td>-2.924324</td><br>    </tr><br>    <tr><br>      <th>83</th><br>      <td>-2.505601</td><br>      <td>-0.940245</td><br>      <td>-0.250290</td><br>    </tr><br>    <tr><br>      <th>62</th><br>      <td>-0.401639</td><br>      <td>-0.330214</td><br>      <td>-1.137001</td><br>    </tr><br>    <tr><br>      <th>97</th><br>      <td>-0.349220</td><br>      <td>-0.274901</td><br>      <td>-1.190019</td><br>    </tr><br>  </tbody><br></table><br><p>100 rows × 3 columns</p><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[np.random.permutation(d.columns)]</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-1.164291</td><br>      <td>0.797137</td><br>      <td>-0.251975</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>0.201639</td><br>      <td>-1.886578</td><br>      <td>-1.352991</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>-0.956560</td><br>      <td>0.253978</td><br>      <td>0.190281</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-0.106657</td><br>      <td>0.791620</td><br>      <td>-0.805228</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>0.964321</td><br>      <td>0.545341</td><br>      <td>-2.175794</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>0.044096</td><br>      <td>-0.235177</td><br>      <td>0.492157</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>-0.500263</td><br>      <td>-1.430520</td><br>      <td>1.048750</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>-0.293912</td><br>      <td>0.896059</td><br>      <td>-0.109282</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>0.464239</td><br>      <td>-0.281743</td><br>      <td>-0.712988</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>-0.370665</td><br>      <td>2.277106</td><br>      <td>-1.424837</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>0.154458</td><br>      <td>0.059086</td><br>      <td>-0.115698</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>-0.265803</td><br>      <td>0.160085</td><br>      <td>-0.170685</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>-0.730650</td><br>      <td>-0.109982</td><br>      <td>-0.463942</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>0.201926</td><br>      <td>1.263386</td><br>      <td>0.629739</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>-2.177481</td><br>      <td>-0.188986</td><br>      <td>1.411646</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>-1.228296</td><br>      <td>0.980455</td><br>      <td>-1.354884</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>-0.664823</td><br>      <td>0.268899</td><br>      <td>1.012338</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>-0.190291</td><br>      <td>-1.078339</td><br>      <td>-0.456569</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>-0.108290</td><br>      <td>-0.070409</td><br>      <td>0.803164</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>0.887057</td><br>      <td>-1.473393</td><br>      <td>-1.126295</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>1.057284</td><br>      <td>0.010266</td><br>      <td>1.677125</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>0.467551</td><br>      <td>0.610109</td><br>      <td>2.110309</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>-1.536377</td><br>      <td>1.084455</td><br>      <td>-0.134929</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>-0.335276</td><br>      <td>1.242639</td><br>      <td>-0.912711</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>1.579240</td><br>      <td>-0.077694</td><br>      <td>0.960719</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>2.334651</td><br>      <td>1.118378</td><br>      <td>-0.584885</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>-0.878469</td><br>      <td>0.575112</td><br>      <td>0.753077</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>-0.886514</td><br>      <td>-1.596037</td><br>      <td>-0.579165</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>1.419417</td><br>      <td>-2.660823</td><br>      <td>-1.545299</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>-0.460868</td><br>      <td>-0.773910</td><br>      <td>0.617897</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>70</th><br>      <td>0.324589</td><br>      <td>-1.538287</td><br>      <td>1.675682</td><br>    </tr><br>    <tr><br>      <th>71</th><br>      <td>-0.584616</td><br>      <td>-0.489804</td><br>      <td>0.885449</td><br>    </tr><br>    <tr><br>      <th>72</th><br>      <td>-0.158786</td><br>      <td>0.432890</td><br>      <td>-1.351910</td><br>    </tr><br>    <tr><br>      <th>73</th><br>      <td>-0.677642</td><br>      <td>0.284412</td><br>      <td>1.542141</td><br>    </tr><br>    <tr><br>      <th>74</th><br>      <td>1.197553</td><br>      <td>-1.480051</td><br>      <td>0.707695</td><br>    </tr><br>    <tr><br>      <th>75</th><br>      <td>0.866642</td><br>      <td>-2.166048</td><br>      <td>2.007399</td><br>    </tr><br>    <tr><br>      <th>76</th><br>      <td>1.342749</td><br>      <td>-0.948632</td><br>      <td>0.017686</td><br>    </tr><br>    <tr><br>      <th>77</th><br>      <td>1.211767</td><br>      <td>1.790328</td><br>      <td>-0.384149</td><br>    </tr><br>    <tr><br>      <th>78</th><br>      <td>-1.196269</td><br>      <td>0.066043</td><br>      <td>-1.108524</td><br>    </tr><br>    <tr><br>      <th>79</th><br>      <td>0.257693</td><br>      <td>0.941103</td><br>      <td>-0.352873</td><br>    </tr><br>    <tr><br>      <th>80</th><br>      <td>0.085246</td><br>      <td>-0.644327</td><br>      <td>0.171741</td><br>    </tr><br>    <tr><br>      <th>81</th><br>      <td>0.952371</td><br>      <td>-0.411009</td><br>      <td>-1.553032</td><br>    </tr><br>    <tr><br>      <th>82</th><br>      <td>-0.575233</td><br>      <td>1.195594</td><br>      <td>-0.838789</td><br>    </tr><br>    <tr><br>      <th>83</th><br>      <td>-0.666920</td><br>      <td>-0.361069</td><br>      <td>0.384706</td><br>    </tr><br>    <tr><br>      <th>84</th><br>      <td>-0.766464</td><br>      <td>1.255243</td><br>      <td>0.399759</td><br>    </tr><br>    <tr><br>      <th>85</th><br>      <td>-2.505601</td><br>      <td>-0.940245</td><br>      <td>-0.250290</td><br>    </tr><br>    <tr><br>      <th>86</th><br>      <td>0.136244</td><br>      <td>-0.984630</td><br>      <td>0.148026</td><br>    </tr><br>    <tr><br>      <th>87</th><br>      <td>-0.639923</td><br>      <td>-0.485517</td><br>      <td>-0.117722</td><br>    </tr><br>    <tr><br>      <th>88</th><br>      <td>-1.004030</td><br>      <td>-1.865177</td><br>      <td>-0.342262</td><br>    </tr><br>    <tr><br>      <th>89</th><br>      <td>1.718531</td><br>      <td>-0.419141</td><br>      <td>-1.190334</td><br>    </tr><br>    <tr><br>      <th>90</th><br>      <td>-1.586579</td><br>      <td>-0.452029</td><br>      <td>-1.717858</td><br>    </tr><br>    <tr><br>      <th>91</th><br>      <td>0.619875</td><br>      <td>-0.913514</td><br>      <td>-0.642626</td><br>    </tr><br>    <tr><br>      <th>92</th><br>      <td>0.463219</td><br>      <td>-0.272244</td><br>      <td>0.166245</td><br>    </tr><br>    <tr><br>      <th>93</th><br>      <td>-1.267858</td><br>      <td>-1.868737</td><br>      <td>0.174040</td><br>    </tr><br>    <tr><br>      <th>94</th><br>      <td>-0.346080</td><br>      <td>0.715584</td><br>      <td>1.688834</td><br>    </tr><br>    <tr><br>      <th>95</th><br>      <td>-0.554673</td><br>      <td>0.806156</td><br>      <td>-0.757331</td><br>    </tr><br>    <tr><br>      <th>96</th><br>      <td>-0.349220</td><br>      <td>-0.274901</td><br>      <td>-1.190019</td><br>    </tr><br>    <tr><br>      <th>97</th><br>      <td>1.204126</td><br>      <td>-0.134090</td><br>      <td>-2.924324</td><br>    </tr><br>    <tr><br>      <th>98</th><br>      <td>-0.017631</td><br>      <td>0.360200</td><br>      <td>-0.189692</td><br>    </tr><br>    <tr><br>      <th>99</th><br>      <td>1.257691</td><br>      <td>0.037950</td><br>      <td>0.198003</td><br>    </tr><br>  </tbody><br></table><br><p>100 rows × 3 columns</p><br></div><h3 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h3><ul><li>groupby()</li></ul><p>练习：<br>假设菜市场张大妈在卖菜，有以下属性：<br>菜品(item)：萝卜，白菜，辣椒，冬瓜<br>颜色(color)：白，青，红<br>重量(weight)<br>价格(price)<br>要求以属性作为列索引，新建一个df = DataFrame<br>对df进行聚合操作，求出颜色为白色的价格总和<br>对df进行聚合操作，求出萝卜的所有重量(包括白萝卜，胡萝卜，青萝卜）以及平均价格</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = DataFrame(&#123;</span><br><span class="line">    <span class="string">'item'</span>: np.random.choice([<span class="string">'萝卜'</span>, <span class="string">'白菜'</span>, <span class="string">'辣椒'</span>, <span class="string">'冬瓜'</span>], size=<span class="number">20</span>),</span><br><span class="line">    <span class="string">'color'</span>: np.random.choice([<span class="string">'白'</span>, <span class="string">'青'</span>, <span class="string">'红'</span>], size=<span class="number">20</span>),</span><br><span class="line">    <span class="string">'weight'</span>: np.random.randint(<span class="number">1</span>, <span class="number">5</span>, size=<span class="number">20</span>),</span><br><span class="line">    <span class="string">'price'</span>: np.round(np.random.uniform(<span class="number">1</span>, <span class="number">5</span>, size=<span class="number">20</span>), <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>item</th><br>      <th>color</th><br>      <th>weight</th><br>      <th>price</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>白菜</td><br>      <td>青</td><br>      <td>4</td><br>      <td>3.4</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>辣椒</td><br>      <td>青</td><br>      <td>3</td><br>      <td>3.3</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>4</td><br>      <td>4.4</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>辣椒</td><br>      <td>红</td><br>      <td>1</td><br>      <td>1.4</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>3</td><br>      <td>4.7</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>冬瓜</td><br>      <td>青</td><br>      <td>2</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>1</td><br>      <td>3.8</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>冬瓜</td><br>      <td>白</td><br>      <td>3</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>白菜</td><br>      <td>红</td><br>      <td>3</td><br>      <td>3.4</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>2</td><br>      <td>4.6</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>白菜</td><br>      <td>红</td><br>      <td>2</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>萝卜</td><br>      <td>白</td><br>      <td>2</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>4</td><br>      <td>2.3</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>冬瓜</td><br>      <td>青</td><br>      <td>2</td><br>      <td>2.7</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>萝卜</td><br>      <td>青</td><br>      <td>4</td><br>      <td>4.8</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>冬瓜</td><br>      <td>白</td><br>      <td>1</td><br>      <td>3.8</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>辣椒</td><br>      <td>青</td><br>      <td>4</td><br>      <td>2.8</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>4</td><br>      <td>3.4</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>萝卜</td><br>      <td>白</td><br>      <td>2</td><br>      <td>4.6</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>萝卜</td><br>      <td>青</td><br>      <td>3</td><br>      <td>4.5</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'color'</span>) <span class="comment"># 返回 DataFrameGroupBy 类对象</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x7fb8656ace10&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'color'</span>)[<span class="string">'price'</span>].sum() <span class="comment"># 返回Series</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line">白    25.9</span><br><span class="line">红    17.5</span><br><span class="line">青    24.5</span><br><span class="line">Name: price, dtype: float64</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'color'</span>)[<span class="string">'price'</span>].sum()[<span class="string">'白'</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25.9</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'item'</span>)[<span class="string">'weight'</span>].sum()[<span class="string">'萝卜'</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'item'</span>)[<span class="string">'price'</span>].sum()[<span class="string">'萝卜'</span>]</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">26.6</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_price</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="comment"># item -&gt; Series表示每个品种的weight或price</span></span><br><span class="line">    <span class="keyword">if</span> item.name == <span class="string">'weight'</span>:</span><br><span class="line">        <span class="keyword">return</span> item.sum()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> item.mean()</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># item -&gt; Series对象</span></span><br><span class="line"><span class="comment"># transform() 返回的行索引与原表的行索引保持一致</span></span><br><span class="line">df2_w_p = df.groupby(<span class="string">'item'</span>)[<span class="string">'weight'</span>, <span class="string">'price'</span>].transform(weight_price)</span><br><span class="line">df2_w_p.rename(columns=&#123;<span class="string">'weight'</span>: <span class="string">'weight_total'</span>,</span><br><span class="line">                       <span class="string">'price'</span>: <span class="string">'price_mean'</span>&#125;, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat((df, df2_w_p), axis=1)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>item</th><br>      <th>color</th><br>      <th>weight</th><br>      <th>price</th><br>      <th>weight_total</th><br>      <th>price_mean</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>白菜</td><br>      <td>青</td><br>      <td>4</td><br>      <td>3.4</td><br>      <td>9.0</td><br>      <td>2.933333</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>辣椒</td><br>      <td>青</td><br>      <td>3</td><br>      <td>3.3</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>4</td><br>      <td>4.4</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>辣椒</td><br>      <td>红</td><br>      <td>1</td><br>      <td>1.4</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>3</td><br>      <td>4.7</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>冬瓜</td><br>      <td>青</td><br>      <td>2</td><br>      <td>3.0</td><br>      <td>8.0</td><br>      <td>3.125000</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>1</td><br>      <td>3.8</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>冬瓜</td><br>      <td>白</td><br>      <td>3</td><br>      <td>3.0</td><br>      <td>8.0</td><br>      <td>3.125000</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>白菜</td><br>      <td>红</td><br>      <td>3</td><br>      <td>3.4</td><br>      <td>9.0</td><br>      <td>2.933333</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>2</td><br>      <td>4.6</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>白菜</td><br>      <td>红</td><br>      <td>2</td><br>      <td>2.0</td><br>      <td>9.0</td><br>      <td>2.933333</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>萝卜</td><br>      <td>白</td><br>      <td>2</td><br>      <td>2.0</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>萝卜</td><br>      <td>红</td><br>      <td>4</td><br>      <td>2.3</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>冬瓜</td><br>      <td>青</td><br>      <td>2</td><br>      <td>2.7</td><br>      <td>8.0</td><br>      <td>3.125000</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>萝卜</td><br>      <td>青</td><br>      <td>4</td><br>      <td>4.8</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>冬瓜</td><br>      <td>白</td><br>      <td>1</td><br>      <td>3.8</td><br>      <td>8.0</td><br>      <td>3.125000</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>辣椒</td><br>      <td>青</td><br>      <td>4</td><br>      <td>2.8</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>辣椒</td><br>      <td>白</td><br>      <td>4</td><br>      <td>3.4</td><br>      <td>19.0</td><br>      <td>3.333333</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>萝卜</td><br>      <td>白</td><br>      <td>2</td><br>      <td>4.6</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>萝卜</td><br>      <td>青</td><br>      <td>3</td><br>      <td>4.5</td><br>      <td>18.0</td><br>      <td>3.800000</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_price_2</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="comment"># item -&gt; DataFrame类型</span></span><br><span class="line">    rs = DataFrame(&#123;<span class="string">'weight_total'</span>: item[<span class="string">'weight'</span>].sum(),</span><br><span class="line">                   <span class="string">'price_mean'</span>: round(item[<span class="string">'price'</span>].mean(), <span class="number">2</span>)&#125;,</span><br><span class="line">                  index=[<span class="string">''</span>])</span><br><span class="line">    <span class="keyword">return</span> rs</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 返回结果， 默认情况是Series， 索引跟分组的品种保持一致</span><br><span class="line"></span><br><span class="line">df.groupby(&apos;item&apos;)[&apos;weight&apos;, &apos;price&apos;].apply(weight_price_2)</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th></th><br>      <th>weight_total</th><br>      <th>price_mean</th><br>    </tr><br>    <tr><br>      <th>item</th><br>      <th></th><br>      <th></th><br>      <th></th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>冬瓜</th><br>      <th></th><br>      <td>8</td><br>      <td>3.12</td><br>    </tr><br>    <tr><br>      <th>白菜</th><br>      <th></th><br>      <td>9</td><br>      <td>2.93</td><br>    </tr><br>    <tr><br>      <th>萝卜</th><br>      <th></th><br>      <td>18</td><br>      <td>3.80</td><br>    </tr><br>    <tr><br>      <th>辣椒</th><br>      <th></th><br>      <td>19</td><br>      <td>3.33</td><br>    </tr><br>  </tbody><br></table><br></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">'item'</span>)[<span class="string">'weight'</span>, <span class="string">'price'</span>].apply(weight_price_2).loc[<span class="string">'萝卜'</span>]</span><br></pre></td></tr></table></figure></div><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br>    .dataframe tbody tr th {<br>    vertical-align: top;<br>}<br>.dataframe thead th {<br>    text-align: right;<br>}<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>weight_total</th><br>      <th>price_mean</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th></th><br>      <td>18</td><br>      <td>3.8</td><br>    </tr><br>  </tbody><br></table><br></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Series, DataFrame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Python" scheme="https://www.xuhuiblog.cn/tags/Python/"/>
    
      <category term="数据分析" scheme="https://www.xuhuiblog.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
